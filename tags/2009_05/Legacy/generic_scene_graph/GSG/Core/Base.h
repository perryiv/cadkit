
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Optional base classes.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _GENERIC_SCENE_GRAPH_CORE_BASE_CLASSES_H_
#define _GENERIC_SCENE_GRAPH_CORE_BASE_CLASSES_H_

#include <utility>


namespace GSG {


template
<
  class First_,
  class Second_
>
class Pair
{
public:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Convenient typedefs.
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef typename First first_type;
  typedef typename Second second_type;


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  explicit Pair() : _pair()
  {
    // Empty.
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Copy constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Pair ( const Pair &b ) : _pair ( b.first(), b.second() )
  {
    // Empty.
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get the first type.
  //
  /////////////////////////////////////////////////////////////////////////////

  first_type &first()
  {
    return _pair.first;
  }

  const first_type &first() const
  {
    return _pair.first;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get the second type.
  //
  /////////////////////////////////////////////////////////////////////////////

  second_type &second()
  {
    return _pair.second;
  }

  const second_type &second() const
  {
    return _pair.second;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set the first type.
  //
  /////////////////////////////////////////////////////////////////////////////

  void first ( const first_type &f )
  {
    _pair.first = f;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set the second type.
  //
  /////////////////////////////////////////////////////////////////////////////

  void second ( const second_type &s )
  {
    _pair.second = s;
  }


private:

  std::pair < first_type, second_type > _pair;
};


}; // namespace GSG


#endif // _GENERIC_SCENE_GRAPH_CORE_BASE_CLASSES_H_
