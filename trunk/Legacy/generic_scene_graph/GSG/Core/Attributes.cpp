
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  The state attributes.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Attributes.h"
#include "GSG/Core/Material.h"

using namespace GSG;

GSG_IMPLEMENT_CLONE ( Attributes );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

Attributes::Attributes() : Referenced(),
  _frontMaterial ( 0x0 ),
  _backMaterial  ( 0x0 )
{
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

Attributes::Attributes ( const Attributes &a ) : Referenced ( a ),
  _frontMaterial ( Material::safeCloneMaterial ( a._frontMaterial.get() ) ),
  _backMaterial  ( Material::safeCloneMaterial ( a._backMaterial.get() ) )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

Attributes::~Attributes()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the material.
//
/////////////////////////////////////////////////////////////////////////////

const Material *Attributes::frontMaterial() const
{
  Lock lock ( this );
  return _frontMaterial.get();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the material.
//
/////////////////////////////////////////////////////////////////////////////

Material *Attributes::frontMaterial()
{
  Lock lock ( this );
  return _frontMaterial.get();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the material.
//
/////////////////////////////////////////////////////////////////////////////

void Attributes::frontMaterial ( Material *m )
{
  Lock lock ( this );
  _frontMaterial = m;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the material.
//
/////////////////////////////////////////////////////////////////////////////

const Material *Attributes::backMaterial() const
{
  Lock lock ( this );
  return _backMaterial.get();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the material.
//
/////////////////////////////////////////////////////////////////////////////

Material *Attributes::backMaterial()
{
  Lock lock ( this );
  return _backMaterial.get();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the material.
//
/////////////////////////////////////////////////////////////////////////////

void Attributes::backMaterial ( Material *m )
{
  Lock lock ( this );
  _backMaterial = m;
}
