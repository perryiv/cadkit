
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Grid class.
//
///////////////////////////////////////////////////////////////////////////////

#include "Precompiled.h"
#include "Grid.h"
#include "Factory.h"

#include "OsgTools/Grid.h"

#include "osg/Node"

using namespace SAL;
using namespace SAL::OSG;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( Grid, Grid::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Grid::Grid() : BaseClass(),
  _numBlocks ( 10, 10 ),
  _size      ( 1, 1 ),
  _center    ( 0, 0, 0 ),
  _color     ( 1, 1, 1, 1 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Grid::~Grid()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *Grid::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case SAL::Interfaces::IGridFloat::IID:
    return static_cast<SAL::Interfaces::IGridFloat*>(this);
  case SAL::Interfaces::IColorFloatRGBA::IID:
    return static_cast<SAL::Interfaces::IColorFloatRGBA*>(this);
  case SAL::Interfaces::IBuilder::IID:
    return static_cast<SAL::Interfaces::IBuilder*>(this);
  case Usul::Interfaces::IUnknown::IID:
    return static_cast<Usul::Interfaces::IUnknown*>(static_cast<SAL::Interfaces::IGridFloat*>(this));
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the number of grid blocks.
//
///////////////////////////////////////////////////////////////////////////////

void Grid::setNumGridBlocks ( const Vec2ui &num )
{
  _numBlocks = num;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the number of grid blocks.
//
///////////////////////////////////////////////////////////////////////////////

void Grid::getNumGridBlocks ( Vec2ui &num ) const
{
  num = _numBlocks;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the grid size.
//
///////////////////////////////////////////////////////////////////////////////

void Grid::setGridSize ( const Vec2 &s )
{
  _size = s;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the grid size.
//
///////////////////////////////////////////////////////////////////////////////

void Grid::getGridSize ( Vec2 &s ) const
{
  s = _size;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the grid center.
//
///////////////////////////////////////////////////////////////////////////////

void Grid::setGridCenter ( const Vec3 &c )
{
  _center = c;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the grid center.
//
///////////////////////////////////////////////////////////////////////////////

void Grid::getGridCenter ( Vec3 &c ) const
{
  c = _center;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color.
//
///////////////////////////////////////////////////////////////////////////////

void Grid::setColorRGBA ( const Color &rgba )
{
  _color = rgba;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color.
//
///////////////////////////////////////////////////////////////////////////////

void Grid::getColorRGBA ( Color &rgba ) const
{
  rgba = _color;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build the scene.
//
///////////////////////////////////////////////////////////////////////////////

SAL::Interfaces::INode *Grid::buildScene() const
{
  // Declare a grid tool and set its properties.
  OsgTools::Grid grid;
  grid.numBlocks ( _numBlocks );
  grid.size ( _size );
  grid.center ( _center );
  grid.color ( _color );

  // Build the grid.
  typedef USUL_VALID_REF_POINTER ( osg::Node ) ValidOsgNode;
  ValidOsgNode gn ( grid() );

  // Create the corresponding component.
  INode::ValidQueryPtr node ( Factory::create ( gn ) );

  // Return the new component.
  return node.release();
}
