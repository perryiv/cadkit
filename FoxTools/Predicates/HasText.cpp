
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Predicate for checking if the text is present.
//
///////////////////////////////////////////////////////////////////////////////

#include "FoxTools/Predicates/HasText.h"
#include "FoxTools/Headers/Label.h"

#include "Usul/Cast/Cast.h"

#include "boost/algorithm/string/find.hpp"

using namespace FoxTools;
using namespace FoxTools::Predicates;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor
//
///////////////////////////////////////////////////////////////////////////////

HasText::HasText ( const std::string &text, bool sub ) : 
  _text ( text ), 
  _sub  ( sub )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor
//
///////////////////////////////////////////////////////////////////////////////

HasText::HasText ( const HasText &object ) : 
  _text ( object._text ), 
  _sub  ( object._sub  )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

HasText::~HasText()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Assignment
//
///////////////////////////////////////////////////////////////////////////////

HasText &HasText::operator = ( const HasText &object )
{
  _text = object._text;
  _sub  = object._sub;
  return *this;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Predicate operator.
//
///////////////////////////////////////////////////////////////////////////////

bool HasText::operator () ( const FX::FXObject *object ) const
{
  const FX::FXLabel *label ( SAFE_CAST_FOX_CONST ( FX::FXLabel, object ) );
  const std::string text ( ( label ) ? label->getText().text() : "" );
  return ( ( _sub ) ? ( boost::find_first ( text, _text ) ) : ( text == _text ) );
}
