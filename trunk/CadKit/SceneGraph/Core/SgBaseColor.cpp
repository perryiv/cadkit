
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  SgBaseColor.cpp: Color class.
//
/////////////////////////////////////////////////////////////////////////////

#include "SgPrecompiled.h"
#include "SgBaseColor.h"

#include "Standard/SlPrint.h"

using namespace CadKit;

SG_IMPLEMENT_DYNAMIC_NODE ( SgBaseColor, SgAttribute );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgBaseColor::SgBaseColor() : SgAttribute(), _color ( 1.0f, 1.0f, 1.0f, 1.0f )
{
  SL_PRINT2 ( "SgBaseColor::SgBaseColor(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgBaseColor::SgBaseColor ( const SgBaseColor &baseColor ) : SgAttribute(),
  _color ( baseColor._color )
{
  SL_PRINT2 ( "SgBaseColor::SgBaseColor(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

SgBaseColor::~SgBaseColor()
{
  SL_PRINT2 ( "SgBaseColor::~SgBaseColor(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Does the given node have the same visible properties?
//
/////////////////////////////////////////////////////////////////////////////

bool SgBaseColor::isEqualVisibleProperties ( const SgNode &node ) const
{
  SL_ASSERT ( this );

  // Make sure we have the right type.
  if ( false == node.isOfType ( SgBaseColor::getClassType() ) )
    return false;

  // Typecast.
  SgBaseColor &c = (SgBaseColor &) node;

  // Are they the same?
  return ( _color == c._color && SgBaseColor::isEqualVisibleProperties ( node ) );
}
