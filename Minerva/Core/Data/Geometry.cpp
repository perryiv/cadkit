
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Data/Geometry.h"

#include "Usul/Trace/Trace.h"

#include "OsgTools/Callbacks/SortBackToFront.h"
#include "OsgTools/Utilities/ConvertToTriangles.h"

#include "osg/Node"
#include "osg/StateSet"

using namespace Minerva::Core::Data;

USUL_IMPLEMENT_TYPE_ID ( Geometry );
USUL_IMPLEMENT_IUNKNOWN_MEMBERS( Geometry, Geometry::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Geometry::Geometry() : 
  BaseClass(),
  _altitudeMode ( CLAMP_TO_GROUND ),
  _offset( 0.0, 0.0, 0.0 ),
  _dirty ( false ),
  _extrude ( false ),
  _renderBin ( osg::StateSet::DEFAULT_BIN ),
  _extents()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Geometry::~Geometry()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown* Geometry::queryInterface( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::ILayerExtents::IID:
    return static_cast<Usul::Interfaces::ILayerExtents*> ( this );
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the altitude mode.
//
///////////////////////////////////////////////////////////////////////////////

void Geometry::altitudeMode ( AltitudeMode mode )
{
  Guard guard ( this );
  _altitudeMode = mode;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the altitude mode.
//
///////////////////////////////////////////////////////////////////////////////

Geometry::AltitudeMode Geometry::altitudeMode () const
{
  Guard guard ( this );
  return _altitudeMode;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build the scene branch.
//
///////////////////////////////////////////////////////////////////////////////

osg::Node* Geometry::buildScene( Usul::Interfaces::IUnknown* caller )
{
  osg::ref_ptr<osg::Node> node ( this->_buildScene ( caller ) );
  
  if ( node.valid() )
  {
    osg::ref_ptr < osg::StateSet > ss ( node->getOrCreateStateSet () );
    
    // Set the render bin.
    ss->setRenderBinDetails( this->renderBin(), "RenderBin" );
    
    const unsigned int on ( osg::StateAttribute::ON | osg::StateAttribute::OVERRIDE );
    const unsigned int off ( osg::StateAttribute::ON | osg::StateAttribute::OVERRIDE );
    
    const unsigned int blendMode ( this->isSemiTransparent() ? on : off );
    
    ss->setMode ( GL_BLEND, blendMode );
    
    // Set render bin depending on alpha value.
    if( true == this->isSemiTransparent() )
    {
      ss->setRenderingHint ( osg::StateSet::TRANSPARENT_BIN );
      ss->setRenderBinDetails ( osg::StateSet::TRANSPARENT_BIN, "DepthSortedBin" );
      
      // Convert tri-strips to triangles (For sorting).
      OsgTools::Utilities::ConvertToTriangles convert;
      convert ( node.get() );
      
      osg::ref_ptr<osg::NodeVisitor> visitor ( new OsgTools::Callbacks::SetSortToFrontCallback );
      node->accept ( *visitor );
    }
  }
  
  this->dirty( false );
  
  return node.release();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the render bin.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int Geometry::renderBin() const
{
  Guard guard ( this );
  return _renderBin;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Set extrude flag.
//
///////////////////////////////////////////////////////////////////////////////

void Geometry::extrude ( bool b )
{
  Guard guard ( this );
  _extrude = b;
  this->dirty ( true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get extrude flag.
//
///////////////////////////////////////////////////////////////////////////////

bool Geometry::extrude() const
{
  Guard guard ( this );
  return _extrude;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the extents.
//
///////////////////////////////////////////////////////////////////////////////

void Geometry::extents ( const Extents& e )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  _extents = e;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the extents.
//
///////////////////////////////////////////////////////////////////////////////

Geometry::Extents Geometry::extents() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _extents;
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the min longitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double Geometry::minLon() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _extents.minLon();
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the min latitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double Geometry::minLat() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _extents.minLat();
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the max longitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double Geometry::maxLon() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _extents.maxLon();
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the max latitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double Geometry::maxLat() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _extents.maxLat();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the render bin.
//
///////////////////////////////////////////////////////////////////////////////

void Geometry::renderBin( unsigned int renderBin )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  
  // Only change it if it's different.
  if ( renderBin != _renderBin )
  {
    _renderBin = renderBin;
    this->dirty( true );
  }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Is this data object transparent?
//
///////////////////////////////////////////////////////////////////////////////

bool Geometry::isSemiTransparent() const
{
  USUL_TRACE_SCOPE;
  return false;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the offset.
//
///////////////////////////////////////////////////////////////////////////////

void Geometry::spatialOffset( const Point& value )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  if( false == _offset.equal ( value ) )
  {
    _offset = value;
    this->dirty( true );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the offset.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Math::Vec3d Geometry::spatialOffset() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _offset;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

void Geometry::dirty ( bool b )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  _dirty = b;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

bool Geometry::dirty() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _dirty;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Update.
//
///////////////////////////////////////////////////////////////////////////////

void Geometry::updateNotify ( Usul::Interfaces::IUnknown *caller )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Elevation has changed within the given extents.
//
///////////////////////////////////////////////////////////////////////////////

bool Geometry::elevationChangedNotify ( const Extents& extents, unsigned int level, ImagePtr elevationData, Unknown * caller )
{
  USUL_TRACE_SCOPE;
  return false;
}
