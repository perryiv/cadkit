
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  SgIdentity.cpp: Loads the identity matrix onto the current matrix stack.
//
/////////////////////////////////////////////////////////////////////////////

#include "SgPrecompiled.h"
#include "SgIdentity.h"

#include "Standard/SlPrint.h"

using namespace CadKit;

SG_IMPLEMENT_DYNAMIC_NODE ( SgIdentity, SgTransformation );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgIdentity::SgIdentity() : SgTransformation()
{
  SL_PRINT2 ( "SgIdentity::SgIdentity(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgIdentity::SgIdentity ( const SgIdentity &identity ) : SgTransformation ( identity )
{
  SL_PRINT2 ( "SgIdentity::SgIdentity(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

SgIdentity::~SgIdentity()
{
  SL_PRINT2 ( "SgIdentity::~SgIdentity(), this = %X\n", this );
}
