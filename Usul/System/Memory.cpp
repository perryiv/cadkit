
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Class that queries machine memory.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/System/Memory.h"

#include <sstream>

#ifdef _MSC_VER
# include <windows.h> // For GetComputerName()
#endif

using namespace Usul;
using namespace Usul::System;


///////////////////////////////////////////////////////////////////////////////
//
//  Get the memory.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Types::Uint64 Memory::totalPhysical()
{
#ifdef _MSC_VER

  ::MEMORYSTATUS status;
  ::GlobalMemoryStatus ( &status );
  return status.dwTotalPhys;

#else

  TODO

#endif
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the memory.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Types::Uint64 Memory::totalVirtual()
{
#ifdef _MSC_VER

  ::MEMORYSTATUS status;
  ::GlobalMemoryStatus ( &status );
  return status.dwTotalVirtual;

#else

  TODO

#endif
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the memory.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Types::Uint64 Memory::availablePhysical()
{
#ifdef _MSC_VER

  ::MEMORYSTATUS status;
  ::GlobalMemoryStatus ( &status );
  return status.dwAvailPhys;

#else

  TODO

#endif
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the memory.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Types::Uint64 Memory::availableVirtual()
{
#ifdef _MSC_VER

  ::MEMORYSTATUS status;
  ::GlobalMemoryStatus ( &status );
  return status.dwAvailVirtual;

#else

  TODO

#endif
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the memory.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Types::Uint64 Memory::usedPhysical()
{
  return ( Memory::totalPhysical() - Memory::availablePhysical() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the memory.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Types::Uint64 Memory::usedVirtual()
{
  return ( Memory::totalVirtual() - Memory::availableVirtual() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return a formatted string.
//
///////////////////////////////////////////////////////////////////////////////

std::string Memory::formatPhysical()
{
  const Usul::Types::Uint64 toKB ( 1024 );
  std::ostringstream out;
  out << "Memory Used: " << Memory::usedPhysical()      / toKB 
      << ", Available: " << Memory::availablePhysical() / toKB 
      << ", Total: "     << Memory::totalPhysical()     / toKB;
  return out.str();
}
