
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Transform class.
//
///////////////////////////////////////////////////////////////////////////////

#include "Precompiled.h"
#include "Transform.h"

#include "PfTools/Convert.h"

#include "Performer/pf/pfDCS.h"

using namespace SAL;
using namespace SAL::Performer;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( Transform, Transform::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Transform::Transform ( ::pfDCS *dcs ) : BaseClass ( dcs ),
  _dcs ( dcs )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Transform::~Transform()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *Transform::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case SAL::Interfaces::ITransformFloat::IID:
    return static_cast<SAL::Interfaces::ITransformFloat*>(this);
  case SAL::Interfaces::ITransformDouble::IID:
    return static_cast<SAL::Interfaces::ITransformDouble*>(this);
  default:
    return BaseClass::queryInterface ( iid );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the transformation matrix.
//
///////////////////////////////////////////////////////////////////////////////

void Transform::getTransformMatrix ( Matrixf &to ) const
{
  ::pfDCS *dcs = const_cast < ::pfDCS * > ( _dcs.get() );
  ::pfMatrix from;
  dcs->getMat ( from );
  PfTools::Convert::matrix ( from, to );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the transformation matrix.
//
///////////////////////////////////////////////////////////////////////////////

void Transform::setTransformMatrix ( const Matrixf &from )
{
  ::pfMatrix to;
  PfTools::Convert::matrix ( from, to );
  _dcs->setMat ( to );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the transformation matrix.
//
///////////////////////////////////////////////////////////////////////////////

void Transform::getTransformMatrix ( Matrixd &to ) const
{
  ::pfDCS *dcs = const_cast < ::pfDCS * > ( _dcs.get() );
  ::pfMatrix from;
  dcs->getMat ( from );
  PfTools::Convert::matrix ( from, to );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the transformation matrix.
//
///////////////////////////////////////////////////////////////////////////////

void Transform::setTransformMatrix ( const Matrixd &from )
{
  ::pfMatrix to;
  PfTools::Convert::matrix ( from, to );
  _dcs->setMat ( to );
}
