
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author(s): Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "OsgTools/Volume/TransferFunction1D.h"

#include "osg/Texture1D"

using namespace OsgTools::Volume;

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

TransferFunction1D::TransferFunction1D () : 
BaseClass (),
_size ( 0 ),
_minimium ( 0 ),
_maximium ( 0 ),
_colors ()
{
  this->_init ();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

TransferFunction1D::TransferFunction1D ( const Colors& colors ) : 
BaseClass (),
_size ( 0 ),
_minimium ( 0 ),
_maximium ( 0 ),
_colors ( colors )
{
  this->_init ();
  _image->setImage( _colors.size(), 1, 1, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, reinterpret_cast < unsigned char * > ( &_colors[0] ), osg::Image::NO_DELETE );
  _image->dirty ();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Initialize.
//
///////////////////////////////////////////////////////////////////////////////

void TransferFunction1D::_init () 
{
  _image = new osg::Image;

  // Create the 1D texture.
  osg::ref_ptr < osg::Texture1D > texture1D ( new osg::Texture1D() );
  texture1D->setImage( _image.get () );

  texture1D->setFilter( osg::Texture::MIN_FILTER, osg::Texture::NEAREST );
  texture1D->setFilter( osg::Texture::MAG_FILTER, osg::Texture::NEAREST );
  texture1D->setWrap  ( osg::Texture::WRAP_S, osg::Texture::CLAMP );
  texture1D->setInternalFormatMode ( osg::Texture::USE_IMAGE_DATA_FORMAT );

  _texture = texture1D.get ();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

TransferFunction1D::~TransferFunction1D ()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the number of dimensions.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int TransferFunction1D::dimensions () const
{
  return 1;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the size.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int TransferFunction1D::size () const
{
  Guard guard ( this->mutex () );
  return _colors.size ();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the size.
//
///////////////////////////////////////////////////////////////////////////////

void TransferFunction1D::size ( unsigned int size )
{
  {
    Guard guard ( this->mutex () );
    _colors.resize ( size );
    _image->setImage( _colors.size(), 1, 1, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, reinterpret_cast < unsigned char * > ( &_colors[0] ), osg::Image::NO_DELETE );
  }
  this->dirty ();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the mininium value.
//
///////////////////////////////////////////////////////////////////////////////

double TransferFunction1D::minimium () const
{
  Guard guard ( this->mutex () );
  return _minimium;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the mininium value.
//
///////////////////////////////////////////////////////////////////////////////

void TransferFunction1D::minimium ( double minimium )
{
  Guard guard ( this->mutex () );
  _minimium = minimium;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the maximium value.
//
///////////////////////////////////////////////////////////////////////////////

double TransferFunction1D::maximium () const
{
  Guard guard ( this->mutex () );
  return _maximium;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the maximium value.
//
///////////////////////////////////////////////////////////////////////////////

void TransferFunction1D::maximium ( double maximium )
{
  Guard guard ( this->mutex () );
  _maximium = maximium;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the colors.
//
///////////////////////////////////////////////////////////////////////////////

void TransferFunction1D::colors ( const Colors& colors )
{
  {
    Guard guard ( this->mutex () );
    _colors = colors;
    _image->setImage( _colors.size(), 1, 1, GL_RGBA, GL_RGBA, GL_UNSIGNED_BYTE, reinterpret_cast < unsigned char * > ( &_colors[0] ), osg::Image::NO_DELETE );
  }
  this->dirty ();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the colors.
//
///////////////////////////////////////////////////////////////////////////////

const TransferFunction1D::Colors& TransferFunction1D::colors ( ) const
{
  Guard guard ( this->mutex () );
  return _colors;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the value.
//
///////////////////////////////////////////////////////////////////////////////

void TransferFunction1D::value ( unsigned int index, const Color& color )
{
  {
    Guard guard ( this->mutex () );
    _colors.at ( index ) = color;
  }
  this->dirty();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the value.
//
///////////////////////////////////////////////////////////////////////////////

const TransferFunction1D::Color& TransferFunction1D::value ( unsigned int index ) const
{
  Guard guard ( this->mutex () );
  return _colors.at ( index );
}
