
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A single vertex primitive.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Primitive.h"

using namespace GSG;

GSG_IMPLEMENT_CLONE ( Primitive );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

Primitive::Primitive() : Referenced(), 
  _nb ( BINDING_UNKNOWN ),
  _cb ( BINDING_UNKNOWN ),
  _vi (),
  _ni (),
  _ci (),
  _type   ( TYPE_UNKNOWN ),
  _format ( INDICES_UNKNOWN )
{
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

Primitive::Primitive ( const Primitive &s ) : Referenced ( s ), 
  _nb ( s._nb ),
  _cb ( s._cb ),
  _vi ( s._vi ),
  _ni ( s._ni ),
  _ci ( s._ci ),
  _type   ( s._type ),
  _format ( s._format )
{
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

Primitive::~Primitive()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the primitive type.
//
/////////////////////////////////////////////////////////////////////////////

void Primitive::type ( Type type )
{
  Lock lock ( this );
  _type = type;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the format of the indices.
//
///////////////////////////////////////////////////////////////////////////////

void Primitive::format ( Format f )
{
  Lock lock ( this );
  _format = f;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the binding.
//
/////////////////////////////////////////////////////////////////////////////

void Primitive::normalBinding ( Binding nb )
{
  Lock lock ( this );
  _nb = nb;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the binding.
//
/////////////////////////////////////////////////////////////////////////////

void Primitive::colorBinding ( Binding cb )
{
  Lock lock ( this );
  _cb = cb;
}
