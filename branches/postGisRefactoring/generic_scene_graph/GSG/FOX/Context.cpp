
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  The FOX OpenGL context class.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/FOX/Precompiled.h"
#include "GSG/FOX/Context.h"

#include <fx.h>
#include <fx3d.h>

using namespace GSG;
using namespace GSG::FOX;


GSG_IMPLEMENT_REFERENCED ( Context );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Context::Context ( FXGLCanvas *canvas ) : GlContext(), 
  _canvas ( canvas )
{
  ErrorChecker ( 0x0 != _canvas );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//  Note: this just copies the pointer to the canvas. Watch out!
//
///////////////////////////////////////////////////////////////////////////////

Context::Context ( const Context &c ) : GlContext ( c ), 
  _canvas ( c._canvas )
{
  ErrorChecker ( 0x0 != _canvas );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Context::~Context()
{
  // Do not delete the canvas. FOX will do that.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set from the given object.
//
/////////////////////////////////////////////////////////////////////////////

void Context::setFrom ( const Context &c )
{
  Lock lock ( this );

  // Set the members.
  _canvas = c._canvas;

  // Call the base class's function.
  BaseClass::setFrom ( c );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Make this class's rendering context the current one.
//
///////////////////////////////////////////////////////////////////////////////

void Context::makeCurrent()
{
  ErrorChecker ( 0x0 != _canvas );

  // If we are already current then just return.
  if ( this->isCurrent() )
    return;

  // Make our canvas the current context.
  ErrorChecker ( TRUE == _canvas->makeCurrent() );

  // Call the base class's function.
  GlContext::makeCurrent();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Swap the buffers.
//
///////////////////////////////////////////////////////////////////////////////

void Context::swapBuffers()
{
  ErrorChecker ( 0x0 != _canvas );

  // Make sure this context is current.
  this->makeCurrent();

  // Tell the canvas to swap buffers.
  _canvas->swapBuffers();
}

