
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  SgCoordinate4.cpp: 4D coordinates.
//
///////////////////////////////////////////////////////////////////////////////

#include "SgPrecompiled.h"
#include "SgCoordinate4.h"

#include "Standard/SlPrint.h"

using namespace CadKit;

SG_IMPLEMENT_DYNAMIC_NODE ( SgCoordinate4, SgCoordinate );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

SgCoordinate4::SgCoordinate4() : SgCoordinate()
{
  SL_PRINT2 ( "SgCoordinate4::SgCoordinate4(), this = %X\n", this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

SgCoordinate4::~SgCoordinate4()
{
  SL_PRINT2 ( "SgCoordinate4::~SgCoordinate4(), this = %X\n", this );
  _points.clear();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Does the given node have the same visible properties?
//
/////////////////////////////////////////////////////////////////////////////

bool SgCoordinate4::isEqualVisibleProperties ( const SgNode &node ) const
{
  SL_ASSERT ( this );

  // Make sure we have the right type.
  if ( false == node.isOfType ( SgCoordinate4::getClassType() ) )
    return false;

  // Typecast.
  SgCoordinate4 &c = (SgCoordinate4 &) node;

  // Are they the same?
  return ( _points.isEqual ( c._points ) && SgCoordinate::isEqualVisibleProperties ( node ) );
}
