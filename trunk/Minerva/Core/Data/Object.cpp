
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Data/Object.h"

#include "Usul/Trace/Trace.h"

using namespace Minerva::Core::Data;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( Object, Object::BaseClass );

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Object::Object() : 
  BaseClass(),
  _id(),
  _targetId(),
  _mutex()
{
  this->_addMember ( "id", _id );
  this->_addMember ( "targetId", _targetId );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Object::~Object()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query Interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown* Object::queryInterface ( unsigned long iid )
{
  USUL_TRACE_SCOPE;
  switch ( iid )
  {
    case Usul::Interfaces::IUnknown::IID:
    case Usul::Interfaces::ISerialize::IID:
      return static_cast < Usul::Interfaces::ISerialize* > ( this );
    default:
      return 0x0;
  };
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the id.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Object::objectId() const
{
  Guard guard ( this->mutex() );
  return _id;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the id.
//
///////////////////////////////////////////////////////////////////////////////

void Object::objectId( const std::string& s )
{
  Guard guard ( this->mutex() );
  _id = s;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the target id.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Object::targetId() const
{
  Guard guard ( this->mutex() );
  return _targetId;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the target id.
//
///////////////////////////////////////////////////////////////////////////////

void Object::targetId( const std::string& s )
{
  Guard guard ( this->mutex() );
  _targetId = s;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the mutex.
//
///////////////////////////////////////////////////////////////////////////////

Object::Mutex& Object::mutex() const
{
  return _mutex;
}
