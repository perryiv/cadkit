
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Layers/Kml/NetworkLink.h"

#include "XmlTree/Node.h"

#include "Usul/Strings/Case.h"

using namespace Minerva::Layers::Kml;

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

NetworkLink::NetworkLink() : BaseClass(),
  _link ( 0x0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

NetworkLink::NetworkLink( const XmlTree::Node& node ) : BaseClass( node ),
  _link ( 0x0 )
{
  typedef XmlTree::Node::Children    Children;
  
  // Loop over the children.
  Children children ( node.children() );
  for ( Children::iterator iter = children.begin(); iter != children.end(); ++iter )
  {
    XmlTree::Node::RefPtr node ( *iter );
    std::string name ( Usul::Strings::lowerCase ( node->name() ) );
    
    if ( "link" == name || "url" == name ) // Url is an older name, but many elements are the same.
    {
      _link = new Link ( *node );
    }
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

NetworkLink::~NetworkLink()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the link.
//
///////////////////////////////////////////////////////////////////////////////

Link* NetworkLink::link() const
{
  return _link.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the link.
//
///////////////////////////////////////////////////////////////////////////////

void NetworkLink::link( Link* link )
{
  _link = link;
}
