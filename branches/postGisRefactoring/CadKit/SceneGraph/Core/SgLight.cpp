
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  SgLight.cpp: Abstract light class.
//
/////////////////////////////////////////////////////////////////////////////

#include "SgPrecompiled.h"
#include "SgLight.h"

#include "Standard/SlPrint.h"

using namespace CadKit;

SG_IMPLEMENT_NODE ( SgLight, SgNode );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgLight::SgLight() : SgNode(),
  _ambient  ( 1.0f, 1.0f, 1.0f, 1.0f ),
  _diffuse  ( 1.0f, 1.0f, 1.0f, 1.0f ),
  _specular ( 1.0f, 1.0f, 1.0f, 1.0f )
{
  SL_PRINT2 ( "SgLight::SgLight(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgLight::SgLight ( const SgLight &light ) : SgNode ( light ),
  _ambient  ( light._ambient ),
  _diffuse  ( light._diffuse ),
  _specular ( light._specular )
{
  SL_PRINT2 ( "SgLight::SgLight(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

SgLight::~SgLight()
{
  SL_PRINT2 ( "SgLight::~SgLight(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the light's value.
//
/////////////////////////////////////////////////////////////////////////////

void SgLight::setValue ( const SgLight &light )
{
  _ambient.setValue ( light._ambient );
  _diffuse.setValue ( light._diffuse );
  _specular.setValue ( light._specular );

  // Call the base class's function.
  SgNode::setValue ( light );
}
