
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Returns true if the text is equal.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Conditions/HasEqualText.h"
#include "AppFrameWork/Windows/Window.h"

using namespace AFW::Conditions;

USUL_IMPLEMENT_TYPE_ID ( HasEqualText );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

HasEqualText::HasEqualText ( const std::string &text, bool want ) : BaseClass ( want ), _text ( text )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

HasEqualText::~HasEqualText()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Returns true if there is an active editor.
//
///////////////////////////////////////////////////////////////////////////////

bool HasEqualText::evaluate ( AFW::Core::Object *obj )
{
  Guard guard ( this->mutex() );
  if ( 0x0 == obj )
    return false;
  AFW::Windows::Window::RefPtr window ( dynamic_cast < AFW::Windows::Window * > ( obj ) );
  if ( false == window.valid() )
    return false;
  return ( ( _text == window->textGet() ) == _want );
}
