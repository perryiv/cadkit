
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all groups.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Core/Group.h"

using namespace AFW::Core;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Group::Group ( const std::string &text, Icon *icon ) : BaseClass ( text, icon ),
  _windows()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Group::~Group()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Append the window.
//
///////////////////////////////////////////////////////////////////////////////

void Group::append ( Window *w )
{
  _windows.push_back ( w );
  this->dirty ( true );
  w->dirty ( true );
  w->_setParent ( this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the contained windows.
//
///////////////////////////////////////////////////////////////////////////////

Group::Itr Group::begin()
{
  return _windows.begin();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the contained windows.
//
///////////////////////////////////////////////////////////////////////////////

Group::ConstItr Group::begin() const
{
  return _windows.begin();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the contained windows.
//
///////////////////////////////////////////////////////////////////////////////

Group::Itr Group::end()
{
  return _windows.end();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the contained windows.
//
///////////////////////////////////////////////////////////////////////////////

Group::ConstItr Group::end() const
{
  return _windows.end();
}
