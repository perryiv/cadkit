
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Perry Miller
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

#include "Reader.h"

#include "osg/ref_ptr"
#include "osg/Node"
#include "osgDB/ReadFile"
#include "osgDB/FileNameUtils"


namespace CadKit {
namespace OSG {
namespace Glue {


///////////////////////////////////////////////////////////////////////////////
//
//  Typedefs.
//
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Reader::Reader() : _node ( 0x0 ), _progress ( 0x0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Reader::~Reader()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Read the file.
//
///////////////////////////////////////////////////////////////////////////////

void Reader::read ( const std::string &file )
{
  osg::ref_ptr<osgDB::ReaderWriter> reader ( this->_findReader ( file ) );
  this->_read ( file, *reader );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Find the appropriate reader.
//
///////////////////////////////////////////////////////////////////////////////

osgDB::ReaderWriter *Reader::_findReader ( const std::string &file )
{
  // Get file extension.
  const std::string ext ( osgDB::getLowerCaseFileExtension ( file ) );
  osg::ref_ptr<osgDB::ReaderWriter> reader ( osgDB::Registry::instance()->getReaderWriterForExtension ( ext ) );

  if ( false == reader.valid() )
    throw std::runtime_error ( std::string ( "Error 1010869612: Could not find reader for file: " ) + file );

  return reader.release();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Read the file.
//
///////////////////////////////////////////////////////////////////////////////

void Reader::_read ( const std::string &file, osgDB::ReaderWriter &reader )
{
  // Open the stream.
  Usul::File::StreamBuffer buf ( file );

  // Make the callback.
  Reader::Callback callback ( *this );
  buf.callback ( &callback );

  // Read the file.
  this->_read ( buf, reader );

  if ( false == _node.valid() )
    throw std::runtime_error ( std::string ( "Error 1723158504: Failed to read file: " ) + file );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Read the file.
//
///////////////////////////////////////////////////////////////////////////////

void Reader::_read ( Usul::File::StreamBuffer::BaseClass &buf, osgDB::ReaderWriter &reader )
{
  // Read the file.
  std::istream in ( &buf );
  osgDB::ReaderWriter::ReadResult result = reader.readNode ( in );
  _node = result.getNode();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Called during file-reading progress.
//
///////////////////////////////////////////////////////////////////////////////

void Reader::_notifyProgress()
{
  if ( 0x0 != _progress )
    _progress();
}


}
}
}
