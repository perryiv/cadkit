
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2005, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////


#include "MOVWriterComponent.h"

#include "Usul/Strings/Case.h"
#include "Usul/File/Path.h"

#include "MOVWriter.h"


USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( MOVWriterComponent, MOVWriterComponent::BaseClass );

///////////////////////////////////////////////////////////////////////////////
//
// Constructor
//
///////////////////////////////////////////////////////////////////////////////

MOVWriterComponent::MOVWriterComponent() 
{
}

///////////////////////////////////////////////////////////////////////////////
//
// Destructor
//
///////////////////////////////////////////////////////////////////////////////

MOVWriterComponent::~MOVWriterComponent() 
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *MOVWriterComponent::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::IWriteMovieFile::IID:
    return static_cast < Usul::Interfaces::IWriteMovieFile*>(this);
  case Usul::Interfaces::IPlugin::IID:
    return static_cast < Usul::Interfaces::IPlugin* > ( this );
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
// Usul/Interfaces/IPlugin.h implementation
//
///////////////////////////////////////////////////////////////////////////////

std::string MOVWriterComponent::getPluginName() const 
{
  return "MOV Writer";
}


///////////////////////////////////////////////////////////////////////////////
//
//  Filters that the component can write.
//
///////////////////////////////////////////////////////////////////////////////

MOVWriterComponent::Filters MOVWriterComponent::filtersWrite() const
{
  Filters filters;
  filters.push_back( Filter ( "QuickTime (*.mov)", "*.mov" ) );
  return filters;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Can this extension be written?
//
///////////////////////////////////////////////////////////////////////////////

bool MOVWriterComponent::canWrite   ( const std::string &filename ) const
{
  const std::string ext ( Usul::Strings::lowerCase ( Usul::File::extension ( filename ) ) );

  return ( "mov" == ext );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Write the movie file.
//
///////////////////////////////////////////////////////////////////////////////

void MOVWriterComponent::writeMovie ( const Filename& filename, const Filenames& filenames )
{
  const std::string ext ( Usul::Strings::lowerCase ( Usul::File::extension ( filename ) ) );

  if( "mov" == ext )
  {
    MOVWriter writer ( filename, filenames );
    writer();
  }
}
