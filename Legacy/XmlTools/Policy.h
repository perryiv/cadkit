
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Policy classes. They also serve as an example for creating others.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _XML_TOOLS_POLICY_H_
#define _XML_TOOLS_POLICY_H_


namespace XML {


///////////////////////////////////////////////////////////////////////////////
//
//  Empty error policy.
//
///////////////////////////////////////////////////////////////////////////////

struct NoErrorChecking
{
  NoErrorChecking ( unsigned int, bool ){}
};


///////////////////////////////////////////////////////////////////////////////
//
//  Callback policy for functions that take only a name.
//
///////////////////////////////////////////////////////////////////////////////

struct NameCB
{
  template < class R, class F > static void call ( R &r, F &f )
  {
    f ( r.name() );
  }
};


///////////////////////////////////////////////////////////////////////////////
//
//  Callback policy for functions that take only a value.
//
///////////////////////////////////////////////////////////////////////////////

struct ValueCB
{
  template < class R, class F > static void call ( R &r, F &f )
  {
    f ( r.value() );
  }
};


///////////////////////////////////////////////////////////////////////////////
//
//  Callback policy for functions that take a name and value.
//
///////////////////////////////////////////////////////////////////////////////

struct NameValueCB
{
  template < class R, class F > static void call ( R &r, F &f )
  {
    f ( r.name(), r.value() );
  }
};


}; // namespace XML


#endif // _XML_TOOLS_POLICY_H_
