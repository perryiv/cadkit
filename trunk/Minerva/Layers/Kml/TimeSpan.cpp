
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Layers/Kml/TimeSpan.h"

#include "XmlTree/Node.h"

using namespace Minerva::Layers::Kml;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

TimeSpan::TimeSpan() : BaseClass(),
  _begin ( boost::date_time::min_date_time ),
  _end ( boost::date_time::max_date_time )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

TimeSpan::TimeSpan ( const XmlTree::Node &node ) : BaseClass ( node ),
  _begin ( boost::date_time::min_date_time ),
  _end ( boost::date_time::max_date_time )
{
  typedef XmlTree::Node::Children Children;
  
  Children children ( node.children() );
  for ( Children::iterator iter = children.begin(); iter != children.end(); ++iter )
  {
    XmlTree::Node::RefPtr node ( *iter );
    std::string name ( node->name() );
    
    if ( "begin" == name )
    {
      _begin = TimeSpan::parse ( node->value() );
    }
    else if ( "end" == name )
    {
      _end = TimeSpan::parse ( node->value() );
    }
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

TimeSpan::~TimePrimitive()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Begin date.
//
///////////////////////////////////////////////////////////////////////////////

TimeSpan::Date TimeSpan::begin() const
{
  return _begin;
}


///////////////////////////////////////////////////////////////////////////////
//
//  End date.
//
///////////////////////////////////////////////////////////////////////////////

TimeSpan::Date TimeSpan::end() const
{
  return _end;
}
