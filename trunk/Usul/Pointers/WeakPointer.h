
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Smart-pointer that registers itself as a delete-listener of the object.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _USUL_WEAK_POINTER_CLASS_H_
#define _USUL_WEAK_POINTER_CLASS_H_

#include "Usul/Errors/Assert.h"


namespace Usul {
namespace Pointers {


///////////////////////////////////////////////////////////////////////////////
//
//  Base class for delete-listener.
//
///////////////////////////////////////////////////////////////////////////////

struct DeleteListener
{
  virtual void objectDeleted() = 0;

protected:

  // Make gcc happy.
  virtual ~DeleteListener(){}
};


///////////////////////////////////////////////////////////////////////////////
//
//  Base class for delete-listener.
//
///////////////////////////////////////////////////////////////////////////////


template < class T > class WeakPointer : public DeleteListener
{
public:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Typedefs.
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef WeakPointer < T > ThisType;


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Default constructor. Needed for containers.
  //
  /////////////////////////////////////////////////////////////////////////////

  WeakPointer() : _p ( 0x0 )
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  WeakPointer ( T *t ) : _p ( t )
  {
    this->_addSelfAsDeleteListener();
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Copy constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  WeakPointer ( const ThisType &p ) : _p ( p.get() )
  {
    this->_addSelfAsDeleteListener();
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Destructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  ~WeakPointer()
  {
    this->_removeSelfAsDeleteListener();
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Assignment.
  //
  /////////////////////////////////////////////////////////////////////////////

  ThisType &operator = ( T *p )
  {
    this->_set ( p );
    return *this;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Assignment.
  //
  /////////////////////////////////////////////////////////////////////////////

  ThisType &operator = ( const ThisType &p )
  {
    this->_set ( p.get() );
    return *this;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Notify the listener that the object has been deleted.
  //
  /////////////////////////////////////////////////////////////////////////////

  void objectDeleted()
  {
    // Should be true.
    USUL_ASSERT ( 0x0 != _p );

    // Set object to null.
    _p = 0x0;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get internal pointer.
  //
  /////////////////////////////////////////////////////////////////////////////

  T *get() const
  {
    return _p;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Is the internal pointer valid?
  //
  /////////////////////////////////////////////////////////////////////////////

  bool valid() const
  {
    return ( 0x0 != _p );
  }

private:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Add this class as a delete-listener.
  //
  /////////////////////////////////////////////////////////////////////////////

  void _addSelfAsDeleteListener()
  {
    if ( 0x0 != _p )
    {
      _p->addDeleteListener ( this );
    }
  }

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Remove this class as a delete-listener.
  //
  /////////////////////////////////////////////////////////////////////////////

  void _removeSelfAsDeleteListener()
  {
    if ( 0x0 != _p )
    {
      _p->removeDeleteListener ( this );
    }
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set internal pointer.
  //
  /////////////////////////////////////////////////////////////////////////////

  void _set ( T *p )
  {
    if ( p != _p )
    {
      this->_removeSelfAsDeleteListener();
      _p = p;
      this->_addSelfAsDeleteListener();
    }
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Data members.
  //
  /////////////////////////////////////////////////////////////////////////////

  T *_p;
};


} // namespace Pointers
} // namespace Usul


#endif // _USUL_WEAK_POINTER_CLASS_H_
