
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Functors/GradientColorFunctor.h"

#include "OsgTools/Legend/GradientIcon.h"

#include "Usul/Factory/RegisterCreator.h"

#include <iostream>

using namespace Minerva::Core::Functors;

USUL_IO_TEXT_DEFINE_WRITER_TYPE_VECTOR_4 ( osg::Vec4d );
USUL_IO_TEXT_DEFINE_READER_TYPE_VECTOR_4 ( osg::Vec4d );
SERIALIZE_XML_DECLARE_VECTOR_4_WRAPPER ( osg::Vec4d );
USUL_FACTORY_REGISTER_CREATOR ( GradientColorFunctor );

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

GradientColorFunctor::GradientColorFunctor() : BaseClass(),
_minColor(),
_maxColor(),
_minValue ( 0.0 ),
_maxValue ( 0.0 )
{
  SERIALIZE_XML_ADD_MEMBER ( _minColor );
  SERIALIZE_XML_ADD_MEMBER ( _maxColor );
  SERIALIZE_XML_ADD_MEMBER ( _minValue );
  SERIALIZE_XML_ADD_MEMBER ( _maxValue );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

GradientColorFunctor::~GradientColorFunctor()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Clone.
//
///////////////////////////////////////////////////////////////////////////////

BaseColorFunctor* GradientColorFunctor::clone() const
{
  GradientColorFunctor::RefPtr copy ( new GradientColorFunctor );
  copy->_minColor = this->_minColor;
  copy->_maxColor = this->_maxColor;
  copy->_minValue = this->_minValue;
  copy->_maxValue = this->_maxValue;

  return copy.release();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the min color.
//
///////////////////////////////////////////////////////////////////////////////


void GradientColorFunctor::minColor( const osg::Vec4d& color )
{
  _minColor = color;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the min color.
//
///////////////////////////////////////////////////////////////////////////////

const osg::Vec4d& GradientColorFunctor::minColor () const
{
  return _minColor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the max color.
//
///////////////////////////////////////////////////////////////////////////////

void GradientColorFunctor::maxColor( const osg::Vec4d& color )
{
  _maxColor = color;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the max color.
//
///////////////////////////////////////////////////////////////////////////////

const osg::Vec4d& GradientColorFunctor::maxColor () const
{
  return _maxColor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the min value.
//
///////////////////////////////////////////////////////////////////////////////

void GradientColorFunctor::minValue ( double minValue )
{
  _minValue = minValue;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the min value.
//
///////////////////////////////////////////////////////////////////////////////

double GradientColorFunctor::minValue () const
{
  return _minValue;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the max value.
//
///////////////////////////////////////////////////////////////////////////////

void GradientColorFunctor::maxValue ( double maxValue )
{
  _maxValue = maxValue;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the max value.
//
///////////////////////////////////////////////////////////////////////////////

double GradientColorFunctor::maxValue () const
{
  return _maxValue;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color.
//
///////////////////////////////////////////////////////////////////////////////

osg::Vec4 GradientColorFunctor::operator() ( double value ) const
{
  osg::Vec4 color ( 0.0, 0.0, 0.0, 1.0 );
  
  const osg::Vec4::value_type denom ( _maxValue - _minValue );

  if ( 0x0 != denom )
  {
    const osg::Vec4::value_type param ( static_cast < osg::Vec4::value_type > ( ( value - _minValue ) / denom ) );

    color.x() = _minColor.x() + ( param * (  _maxColor.x() - _minColor.x() ) );
    color.y() = _minColor.y() + ( param * (  _maxColor.y() - _minColor.y() ) );
    color.z() = _minColor.z() + ( param * (  _maxColor.z() - _minColor.z() ) );
  }
  return color;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the icon.
//
///////////////////////////////////////////////////////////////////////////////

OsgTools::Legend::Item * GradientColorFunctor::icon ( Usul::Interfaces::IUnknown *caller )
{
  OsgTools::Legend::GradientIcon::RefPtr icon ( new OsgTools::Legend::GradientIcon );
  icon->minColor( _minColor );
  icon->maxColor( _maxColor );

  return icon.release();
}
