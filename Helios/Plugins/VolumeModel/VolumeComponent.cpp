
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2005, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  The component class.
//
///////////////////////////////////////////////////////////////////////////////

#include "VolumeComponent.h"
#include "VolumeDocument.h"

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( VolumeComponent , VolumeComponent::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

VolumeComponent::VolumeComponent() : BaseClass()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

VolumeComponent::~VolumeComponent()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *VolumeComponent::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::IDocumentCreate::IID:
    return static_cast < Usul::Interfaces::IDocumentCreate*>(this);
  case Usul::Interfaces::IPlugin::IID:
    return static_cast < Usul::Interfaces::IPlugin*>(this);
  case Usul::Interfaces::INewDocumentCreate::IID:
    return static_cast < Usul::Interfaces::INewDocumentCreate* > ( this );
  default:
    return 0x0;
  }
}


/////////////////////////////////////////////////////////////////////////////
//
//  Create document.
//
/////////////////////////////////////////////////////////////////////////////

Usul::Documents::Document *VolumeComponent::createDocument ( Unknown *caller )
{
  VolumeDocument::ValidRefPtr document ( new VolumeDocument );
  return document.release();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get name of Document that is created
//
/////////////////////////////////////////////////////////////////////////////

std::string VolumeComponent::documentTypeName()
{
  VolumeDocument::ValidRefPtr document ( new VolumeDocument );
  return document->typeName();
}
