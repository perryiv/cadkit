
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2009, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Data/Camera.h"
#include "Minerva/Core/TileEngine/LandModel.h"

using namespace Minerva::Core::Data;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Camera::Camera() : BaseClass(),
  _longitude ( 0.0 ),
  _latitude ( 0.0 ),
  _altitude ( 0.0 ),
  _heading ( 0.0 ),
  _tilt ( 0.0 ),
  _roll ( 0.0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Camera::~Camera()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the longitude.
//
///////////////////////////////////////////////////////////////////////////////

void Camera::longitude ( double lon )
{
  Guard guard ( this );
  _longitude = lon;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the longitude.
//
///////////////////////////////////////////////////////////////////////////////

double Camera::longitude() const
{
  Guard guard ( this );
  return _longitude;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the latitude.
//
///////////////////////////////////////////////////////////////////////////////

void Camera::latitude ( double lat )
{
  Guard guard ( this );
  _latitude = lat;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the latitude.
//
///////////////////////////////////////////////////////////////////////////////

double Camera::latitude() const
{
  Guard guard ( this );
  return _latitude;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the altitude.
//
///////////////////////////////////////////////////////////////////////////////

void Camera::altitude ( double altitude )
{
  Guard guard ( this );
  _altitude = altitude;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the altitude.
//
///////////////////////////////////////////////////////////////////////////////

double Camera::altitude() const
{
  Guard guard ( this );
  return _altitude;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the heading.
//
///////////////////////////////////////////////////////////////////////////////

void Camera::heading ( double heading )
{
  Guard guard ( this );
  _heading = heading;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the heading.
//
///////////////////////////////////////////////////////////////////////////////

double Camera::heading() const
{
  Guard guard ( this );
  return _heading;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the tilt.
//
///////////////////////////////////////////////////////////////////////////////

void Camera::tilt ( double tilt )
{
  Guard guard ( this );
  _tilt = tilt;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the tilt.
//
///////////////////////////////////////////////////////////////////////////////

double Camera::tilt() const
{
  Guard guard ( this );
  return _tilt;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the roll.
//
///////////////////////////////////////////////////////////////////////////////

void Camera::roll ( double roll )
{
  Guard guard ( this );
  _roll = roll;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the roll.
//
///////////////////////////////////////////////////////////////////////////////

double Camera::roll() const
{
  Guard guard ( this );
  return _roll;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the view matrix.
//
///////////////////////////////////////////////////////////////////////////////

Camera::Matrix Camera::viewMatrix ( Minerva::Core::TileEngine::LandModel* landModel ) const
{
  if ( 0x0 == landModel )
    return Matrix();

  Matrix rotation ( landModel->planetRotationMatrix ( this->latitude(), this->longitude(), this->altitude(), this->heading() ) );

  Usul::Math::Vec3d translation;
  rotation.getTranslation ( translation );
  rotation.setTranslation ( Usul::Math::Vec3d ( 0.0, 0.0, 0.0 ) );

  Matrix pitchMatrix, rollMatrix;
  pitchMatrix.makeRotation ( this->tilt(), Usul::Math::Vec3d ( 1.0, 0.0, 0.0 ) );
  rollMatrix.makeRotation ( this->roll(), Usul::Math::Vec3d ( 0.0, 0.0, 1.0 ) );
  
  Matrix answer ( rotation * pitchMatrix * rollMatrix );
  answer.setTranslation ( translation );

  return answer;
}
