
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Layers/Layer.h"

#include "Usul/Functions/Guid.h"
#include "Usul/Functions/ToString.h"
#include "Usul/Interfaces/IGeometryCenter.h"

#include "osg/Group"
#include "osg/MatrixTransform"

#include "Serialize/XML/RegisterCreator.h"

#include <algorithm>
#include <functional>
#include <iostream>

using namespace Minerva::Core::Layers;

SERIALIZE_XML_DECLARE_VECTOR_4_WRAPPER ( osg::Vec4 );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Layer::Layer() : BaseClass(),
_mutex(),
_guid ( Usul::Functions::generateGUID() ),
_name( "Layer" ),
_primaryKeyColumn( "id" ),
_tablename(),
_labelColumn(),
_query(),
_renderBin ( 0 ),
_zOffset ( 0.0 ),
_dataObjects(),
_connection(),
_colorFunctor( 0x0 ),
_legendObject ( new LegendObject ),
_legendText( "" ),
_showLabel ( false ),
_shown ( true ),
_labelColor( 0.0, 0.0, 0.0, 1.0 ),
_labelZOffset( 1000.0 ),
_labelSize ( 25.0f ),
_colorColumn(),
_customQuery ( false ),
_showCountLegend ( false ),
SERIALIZE_XML_INITIALIZER_LIST
{
  this->_registerMembers();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Layer::Layer( const Layer& layer )  : BaseClass(),
_mutex(),
_guid ( layer._guid ),
_name( layer._name ),
_primaryKeyColumn( layer._primaryKeyColumn ),
_tablename( layer._tablename ),
_labelColumn( layer._labelColumn ),
_query( layer._query ),
_renderBin ( layer._renderBin ),
_zOffset ( layer._zOffset ),
_dataObjects( layer._dataObjects ),
_connection( layer._connection ),
_colorFunctor( 0x0 ),
_legendObject ( new OsgTools::Legend::LegendObject ),
_legendText( layer._legendText ),
_showLabel ( layer._showLabel ),
_shown ( layer._shown ),
_labelColor( layer._labelColor ),
_labelZOffset( layer._labelZOffset ),
_labelSize ( layer._labelSize ),
_colorColumn( layer._colorColumn ),
_customQuery( layer._customQuery ),
_showCountLegend ( layer._showCountLegend )
{
  if( layer._colorFunctor.valid() )
    _colorFunctor = layer._colorFunctor->clone();

  this->_registerMembers();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Register members.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::_registerMembers()
{
  SERIALIZE_XML_ADD_MEMBER ( _guid );
  SERIALIZE_XML_ADD_MEMBER ( _name );
  SERIALIZE_XML_ADD_MEMBER ( _primaryKeyColumn );
  SERIALIZE_XML_ADD_MEMBER ( _tablename );
  SERIALIZE_XML_ADD_MEMBER ( _labelColumn );
  SERIALIZE_XML_ADD_MEMBER ( _query );
  SERIALIZE_XML_ADD_MEMBER ( _renderBin );
  SERIALIZE_XML_ADD_MEMBER ( _zOffset );
  //DataObjects _dataObjects;
  SERIALIZE_XML_ADD_MEMBER ( _connection );
  SERIALIZE_XML_ADD_MEMBER ( _colorFunctor );
  //LegendObject::RefPtr   _legendObject;
  SERIALIZE_XML_ADD_MEMBER ( _legendText );
  SERIALIZE_XML_ADD_MEMBER ( _showLabel );
  SERIALIZE_XML_ADD_MEMBER ( _shown );
  SERIALIZE_XML_ADD_MEMBER ( _labelColor );
  SERIALIZE_XML_ADD_MEMBER ( _labelZOffset );
  SERIALIZE_XML_ADD_MEMBER ( _labelSize );
  SERIALIZE_XML_ADD_MEMBER ( _colorColumn );
  SERIALIZE_XML_ADD_MEMBER ( _customQuery );
  SERIALIZE_XML_ADD_MEMBER ( _showCountLegend );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Layer::~Layer()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the connection.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::connection ( Minerva::Core::DB::Connection *connection )
{
  Guard guard( _mutex );
  _connection = connection;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the connection.
//
///////////////////////////////////////////////////////////////////////////////

Minerva::Core::DB::Connection* Layer::connection ()
{
  Guard guard( _mutex );
  return _connection;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the tablename.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::tablename( const std::string& table )
{
  Guard guard( _mutex );
  _tablename = table;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the tablename.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::tablename() const
{
  return _tablename;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label column.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::labelColumn( const std::string& column )
{
  Guard guard( _mutex );
  _labelColumn = column;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the label column.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::labelColumn() const
{
  return _labelColumn;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the render bin.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::renderBin( Usul::Types::Uint32 bin )
{
  Guard guard( _mutex );
  _renderBin = bin;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the render bin.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Types::Uint32 Layer::renderBin( ) const
{
  return _renderBin;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build the scene.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::buildScene( osg::Group* parent )
{
  Guard guard( _mutex );
  //std::for_each( _dataObjects.begin(), _dataObjects.end(), std::mem_fun( &DataObject::buildScene) );

  for( DataObjects::iterator iter = _dataObjects.begin(); iter != _dataObjects.end(); ++iter )
  {
    parent->addChild( (*iter)->buildScene() );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the query for data.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::query ( const std::string& query )
{
  Guard guard( _mutex );
  _query = query;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the query for data.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::query ( ) const
{
  return _query;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add a data object.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::_addDataObject ( Minerva::Core::DataObjects::DataObject *dataObject )
{
  _dataObjects.push_back( dataObject );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Clear all the data objects.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::_clearDataObjects ()
{
  _dataObjects.clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get all the data objects.
//
///////////////////////////////////////////////////////////////////////////////

Layer::DataObjects& Layer::_getDataObjects()
{
  return _dataObjects;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Does this layer contain temporal data?
//
///////////////////////////////////////////////////////////////////////////////

bool Layer::isTemporal() const
{
  return false;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color functor.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::colorFunctor( Minerva::Core::Functors::BaseColorFunctor *colorFunctor )
{
  _colorFunctor = colorFunctor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color functor.
//
///////////////////////////////////////////////////////////////////////////////

Minerva::Core::Functors::BaseColorFunctor * Layer::colorFunctor()
{
  return _colorFunctor.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color functor.
//
///////////////////////////////////////////////////////////////////////////////

const Minerva::Core::Functors::BaseColorFunctor * Layer::colorFunctor() const
{
  return _colorFunctor.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the z offset.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::zOffset( float f )
{
  _zOffset = f;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the z offset.
//
///////////////////////////////////////////////////////////////////////////////

float Layer::zOffset( ) const
{
  return _zOffset;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the legend object.
//
///////////////////////////////////////////////////////////////////////////////

OsgTools::Legend::LegendObject* Layer::legendObject()
{
  if( 0x0 == _legendObject.get() )
    _legendObject = new OsgTools::Legend::LegendObject;
  return _legendObject.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the legend text.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::legendText( const std::string& text )
{
  _legendText = text;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the legend text.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::legendText() const
{
  return _legendText;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the show label.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::showLabel( bool b )
{
  _showLabel = b;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the show label.
//
///////////////////////////////////////////////////////////////////////////////

bool Layer::showLabel() const
{
  return _showLabel;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the show label.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::showLayer( bool b )
{
  _shown = b;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the show label.
//
///////////////////////////////////////////////////////////////////////////////

bool Layer::showLayer() const
{
  return _shown;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label color.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::labelColor( const osg::Vec4& color )
{
  _labelColor = color;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the label color.
//
///////////////////////////////////////////////////////////////////////////////

const osg::Vec4& Layer::labelColor() const
{
  return _labelColor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label z offset.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::labelZOffset( float offset )
{
  _labelZOffset = offset;
}


///////////////////////////////////////////////////////////////////////////////
//
// Get the label z offset.
//
///////////////////////////////////////////////////////////////////////////////

float Layer::labelZOffset() const
{
  return _labelZOffset;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color column.
//
///////////////////////////////////////////////////////////////////////////////

void  Layer::colorColumn( const std::string& column )
{
  _colorColumn = column;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color column.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::colorColumn() const
{
  return _colorColumn;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color.
//
///////////////////////////////////////////////////////////////////////////////

osg::Vec4 Layer::_color ( const pqxx::result::const_iterator& iter )
{
  osg::Vec4 color( 0.0, 0.0, 0.0, 1.0 );

  try
  {
    if( !this->colorColumn().empty() )
    {
      std::string column ( this->colorColumn() );
      double fieldValue = iter[ column.c_str() ].as < double > ();
      color = (*this->colorFunctor())(fieldValue);
    }
    else
    {
      color = (*this->colorFunctor())( 0.0 );
    }
  }
  catch ( const std::exception& e )
  {
    std::cout << "Error 2909352868: " << e.what() << std::endl;
  }

  return color;
}


///////////////////////////////////////////////////////////////////////////////
//
// Get the number of data objects in this layer.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int Layer::number() const
{
  return _dataObjects.size();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Label the data object.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::_labelDataObject ( Minerva::Core::DataObjects::DataObject* dataObject )
{
  // If we have a column to use for a label.
  if( this->showLabel() && !this->labelColumn().empty() )
  {
    std::string value ( this->connection()->getColumnDataString( dataObject->tableName(), dataObject->rowId(), this->labelColumn() ) );

    dataObject->label( value );
    dataObject->labelColor( this->labelColor() );

    Usul::Interfaces::IGeometryCenter::QueryPtr geometryCenter ( dataObject->geometry() );
    if( geometryCenter.valid() )
    {
      osg::Vec3 center ( geometryCenter->geometryCenter( osg::Vec3f ( 0.0, 0.0, this->labelZOffset() ) ) );
      dataObject->labelPosition( center );
    }

    dataObject->labelSize( _labelSize );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label size.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::labelSize( float size )
{
  _labelSize = size;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the label size.
//
///////////////////////////////////////////////////////////////////////////////

float Layer::labelSize() const
{
  return _labelSize;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the name.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::name( const std::string& name )
{
  _name = name;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the name.
//
///////////////////////////////////////////////////////////////////////////////

const std::string&  Layer::name() const
{
  return _name;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the default query.
//
///////////////////////////////////////////////////////////////////////////////

std::string Layer::defaultQuery() const
{
  // Get the geometry colomn.
  const std::string geomColumn ( this->geometryColumn() );

  // Build the query.
  std::ostringstream query;
  query << "SELECT " << this->primaryKeyColumn() << " as id, srid(" << geomColumn << ") as srid, asBinary(" << geomColumn << ") as geom";
  if ( this->colorColumn().size() > 0 )
  {
    query << ", " << this->colorColumn();
  }
  
  query << " FROM " << this->tablename( );
  return query.str();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the primary key column.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::primaryKeyColumn( const std::string& value )
{
  _primaryKeyColumn = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the primary key column.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::primaryKeyColumn() const
{
  return _primaryKeyColumn;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the geometry column name.
//
///////////////////////////////////////////////////////////////////////////////

std::string Layer::geometryColumn() const
{
  return "geom";
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the custom query flag.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::customQuery( bool value )
{
  _customQuery = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the custom query flag.
//
///////////////////////////////////////////////////////////////////////////////

bool Layer::customQuery() const
{
  return _customQuery;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the guid.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::guid() const
{
  return _guid;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set show count in legend.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::showCountLegend( bool b )
{
  _showCountLegend = b;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get show count in legend.
//
///////////////////////////////////////////////////////////////////////////////

bool Layer::showCountLegend() const
{
  return _showCountLegend;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Update legend object.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::_updateLegendObject()
{
  try
  {
    if( 0x0 != this->colorFunctor() )
      this->legendObject()->icon ( this->colorFunctor()->icon() );

    // One columns for the text
    this->legendObject()->columns ( 1 );
    this->legendObject()->at ( 0 )->text ( this->legendText() );
    

    if( this->showCountLegend() )
    {
      this->legendObject()->columns ( this->legendObject()->columns() + 1 );
      this->legendObject()->at ( 1 )->text ( Usul::Functions::toString( this->number() ) );
      this->legendObject()->percentage( 1 ) = 0.20;
    }

    this->legendObject()->percentage( 0 ) = 0.80;
  }
  catch ( const std::exception& e )
  {
    std::cout << "Error 3665976713: " << e.what() << std::endl;
  }
  catch ( ... )
  {
    std::cout << "Error 4254986090: Unknown exception caught." << std::endl;
  }
}
