
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Recursive mutex class.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Threads/RecursiveMutex.h"
#include "Usul/Errors/Assert.h"
#include "Usul/Strings/Format.h"
#include "Usul/Threads/Mutex.h"
#include "Usul/Threads/Guard.h"

#include <iostream>

using namespace Usul::Threads;


///////////////////////////////////////////////////////////////////////////////
//
//  Useful typedefs.
//
///////////////////////////////////////////////////////////////////////////////

typedef Usul::Threads::Guard < Usul::Threads::Mutex > MutexGuard;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

RecursiveMutex::RecursiveMutex() :
  _mutex ( Usul::Threads::Mutex::create() ),
  _local ( Usul::Threads::Mutex::create() ),
  _count ( 0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

RecursiveMutex::~RecursiveMutex()
{
  if ( 0 != _count )
  {
    std::cout << Usul::Strings::format ( "Error 2732635427: deleting RecursiveMutex ", this, " with lock count ", _count, '\n' );
    std::cout << std::flush;
    USUL_ASSERT ( false );
  }
  delete _local;
  delete _mutex;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Lock the mutex.
//
///////////////////////////////////////////////////////////////////////////////

void RecursiveMutex::lock()
{
  // One thread at a time in this function.
  MutexGuard guard ( *_local );

  // Lock mutex if we should.
  if ( 0 == _count )
    _mutex->lock();

  // Increment the count.
  ++_count;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Unlock the mutex.
//
///////////////////////////////////////////////////////////////////////////////

void RecursiveMutex::unlock()
{
  // One thread at a time in this function.
  MutexGuard guard ( *_local );

  // Decrement the count.
  --_count;

  // Unlock mutex if we should.
  if ( 0 == _count )
    _mutex->unlock();
}
