
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "StarSystem/RasterLayer.h"

#include "Usul/Functions/GUID.h"

#include "osg/Image"

using namespace StarSystem;


/////////////////////////////////////////////////////////////////////////////
//
//  Declare serialization wrappers.
//
/////////////////////////////////////////////////////////////////////////////

USUL_IO_TEXT_DEFINE_READER_TYPE_VECTOR_4 ( RasterLayer::Extents );
USUL_IO_TEXT_DEFINE_WRITER_TYPE_VECTOR_4 ( RasterLayer::Extents );
SERIALIZE_XML_DECLARE_VECTOR_4_WRAPPER ( RasterLayer::Extents );

USUL_IMPLEMENT_IUNKNOWN_MEMBERS(RasterLayer, RasterLayer::BaseClass);

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

RasterLayer::RasterLayer() : 
  BaseClass(),
  _extents(),
  _alphas ( LessColor ( EqualPredicate() ) ),
  _guid ( Usul::Functions::GUID::generate() ),
  _name (),
  _shown ( true ),
  SERIALIZE_XML_INITIALIZER_LIST
{
  // Serialization glue.
  this->_addMember ( "extents", _extents );
  this->_addMember ( "guid", _guid );
  this->_addMember ( "name", _name );
  this->_addMember ( "shown", _shown );
  //this->_addMember ( "alphas", _alphas );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy Constructor.
//
///////////////////////////////////////////////////////////////////////////////

RasterLayer::RasterLayer ( const RasterLayer& rhs ) : BaseClass ( rhs ),
_extents ( rhs._extents ),
_alphas ( rhs._alphas ),
_guid ( rhs._guid ),
_name ( rhs._name ),
_shown ( rhs._shown ),
_dataMemberMap( rhs._dataMemberMap )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Assignment.
//
///////////////////////////////////////////////////////////////////////////////

RasterLayer& RasterLayer::operator= ( const RasterLayer& rhs )
{
  _extents = rhs._extents;
  _alphas = rhs._alphas;
  _guid = rhs._guid;
  _name = rhs._name;
  _shown = rhs._shown;
  //_dataMemberMap = rhs._dataMemberMap;
  
  return *this;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

RasterLayer::~RasterLayer()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the extents.
//
///////////////////////////////////////////////////////////////////////////////

void RasterLayer::extents ( const Extents& extents )
{
  Guard guard ( this );
  _extents = extents;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the extents.
//
///////////////////////////////////////////////////////////////////////////////

RasterLayer::Extents RasterLayer::extents() const
{
  Guard guard ( this );
  return _extents;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add an alpha value.
//
///////////////////////////////////////////////////////////////////////////////

void RasterLayer::alpha ( unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha )
{
  Guard guard ( this );
  Color color ( red, green, blue );
  _alphas[color] = alpha;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the alpha values.
//
///////////////////////////////////////////////////////////////////////////////

RasterLayer::Alphas RasterLayer::alphas() const
{
  Guard guard ( this );
  return _alphas;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Create a blank image.
//
///////////////////////////////////////////////////////////////////////////////

osg::Image* RasterLayer::_createBlankImage( unsigned int width, unsigned int height ) const
{
  osg::ref_ptr < osg::Image > result ( new osg::Image );
  result->allocateImage ( width, height, 1, GL_RGBA, GL_UNSIGNED_BYTE );
  ::memset ( result->data(), 0, result->getImageSizeInBytes() );

  return result.release();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for an interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown* RasterLayer::queryInterface( unsigned long iid )
{
  switch (iid)
  {
    case Usul::Interfaces::IUnknown::IID:
    case Usul::Interfaces::IRasterLayer::IID:
      return static_cast<Usul::Interfaces::IRasterLayer*> ( this );
    case Usul::Interfaces::ILayer::IID:
      return static_cast<Usul::Interfaces::ILayer*> ( this );
    case Usul::Interfaces::ILayerExtents::IID:
      return static_cast<Usul::Interfaces::ILayerExtents*> ( this );
    case Usul::Interfaces::ISerialize::IID:
      return static_cast<Usul::Interfaces::ISerialize*> ( this );
    case Usul::Interfaces::IRasterAlphas::IID:
      return static_cast<Usul::Interfaces::IRasterAlphas*> ( this );
    case Usul::Interfaces::IClonable::IID:
      return static_cast<Usul::Interfaces::IClonable*> ( this );
    default:
      return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the guid for the layer.
//
///////////////////////////////////////////////////////////////////////////////

std::string RasterLayer::guid() const
{
  Guard guard ( this );
  return _guid;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the name.
//
///////////////////////////////////////////////////////////////////////////////

std::string RasterLayer::name() const
{
  Guard guard ( this );
  return _name;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the name.
//
///////////////////////////////////////////////////////////////////////////////

void RasterLayer::name( const std::string& name )
{
  Guard guard ( this );
  _name = name;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set show layer.
//
///////////////////////////////////////////////////////////////////////////////

void RasterLayer::showLayer ( bool b )
{
  Guard guard ( this );
  _shown = b;
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get show layer.
//
///////////////////////////////////////////////////////////////////////////////

bool RasterLayer::showLayer() const
{
  Guard guard ( this );
  return _shown;
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the min longitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double RasterLayer::minLon() const
{
  Guard guard ( this );
  return _extents.minLon();
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the min latitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double RasterLayer::minLat() const
{
  Guard guard ( this );
  return _extents.minLat();
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the max longitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double RasterLayer::maxLon() const
{
  Guard guard ( this );
  return _extents.maxLon();
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the max latitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double RasterLayer::maxLat() const
{
  Guard guard ( this );
  return _extents.maxLat();
}
