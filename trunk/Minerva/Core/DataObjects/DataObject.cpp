
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all data objects.
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/DataObjects/DataObject.h"
#include "Minerva/Core/Visitor.h"

#include "OsgTools/Font.h"

#include "osg/Geode"
#include "osgText/Text"
#include "osg/Billboard"

using namespace Minerva::Core::DataObjects;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( DataObject, DataObject::BaseClass );

///////////////////////////////////////////////////////////////////////////////
//
//  Static Member.
//
///////////////////////////////////////////////////////////////////////////////

OsgTools::ShapeFactory::Ptr DataObject::_sf ( 0x0 );


///////////////////////////////////////////////////////////////////////////////
//
//  Return the shape factory.
//
///////////////////////////////////////////////////////////////////////////////

OsgTools::ShapeFactory* DataObject::shapeFactory()
{
  if ( 0x0 == _sf.get() )
    _sf = new OsgTools::ShapeFactory;
  return _sf.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

DataObject::DataObject() :
  BaseClass(),
  _dirty ( true ),
  _renderBin ( osg::StateSet::DEFAULT_BIN ),
  _color ( 0.0, 0.0, 0.0, 1.0 ),
  _objectId ( "" ),
  _label(),
  _labelPosition(),
  _labelColor( 1.0, 1.0, 1.0, 1.0 ),
  _labelSize( 25.0f ),
  _showLabel ( false ),
  _geometry ( static_cast < Usul::Interfaces::IUnknown* > ( 0x0 ) ),
  _dataSource ( static_cast < Usul::Interfaces::IUnknown* > ( 0x0 ) ),
  _firstDate ( boost::date_time::min_date_time ),
  _lastDate ( boost::date_time::max_date_time ),
  _altitudeMode ( CLAMP_TO_GROUND ),
  _extrude ( false ),
  _extents()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

DataObject::~DataObject()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown* DataObject::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::IBuildScene::IID:
    return static_cast<Usul::Interfaces::IBuildScene*> ( this );
  case Usul::Interfaces::ITreeNode::IID:
    return static_cast<Usul::Interfaces::ITreeNode*> ( this );
  case Usul::Interfaces::ILayerExtents::IID:
    return static_cast<Usul::Interfaces::ILayerExtents*> ( this );
  case Minerva::Interfaces::IElevationChangedListnerer::IID:
    return static_cast<Minerva::Interfaces::IElevationChangedListnerer*> ( this );
  case Usul::Interfaces::IBooleanState::IID:
    return static_cast<Usul::Interfaces::IBooleanState*> ( this );
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Accept the visitor.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::accept ( Minerva::Core::Visitor& visitor )
{
  visitor.visit ( *this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

bool DataObject::dirty() const
{
  Guard guard ( this );
  return _dirty;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::dirty( bool b )
{
  Guard guard ( this );
  _dirty = b;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the render bin.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int DataObject::renderBin() const
{
  Guard guard ( this );
  return _renderBin;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the render bin.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::renderBin( unsigned int renderBin )
{
  // Only change it if it's different.
  if ( renderBin != _renderBin )
  {
    Guard guard ( this );
    _renderBin = renderBin;
    this->dirty( true );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color.
//
///////////////////////////////////////////////////////////////////////////////

const osg::Vec4& DataObject::color () const
{
  Guard guard ( this );
  return _color;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::color ( const osg::Vec4& color )
{
  Guard guard ( this );

  // Set the internal color.
  _color = color;
  this->dirty( true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the id.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::objectId( const std::string & id )
{
  Guard guard ( this );
  _objectId = id;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the id.
//
///////////////////////////////////////////////////////////////////////////////

const std::string & DataObject::objectId() const
{
  Guard guard ( this );
  return _objectId;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::label ( const std::string& label )
{
  Guard guard ( this );
  _label = label;
  this->dirty( true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the label.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& DataObject::label () const
{
  Guard guard ( this );
  return _label;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label position.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::labelPosition ( const osg::Vec3& position )
{
  Guard guard ( this );
  _labelPosition = position;
  this->dirty( true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the label position.
//
///////////////////////////////////////////////////////////////////////////////

const osg::Vec3& DataObject::labelPosition () const
{
  Guard guard ( this );
  return _labelPosition;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the geometry.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::geometry( Unknown *geometry )
{
  Guard guard ( this );
  _geometry = geometry;
  this->dirty( true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the geometry.
//
///////////////////////////////////////////////////////////////////////////////

DataObject::Unknown* DataObject::geometry()
{
  Guard guard ( this );
  return _geometry.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the geometry.
//
///////////////////////////////////////////////////////////////////////////////

const DataObject::Unknown* DataObject::geometry() const
{
  Guard guard ( this );
  return _geometry.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color.
//
///////////////////////////////////////////////////////////////////////////////

const osg::Vec4& DataObject::labelColor () const
{
  Guard guard ( this );
  return _labelColor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::labelColor ( const osg::Vec4& color )
{
  Guard guard ( this );
  // Set the lable color.
  _labelColor = color;
  this->dirty( true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label size.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::labelSize( float size )
{
  Guard guard ( this );
  _labelSize = size;
  this->dirty( true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the label size.
//
///////////////////////////////////////////////////////////////////////////////

float DataObject::labelSize() const
{
  Guard guard ( this );
  return _labelSize;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the connection.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::dataSource ( Unknown* c )
{
  Guard guard ( this );
  _dataSource = c;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the connection.
//
///////////////////////////////////////////////////////////////////////////////

DataObject::Unknown* DataObject::dataSource()
{
  Guard guard ( this );
  return _dataSource.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the data source.
//
///////////////////////////////////////////////////////////////////////////////

const DataObject::Unknown* DataObject::dataSource() const
{
  Guard guard ( this );
  return _dataSource.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build the node for the label.
//
///////////////////////////////////////////////////////////////////////////////

osg::Node* DataObject::_buildLabel( const osg::Vec3& position )
{
  osg::ref_ptr < osg::Geode > geode ( new osg::Geode );
  
  const std::string label ( this->label() );

  if ( this->showLabel () && false == label.empty() )
  {
    osg::ref_ptr < osgText::Text > text ( new osgText::Text );

    osg::ref_ptr<osgText::Font> font ( OsgTools::Font::defaultFont() );
    text->setFont( font.get() );

    text->setColor( this->labelColor() );
    text->setPosition ( position );
    text->setAutoRotateToScreen( true );
    text->setCharacterSizeMode( osgText::Text::SCREEN_COORDS );
    text->setCharacterSize( this->labelSize() );

    text->setText ( this->label() );

    geode->addDrawable( text.get() );
  }

  return geode.release();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the flag to show the label.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::showLabel ( bool value )
{
  Guard guard ( this );
  _showLabel = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the flag to show the label.
//
///////////////////////////////////////////////////////////////////////////////

bool DataObject::showLabel () const
{
  Guard guard ( this );
  return _showLabel;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Pre build the scene.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::preBuildScene( Usul::Interfaces::IUnknown * caller )
{
  osg::ref_ptr<osg::Node> node ( this->_preBuildScene ( caller ) );
  
  Guard guard ( this );
  _preBuiltScene = node;
  this->dirty ( false );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Is this data object transparent?
//
///////////////////////////////////////////////////////////////////////////////

bool DataObject::transparent() const
{
  return 1.0f != this->color().w();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build the scene.
//
///////////////////////////////////////////////////////////////////////////////

osg::Node* DataObject::buildScene( const Options& options, Usul::Interfaces::IUnknown* caller )
{
  // Build the scene if we need to.
  if ( this->dirty () )
    this->preBuildScene( caller );

  Guard guard ( this );

  // Switch the pre built scene for what we hand back to osg.
  // This is safer in a multi-threaded environment.
  if( _preBuiltScene.valid() )
  {
    // Get the visibilty state.
    const bool visible ( this->visibility () );
    
    _root = _preBuiltScene;
    _preBuiltScene = 0x0;

    // Set the visibility state.
    this->visibility ( visible );
  }

  return _root.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the visibilty flag.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::visibility ( bool b )
{
  Guard guard ( this );

  if ( _root.valid () )
  {
    const unsigned int nodeMask ( b ? 0xffffffff : 0x0 );
    _root->setNodeMask ( nodeMask );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the visibilty flag.
//
///////////////////////////////////////////////////////////////////////////////

bool DataObject::visibility ( ) const
{
  Guard guard ( this );
  return _root.valid () ? ( _root->getNodeMask () != 0x0 ) : ( _preBuiltScene.valid() ? _preBuiltScene->getNodeMask() != 0x0 : false );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the first date.
//
///////////////////////////////////////////////////////////////////////////////

const Minerva::Core::Animate::Date& DataObject::firstDate() const
{
  Guard guard ( this );
  return _firstDate;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the first date.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::firstDate( const Minerva::Core::Animate::Date& date )
{
  Guard guard ( this );
  _firstDate = date;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the last date.
//
///////////////////////////////////////////////////////////////////////////////

const Minerva::Core::Animate::Date& DataObject::lastDate() const
{
  Guard guard ( this );
  return _lastDate;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the last date.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::lastDate( const Minerva::Core::Animate::Date& date )
{
  Guard guard ( this );
  _lastDate = date;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the altitude mode.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::altitudeMode ( AltitudeMode mode )
{
  Guard guard ( this );
  _altitudeMode = mode;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the altitude mode.
//
///////////////////////////////////////////////////////////////////////////////

DataObject::AltitudeMode DataObject::altitudeMode () const
{
  Guard guard ( this );
  return _altitudeMode;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set extrude flag.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::extrude ( bool b )
{
  Guard guard ( this );
  _extrude = b;
  this->dirty ( true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get extrude flag.
//
///////////////////////////////////////////////////////////////////////////////

bool DataObject::extrude() const
{
  Guard guard ( this );
  return _extrude;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the number of children (ITreeNode).
//
///////////////////////////////////////////////////////////////////////////////

unsigned int DataObject::getNumChildNodes() const
{
  USUL_TRACE_SCOPE;
  return 0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the child node (ITreeNode).
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::ITreeNode * DataObject::getChildNode ( unsigned int which )
{
  USUL_TRACE_SCOPE;
  return 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the name (ITreeNode).
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::setTreeNodeName ( const std::string & s )
{
  USUL_TRACE_SCOPE;
  this->name ( s );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the name (ITreeNode).
//
///////////////////////////////////////////////////////////////////////////////

std::string DataObject::getTreeNodeName() const
{
  USUL_TRACE_SCOPE;
  return ( false == this->name().empty() ? this->name() : this->label() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  DataObject has been clicked.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::clicked() const
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the extents.
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::extents ( const Extents& e )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  _extents = e;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the extents.
//
///////////////////////////////////////////////////////////////////////////////

DataObject::Extents DataObject::extents() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _extents;
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the min longitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double DataObject::minLon() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _extents.minLon();
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the min latitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double DataObject::minLat() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _extents.minLat();
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the max longitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double DataObject::maxLon() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _extents.maxLon();
}


///////////////////////////////////////////////////////////////////////////////
//
//   Get the max latitude (ILayerExtents).
//
///////////////////////////////////////////////////////////////////////////////

double DataObject::maxLat() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _extents.maxLat();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Elevation has changed within given extents (IElevationChangedListnerer).
//
///////////////////////////////////////////////////////////////////////////////

bool DataObject::elevationChangedNotify ( const Extents& extents, ImagePtr elevationData, Unknown * caller )
{
  Extents e ( this->extents() );

  if ( e.intersects ( extents ) )
  {
    this->dirty ( true );
    this->preBuildScene ( caller );
    return true;
  }

  return false;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the state (IBooleanState).
//
///////////////////////////////////////////////////////////////////////////////

void DataObject::setBooleanState ( bool b )
{
  this->visibility ( b );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the state (IBooleanState).
//
///////////////////////////////////////////////////////////////////////////////

bool DataObject::getBooleanState() const
{
  return this->visibility();
}
