
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Resources/Manager.h"

using namespace Usul::Resources;


///////////////////////////////////////////////////////////////////////////////
//
//  Static member initialization.
//
///////////////////////////////////////////////////////////////////////////////

Manager* Manager::_instance ( 0x0 );


///////////////////////////////////////////////////////////////////////////////
//
//  Get the instance.
//
///////////////////////////////////////////////////////////////////////////////

Manager& Manager::instance()
{
  if ( 0x0 == _instance )
    _instance = new Manager;
  return *_instance;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Manager::Manager() :
  _mutex    ( Mutex::create() ),
  _unknowns  ()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Manager::~Manager()
{
  delete _mutex; _mutex = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add an unknown.
//
///////////////////////////////////////////////////////////////////////////////

void Manager::add ( const std::string &name, IUnknown *unknown )
{
  Guard guard ( *_mutex );
  _unknowns[name] = unknown;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Clear.
//
///////////////////////////////////////////////////////////////////////////////

void Manager::clear()
{
  Guard guard ( *_mutex );
  _unknowns.clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Create.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown * Manager::find ( const std::string &name ) const
{
  Guard guard ( *_mutex );
  Unknowns::const_iterator iter ( _unknowns.find ( name ) );
  return ( iter != _unknowns.end() ? iter->second.get() : 0x0 );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Remove an unknown.
//
///////////////////////////////////////////////////////////////////////////////

void Manager::remove ( const std::string &name )
{
  Guard guard ( *_mutex );
  _unknowns.erase ( name );
}
