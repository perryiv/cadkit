
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Main window class.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Core/MainWindow.h"
#include "AppFrameWork/Core/Application.h"
#include "AppFrameWork/Core/BaseVisitor.h"
#include "AppFrameWork/Core/Define.h"

#include "AppFrameWork/Conditions/Always.h"
#include "AppFrameWork/Actions/SetTextFromFile.h"

#include <iostream>

using namespace AFW::Core;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

MainWindow::MainWindow() : BaseClass(),
  _menuBar    ( 0x0 ),
  _editors    ( new Frame ( Frame::VERTICAL ) )
{
  this->append ( _editors.get() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

MainWindow::~MainWindow()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build a default GUI.
//
///////////////////////////////////////////////////////////////////////////////

void MainWindow::buildDefault()
{
  // Safely...
  try
  {
    this->_buildDefault();
  }

  // Catch exceptions.
  AFW_CATCH_BLOCK ( "2275617693", "2075124085" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build a default GUI.
//
///////////////////////////////////////////////////////////////////////////////

void MainWindow::_buildDefault()
{
  // Add a menu bar.
  this->menuBar ( new AFW::Menus::MenuBar );
  this->menuBar()->buildDefault();

  // The file that stdio and stderr are being redirected to.
  const std::string file ( AFW::Core::Application::instance().redirect() );

  // Update functors.
  AFW::Conditions::Always::RefPtr always ( new AFW::Conditions::Always );

  for ( unsigned int i = 0; i < 5; ++i )
  {
    // Add a text window.
    TextWindow::ValidRefPtr text ( new TextWindow );
    text->dockState ( DockState ( AFW::Core::DockSite::BOTTOM, 1 ) );
    text->append ( always.get(), new AFW::Actions::SetTextFromFile ( file ) );
    this->append ( text.get() );
  }

  for ( unsigned int i = 0; i < 5; ++i )
  {
    // Add a scene-view.
    Frame::ValidRefPtr sceneTree ( new Frame );
    this->append ( sceneTree.get() );
    sceneTree->dockState ( DockState ( AFW::Core::DockSite::LEFT, 0 ) );
    std::ostringstream out; out << "Scene Tree " << i;
    sceneTree->title ( out.str() );
    sceneTree->icon ( new Icon ( "open" ) );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

void MainWindow::dirty ( bool state )
{
  BaseClass::dirty ( state );
  if ( state )
    AFW::Core::Application::instance().dirty ( true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Just helps the compiler...
//
///////////////////////////////////////////////////////////////////////////////

bool MainWindow::dirty() const
{
  return BaseClass::dirty();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the menu bar.
//
///////////////////////////////////////////////////////////////////////////////

void MainWindow::menuBar ( AFW::Menus::MenuBar *m )
{
  _menuBar = m;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the menu bar.
//
///////////////////////////////////////////////////////////////////////////////

AFW::Menus::MenuBar *MainWindow::menuBar()
{
  return _menuBar.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the menu bar.
//
///////////////////////////////////////////////////////////////////////////////

const AFW::Menus::MenuBar *MainWindow::menuBar() const
{
  return _menuBar.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Accept the visitor.
//
///////////////////////////////////////////////////////////////////////////////

void MainWindow::accept ( AFW::Core::BaseVisitor *v )
{
  if ( v )
    v->visit ( this );
}
