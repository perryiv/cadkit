
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class that maintains a set of delete-listeners.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Base/Observed.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Trace/Trace.h"

#include <algorithm>

using namespace Usul::Base;

USUL_IMPLEMENT_TYPE_ID ( Observed );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Observed::Observed() : BaseClass(),
  _deleteListeners()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

Observed::Observed ( const Observed &m ) : BaseClass ( m )
{
  USUL_TRACE_SCOPE;
  // Do not copy the delete-listeners; it doesn't make sense.
}


///////////////////////////////////////////////////////////////////////////////
//
//  Assignment.
//
///////////////////////////////////////////////////////////////////////////////

Observed &Observed::operator = ( const Observed &m )
{
  USUL_TRACE_SCOPE;
  // Do not assign the delete-listeners; it doesn't make sense.
  return *this;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Observed::~Observed()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Observed::_notifyDeleteListeners ), "1745111909" );
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Observed::_destroy ), "3168745373" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy the object.
//
///////////////////////////////////////////////////////////////////////////////

void Observed::_destroy()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  _deleteListeners.clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Notify the delete-listeners.
//
///////////////////////////////////////////////////////////////////////////////

void Observed::_notifyDeleteListeners()
{
  USUL_TRACE_SCOPE;

  // Make a copy of the listeners.
  DeleteListeners listeners;
  {
    Guard guard ( this );
    listeners = _deleteListeners;
  }

  // Notify all the listeners.
  std::for_each ( listeners.begin(), listeners.end(), std::mem_fun ( &DeleteListener::objectDeleted ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add the listener.
//
///////////////////////////////////////////////////////////////////////////////

void Observed::addDeleteListener ( DeleteListener *listener )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  if ( 0x0 != listener )
  {
    _deleteListeners.insert ( listener );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Remove the listener.
//
///////////////////////////////////////////////////////////////////////////////

void Observed::removeDeleteListener ( DeleteListener *listener )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  _deleteListeners.erase ( listener );
}
