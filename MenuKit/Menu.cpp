
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Menu class.
//
///////////////////////////////////////////////////////////////////////////////

#include "Menu.h"
#include "Button.h"
#include "Visitor.h"
#include "Errors.h"

#include <algorithm>

using namespace MenuKit;


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructor.
//
///////////////////////////////////////////////////////////////////////////////

Menu::Menu(): BaseClass(), 
  _items  (), 
  _layout ( VERTICAL )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Menu::Menu ( const std::string &name, const std::string &icon_file, Layout layout ) :
  BaseClass ( name, icon_file ),
  _items  (), 
  _layout ( layout )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

Menu::Menu ( const Menu &m ): BaseClass ( m ),
  _items  ( m._items ), 
  _layout ( m._layout )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Menu::~Menu()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Assignment.
//
///////////////////////////////////////////////////////////////////////////////

Menu& Menu::operator = ( const Menu &m )
{
  BaseClass::operator = ( m );
  _items  = m._items;
  _layout = m._layout;

  return (*this);
}


///////////////////////////////////////////////////////////////////////////////
//
//  Append the item.
//
///////////////////////////////////////////////////////////////////////////////

void Menu::append ( Item *item )
{
  if ( 0x0 != item )
  {
    item->_setParent ( this );
    _items.push_back ( item );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Prepend the item.
//
///////////////////////////////////////////////////////////////////////////////

void Menu::prepend ( Item *item )
{
  if ( 0x0 != item )
  {
    item->_setParent ( this );
    _items.insert ( _items.begin(), item );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Insert the item.
//
///////////////////////////////////////////////////////////////////////////////

void Menu::insert ( iterator iter, Item *item )
{
  if ( 0x0 != item )
  {
    item->_setParent ( this );
    _items.insert ( iter, item );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Accept the visitor.
//
///////////////////////////////////////////////////////////////////////////////

void Menu::accept ( Visitor &v )
{
  v.apply ( *this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Traverse the tree.
//
///////////////////////////////////////////////////////////////////////////////

void Menu::traverse ( Visitor &v )
{
  switch( v.mode() )
  {
  case Visitor::NONE: {} break;
  case Visitor::ALL:
    {
      for ( Menu::iterator iter = _items.begin(); iter != _items.end(); ++iter )
        (*iter)->accept ( v );
    } break;
  case Visitor::EXPANDED:
  default:
    {
      if( this->expanded() )
      {
        for ( Menu::iterator iter = _items.begin(); iter != _items.end(); ++iter )
          (*iter)->accept ( v );
      }
    } break;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add a separator to the end.
//
///////////////////////////////////////////////////////////////////////////////

void Menu::addSeparator ()
{
  MenuKit::Button::RefPtr button ( new MenuKit::Button );
  button->separator ( true );
  this->append ( button.get() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Predicate to find menu.
//
///////////////////////////////////////////////////////////////////////////////

namespace Detail
{
  struct FindMenu
  {
    FindMenu ( const std::string& name ) : _name ( name )
    {
    }

    template < class T >
    bool operator () ( const T& t ) const
    {
      return ( _name == t->text () );
    }

  private:
    std::string _name;
  };
}


///////////////////////////////////////////////////////////////////////////////
//
//  Find or create the menu.
//
///////////////////////////////////////////////////////////////////////////////

Menu* Menu::findOrCreateMenu( const std::string &name )
{
  Guard guard ( this->mutex () );

  // Try and find a item with the name.
  iterator iter = std::find_if ( _items.begin (), _items.end(), Detail::FindMenu ( name ) );

  if ( _items.end() != iter )
    return dynamic_cast < Menu* > ( iter->get() );

  Menu::RefPtr m ( new Menu );
  m->name ( name );
  this->append ( m );
  return m.get();
}
