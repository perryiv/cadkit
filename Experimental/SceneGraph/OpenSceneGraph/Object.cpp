
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2004, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Abstract base class.
//
///////////////////////////////////////////////////////////////////////////////

#include "SceneGraph/OpenSceneGraph/Object.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Strings/Format.h"
#include "Usul/Trace/Trace.h"

using namespace SceneGraph::OSG;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( Object, Object::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Object::Object() : BaseClass(),
  _name(),
  _userData ( 0x0 )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Object::~Object()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Object::_destroy ), "1262198500" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy this instance.
//
///////////////////////////////////////////////////////////////////////////////

void Object::_destroy()
{
  USUL_TRACE_SCOPE;
  _name.clear();
  _userData = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *Object::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::SceneGraph::INamedObject::IID:
    return static_cast < Usul::Interfaces::SceneGraph::INamedObject* > ( this );
  case Usul::Interfaces::SceneGraph::IUserData::IID:
    return static_cast < Usul::Interfaces::SceneGraph::IUserData* > ( this );
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the name.
//
///////////////////////////////////////////////////////////////////////////////

std::string Object::getObjectName() const
{
  USUL_TRACE_SCOPE;
  ReadLock lock ( this );
  return _name;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the name.
//
///////////////////////////////////////////////////////////////////////////////

void Object::setObjectName ( const std::string &s )
{
  USUL_TRACE_SCOPE;
  WriteLock lock ( this );
  _name = s;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the user data.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown::RefPtr Object::getUserData() const
{
  USUL_TRACE_SCOPE;
  ReadLock lock ( this );
  return _userData;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the user data.
//
///////////////////////////////////////////////////////////////////////////////

void Object::setUserData ( IUnknown::RefPtr unknown )
{
  USUL_TRACE_SCOPE;
  WriteLock lock ( this );
  _userData = unknown;
}
