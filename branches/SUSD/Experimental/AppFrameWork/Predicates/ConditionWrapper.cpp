
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Predicate class that wraps a condition.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Predicates/ConditionWrapper.h"
#include "AppFrameWork/Conditions/Condition.h"

#include "Usul/Errors/Assert.h"
#include "Usul/Pointers/Intrusive.h"

#include <stdexcept>

using namespace AFW::Predicates;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

ConditionWrapper::ConditionWrapper ( AFW::Conditions::Condition *c ) : BaseClass(),
  _c ( 0x0 )
{
  this->_set ( c );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

ConditionWrapper::ConditionWrapper ( const ConditionWrapper &c ) : BaseClass ( c ),
  _c ( 0x0 )
{
  this->_set ( c._c );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

ConditionWrapper::~ConditionWrapper()
{
  Usul::Pointers::unreference ( _c );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Assignment operator.
//
///////////////////////////////////////////////////////////////////////////////

ConditionWrapper &ConditionWrapper::operator () ( const ConditionWrapper &c )
{
  this->_set ( c._c );
  return *this;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set condition.
//
///////////////////////////////////////////////////////////////////////////////

void ConditionWrapper::_set ( AFW::Conditions::Condition *c )
{
  if ( 0x0 == c )
    throw std::runtime_error ( "Error 2279915253: Null condition given" );
  Usul::Pointers::unreference ( _c );
  _c = c;
  Usul::Pointers::reference ( _c );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Overloaded operator.
//
///////////////////////////////////////////////////////////////////////////////

bool ConditionWrapper::operator () ( AFW::Core::Object *obj ) const
{
  USUL_ASSERT ( 0x0 != _c );
  return _c->evaluate ( obj );
}
