
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for a registry, which is a mapping between arbitrary strings.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Components/Registry.h"
#include "Usul/Components/Exceptions.h"
#include "Usul/Errors/Assert.h"
#include "Usul/Exceptions/Thrower.h"
#include "Usul/Threads/Mutex.h"
#include "Usul/Threads/Guard.h"

using namespace Usul;
using namespace Usul::Components;

typedef Usul::Threads::Guard<Usul::Threads::Mutex> Guard;


///////////////////////////////////////////////////////////////////////////////
//
//  Static variables.
//
///////////////////////////////////////////////////////////////////////////////

namespace Usul
{
  namespace Components
  {
    Registry *Registry::_registry = 0x0;
  };
};


///////////////////////////////////////////////////////////////////////////////
//
//  Get a pointer to the static instance.
//
///////////////////////////////////////////////////////////////////////////////

Registry &Registry::instance()
{
  if ( 0x0 == _registry )
  {
    Usul::Exceptions::Thrower<std::runtime_error> (
      "Error: 3391094992, subclass has not allocated static registry pointer." );
  }
  return *_registry;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructor.
//
///////////////////////////////////////////////////////////////////////////////

Registry::Registry() :
  _mutex ( Usul::Threads::Mutex::create() ),
  _strings()
{
  USUL_ASSERT ( _mutex );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Registry::~Registry()
{
  USUL_ASSERT ( _mutex );
  delete _mutex;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add the key and the data associated with it.
//
///////////////////////////////////////////////////////////////////////////////

void Registry::add ( const std::string &key, const std::string &data )
{
  Guard guard ( *_mutex );

  // This will insert or replace.
  _strings[key] = data;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Look for the data given the key.
//
///////////////////////////////////////////////////////////////////////////////

std::string Registry::find ( const std::string &key ) const
{
  Guard guard ( *_mutex );

  // Look for the data.
  StringMap::const_iterator i = _strings.find ( key );

  // If we found it then return it.
  if ( _strings.end() != i )
    return i->second;

  // If we get to here then we failed.
  Usul::Exceptions::Thrower<Usul::Components::Exceptions::StringNotRegistered> (
    "Error: 3719443079, failed to find data for key: ", key );

  // The compiler does not know that the above "Thrower" constructor throws 
  // an exception, and thus, we never get here.
  USUL_ASSERT ( 0 );
  return "";
}


///////////////////////////////////////////////////////////////////////////////
//
//  Is the registry empty?
//
///////////////////////////////////////////////////////////////////////////////

bool Registry::empty() const
{
  Guard guard ( *_mutex );
  return _strings.empty();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the number of entries.
//
///////////////////////////////////////////////////////////////////////////////

Registry::size_type Registry::size() const
{
  Guard guard ( *_mutex );
  return _strings.size();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the mutex.
//
///////////////////////////////////////////////////////////////////////////////

const Usul::Threads::Mutex &Registry::mutex() const
{
  USUL_ASSERT ( _mutex );
  return *_mutex;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the mutex.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Threads::Mutex &Registry::mutex()
{
  USUL_ASSERT ( _mutex );
  return *_mutex;
}
