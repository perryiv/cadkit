
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant and Perry L. Miller IV.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Set of unique user-data.
//
///////////////////////////////////////////////////////////////////////////////

#include "UserDataMap.h"

#include "CadViewer/ErrorChecker.h"

using namespace CV;
using namespace CV::Plugins;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

UserDataMap::UserDataMap() : BaseClass(),
  _map()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

UserDataMap::UserDataMap ( const UserDataMap &u ) : BaseClass ( u ),
  _map ( u._map )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

UserDataMap::~UserDataMap()
{
}


/////////////////////////////////////////////////////////////////////////////
//
//  Clear (remove) all the children.
//
/////////////////////////////////////////////////////////////////////////////

void UserDataMap::clear()
{
  _map.clear();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Erase (remove) the user-data indicated by the iterator.
//
/////////////////////////////////////////////////////////////////////////////

void UserDataMap::erase ( UserDataMap::iterator i )
{
  _map.erase ( i );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Insert the user-data.
//
///////////////////////////////////////////////////////////////////////////////

void UserDataMap::insert ( UserDataBase *u )
{
  ErrorChecker ( 1070856637, u != 0x0 );
  _map.insert ( Map::value_type ( u->id(), Map::mapped_type ( u ) ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Find the user-data.
//
///////////////////////////////////////////////////////////////////////////////

UserDataMap::const_iterator UserDataMap::find ( UserDataMap::key_type key ) const
{
  return _map.find ( key );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Find the user-data.
//
///////////////////////////////////////////////////////////////////////////////

UserDataMap::iterator UserDataMap::find ( UserDataMap::key_type key )
{
  return _map.find ( key );
}
