
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Plugin activity listener.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Core/PluginListener.h"
#include "AppFrameWork/Core/Define.h"

#include <iostream>

using namespace AFW::Core;

USUL_IMPLEMENT_TYPE_ID ( PluginListener );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

PluginListener::PluginListener() : BaseClass(),
  _text (),
  _mutex()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

PluginListener::~PluginListener()
{
  // Safely...
  try
  {
    // Cleanup these members.
    _text.clear();
  }

  // Catch exceptions.
  AFW_CATCH_BLOCK ( "2164986368", "3970224707" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Called when there is dynamic library activity.
//
///////////////////////////////////////////////////////////////////////////////

void PluginListener::operator () ( const std::string &message )
{
  Guard guard ( _mutex );
  _text += message;
  _text += '\n';
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the text. Calling this is not thread-safe.
//
///////////////////////////////////////////////////////////////////////////////

const std::string &PluginListener::text() const
{
  Guard guard ( _mutex );
  return _text;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Access to the mutex.
//
///////////////////////////////////////////////////////////////////////////////

PluginListener::Mutex &PluginListener::mutex() const
{
  return _mutex;
}
