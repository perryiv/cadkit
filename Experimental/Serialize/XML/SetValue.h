
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Helper classes to set data types.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _SERIALIZE_XML_SET_VALUE_H_
#define _SERIALIZE_XML_SET_VALUE_H_

#include <sstream>


namespace Serialize {
namespace XML {


///////////////////////////////////////////////////////////////////////////////
//
//  Generic types.
//
///////////////////////////////////////////////////////////////////////////////

template < class T > struct SetValue
{
  static void set ( const std::string &s, T &value )
  {
    if ( false == s.empty() )
    {
      std::istringstream in ( s );
      in >> value;
    }
  }
};


///////////////////////////////////////////////////////////////////////////////
//
//  Specialization for strings.
//
///////////////////////////////////////////////////////////////////////////////

template <> struct SetValue < std::string >
{
  static void set ( const std::string &s, std::string &value )
  {
    value = s;
  }
};


///////////////////////////////////////////////////////////////////////////////
//
//  Pointer types should not compile.
//
///////////////////////////////////////////////////////////////////////////////

template <> struct SetValue < void * >;


} // namespace Serialize
} // namespace XML


#endif // _SERIALIZE_XML_SET_VALUE_H_
