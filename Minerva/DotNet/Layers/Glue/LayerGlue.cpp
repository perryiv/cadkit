
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Decision Theater at Arizona State University
//  All rights reserved.
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "LayerGlue.h"

using namespace DT::Minerva::Glue;


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

LayerGlue::LayerGlue() : _connection( nullptr )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

LayerGlue::LayerGlue( LayerGlue ^ layer ) :
_connection ( layer->_connection ),
_colorFunctor( layer->_colorFunctor )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

LayerGlue::~LayerGlue()
{
  _connection = nullptr;
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

LayerGlue::!LayerGlue()
{
  _connection = nullptr;
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

System::IntPtr LayerGlue::layerPtr()
{
  return System::IntPtr ( this->layer() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::clear()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

int LayerGlue::LayerID::get()
{
  return this->layer()->layerID();
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::LayerID::set ( int x )
{
  this->layer()->layerID ( x );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::Connection::set ( DT::Minerva::Interfaces::IDatabaseConnection^ connection )
{
  if( nullptr != connection )
  {
    ::Minerva::DB::Connection *c = new ::Minerva::DB::Connection();
    c->ref();
    c->hostname( this->toNativeString ( connection->Hostname ) );
    c->database( this->toNativeString ( connection->Database ) );
    c->username( this->toNativeString ( connection->Username ) );
    c->password( this->toNativeString ( connection->Password ) );
    c->connect();
    this->layer()->connection( c );
    c->unref();
  }

  _connection = connection;
}

DT::Minerva::Interfaces::IDatabaseConnection^ LayerGlue::Connection::get()
{
  return _connection;
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

System::String^ LayerGlue::Tablename::get()
{
  return this->toManagedString( this->layer()->tablename() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::Tablename::set( System::String^ s )
{
  this->layer()->tablename( this->toNativeString( s ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

System::String^ LayerGlue::LabelColumn::get()
{
  return this->toManagedString( this->layer()->labelColumn() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::LabelColumn::set( System::String^ s )
{
  this->layer()->labelColumn( this->toNativeString( s ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

int LayerGlue::RenderBin::get()
{
  return this->layer()->renderBin();
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::RenderBin::set( int i )
{
  this->layer()->renderBin( i );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

float LayerGlue::Offset::get()
{
  return this->layer()->zOffset();
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::Offset::set( float f )
{
  this->layer()->zOffset( f );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

System::String^ LayerGlue::Query::get()
{
  return this->toManagedString( this->layer()->query() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::Query::set( System::String^ s )
{
  this->layer()->query( this->toNativeString( s ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

DT::Minerva::Glue::BaseColorFunctor^ LayerGlue::ColorFunctor::get (  )
{
  return _colorFunctor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::ColorFunctor::set ( DT::Minerva::Glue::BaseColorFunctor^ functor )
{
  if( nullptr != functor )
    this->layer()->colorFunctor( functor->colorFunctor() );
  _colorFunctor = functor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

System::String^ LayerGlue::LegendText::get()
{
  return this->toManagedString( this->layer()->legendText() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::LegendText::set( System::String^ s )
{
  this->layer()->legendText( this->toNativeString( s ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

bool LayerGlue::ShowLabel::get()
{
  return this->layer()->showLabel();
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::ShowLabel::set( bool b )
{
  this->layer()->showLabel( b );
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::_setProperties( LayerGlue ^ layer )
{
  this->Connection = layer->Connection;
  this->Tablename = layer->Tablename;
  this->LabelColumn = layer->LabelColumn;
  this->RenderBin = layer->RenderBin;
  this->Offset = layer->Offset;
  this->Query = layer->Query;
  this->ColorFunctor = layer->ColorFunctor;
  this->LegendText = layer->LegendText;
  this->ShowLabel = layer->ShowLabel;
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

bool LayerGlue::ShowLayer::get()
{
  return this->layer()->showLayer();
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void LayerGlue::ShowLayer::set( bool b )
{
  this->layer()->showLayer( b );
}


System::Drawing::Color^ LayerGlue::LabelColor::get()
{
  osg::Vec4 color ( this->layer()->labelColor() );

  System::Drawing::Color ^c = gcnew System::Drawing::Color();
  int a = static_cast < int > ( color.w() * 255 );
  int r = static_cast < int > ( color.x() * 255 );
  int g = static_cast < int > ( color.y() * 255 );
  int b = static_cast < int > ( color.z() * 255 );
  c = System::Drawing::Color::FromArgb( a, r, g, b );

  return c;
}

void LayerGlue::LabelColor::set( System::Drawing::Color^ color )
{
  osg::Vec4 c ( (float) color->R / 255, (float) color->G / 255, (float) color->B / 255, (float) color->A / 255 );
  this->layer()->labelColor( c );
}


float LayerGlue::LabelZOffset::get()
{
  return this->layer()->labelZOffset();
}

void LayerGlue::LabelZOffset::set ( float f )
{
  this->layer()->labelZOffset ( f );
}
