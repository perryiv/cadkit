
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Preference class to hold application-defined state.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Shared/Preferences.h"


using namespace Usul;
using namespace Usul::Shared;


///////////////////////////////////////////////////////////////////////////////
//
//  Return the single instance.
//
///////////////////////////////////////////////////////////////////////////////

namespace Usul
{
  namespace Shared
  {
    namespace Detail
    {
      Usul::Shared::Preferences *_instance ( 0x0 );
    }
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Preferences::Preferences() : _bools()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Preferences::~Preferences()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the single instance.
//
///////////////////////////////////////////////////////////////////////////////

Preferences &Preferences::instance()
{
  if ( 0x0 == Usul::Shared::Detail::_instance )
    Usul::Shared::Detail::_instance = new Preferences;
  return *(Usul::Shared::Detail::_instance);
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the value.
//
///////////////////////////////////////////////////////////////////////////////

bool &Preferences::getBool ( const std::string &key )
{
  return _bools[key];
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the value.
//
///////////////////////////////////////////////////////////////////////////////

void Preferences::setBool ( const std::string &key, bool t )
{
  _bools[key] = t;
}
