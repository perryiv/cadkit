
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Color class.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _GENERIC_SCENE_GRAPH_CORE_COLOR_H_
#define _GENERIC_SCENE_GRAPH_CORE_COLOR_H_

#include "GSG/Core/Config.h"


namespace GSG {


class Color
{
public:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Useful typedefs.
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef Vec4 VectorType;
  typedef VectorType::value_type value_type;


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  explicit Color() :
    _v ( 0, 0, 0, 1 )
  {
    // Empty.
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Color ( value_type r, value_type g, value_type b, value_type a ) :
    _v ( r, g, b, a )
  {
    // Empty.
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set red.
  //
  /////////////////////////////////////////////////////////////////////////////

  const value_type &red() const
  {
    return _v[0]; 
  }
  value_type &red()
  {
    return _v[0]; 
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set green.
  //
  /////////////////////////////////////////////////////////////////////////////

  const value_type &green() const
  {
    return _v[1]; 
  }
  value_type &green()
  {
    return _v[1]; 
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set blue.
  //
  /////////////////////////////////////////////////////////////////////////////

  const value_type &blue() const
  {
    return _v[2]; 
  }
  value_type &blue()
  {
    return _v[2]; 
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set alpha.
  //
  /////////////////////////////////////////////////////////////////////////////

  const value_type &alpha() const
  {
    return _v[3]; 
  }
  value_type &alpha()
  {
    return _v[3]; 
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  See if the individual channels are in range.
  //
  /////////////////////////////////////////////////////////////////////////////

  bool valid() const
  {
    return (
      _v[0] >= 0 && _v[0] <= 1 &&
      _v[1] >= 0 && _v[1] <= 1 &&
      _v[2] >= 0 && _v[2] <= 1 &&
      _v[3] >= 0 && _v[3] <= 1 );
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set the color.
  //
  /////////////////////////////////////////////////////////////////////////////

  void set ( value_type r, value_type g, value_type b, value_type a )
  {
    _v[0] = r;
    _v[1] = g;
    _v[2] = b;
    _v[3] = a;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Are they equal?
  //
  /////////////////////////////////////////////////////////////////////////////

  bool equal ( const Color &c ) const
  {
    return _v.equal ( c._v );
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Assignment to vector. Note: compiler makes assignment to another color.
  //
  /////////////////////////////////////////////////////////////////////////////

  Color &operator = ( const VectorType &rhs )
  {
    _v[0] = rhs[0];
    _v[1] = rhs[1];
    _v[2] = rhs[2];
    _v[3] = rhs[3];
    return *this;
  }

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get the internal array.
  //
  /////////////////////////////////////////////////////////////////////////////

  value_type *get()
  {
    return _v.get();
  }
  const value_type *get() const
  {
    return _v.get();
  }


private:

  VectorType _v;
};


///////////////////////////////////////////////////////////////////////////////
//
//  Additional operators. These are not members of the class because compilers
//  vary too much in the proper syntax for friend functions in templates. 
//  See http://gcc.gnu.org/faq.html#friend and http://www.bero.org/gcc296.html
//
///////////////////////////////////////////////////////////////////////////////

inline bool operator == ( const Color &left, const Color &right )
{
  return left.equal ( right );
}
inline bool operator != ( const Color &left, const Color &right )
{
  return false == left.equal ( right );
}


}; // namespace GSG


#endif // _GENERIC_SCENE_GRAPH_CORE_COLOR_H_
