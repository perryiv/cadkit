
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Jeff Conner
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Input dialog for files.
//
///////////////////////////////////////////////////////////////////////////////

#include "NewSetDialog.h"
#include "NewGroupDialog.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

NewSetDialog::NewSetDialog ( QWidget *parent ) : BaseClass ( parent )
{
  // Initialize code from Designer.
  this->setupUi ( this );

  QStringList titles;
  titles.push_back( "Name" );
  titles.push_back( "Models");
  _groupsList->setHeaderLabels ( titles );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

NewSetDialog::~NewSetDialog()
{

}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void NewSetDialog::on_groupsAddButton_clicked()
{
  //AddModelDialog dialog( this );

  //if( QDialog::Accepted == dialog.exec() )
  //{
  //  QTreeWidgetItem* item ( new QTreeWidgetItem ( _modelsList ) );
  //  item->setText ( 0, dialog.getNameText().c_str() );
  //  item->setText ( 1, dialog.getFilePath().c_str() );
  //  _modelsList->addTopLevelItem( item );
  //}
}


///////////////////////////////////////////////////////////////////////////////
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void NewSetDialog::on_groupsRemoveButton_clicked()
{
  //typedef QList< QTreeWidgetItem* > TreeWidgetItems;

  //TreeWidgetItems listItems ( _modelsList->selectedItems() );

  //for( TreeWidgetItems::iterator iter = listItems.begin(); iter != listItems.end(); ++iter )
  //{
  //  QTreeWidgetItem* item ( *iter );
  //  const int index ( _modelsList->indexOfTopLevelItem( item ) );
  //  _modelsList->takeTopLevelItem( index );
  //  delete item;
  //}
  
}

