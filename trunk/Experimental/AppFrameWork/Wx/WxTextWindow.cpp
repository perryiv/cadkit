
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2005, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  The wxWindows text window class.
//
///////////////////////////////////////////////////////////////////////////////

#include "WxPrecompiled.h"
#include "WxTextWindow.h"
#include "WxObjectMap.h"
#include "WxMainWindow.h"
#include "WxEventHandler.h"

#include "Usul/Errors/Assert.h"

AFW_IMPLEMENT_OBJECT ( WxTextWindow );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

WxTextWindow::WxTextWindow() : BaseClass()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

WxTextWindow::~WxTextWindow()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the existing status bar.
//
///////////////////////////////////////////////////////////////////////////////

wxTextCtrl *WxTextWindow::get()
{
  Guard guard ( this->mutex() );
  return ( WxObjectMap::find<wxTextCtrl> ( this ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the existing status bar.
//
///////////////////////////////////////////////////////////////////////////////

const wxTextCtrl *WxTextWindow::get() const
{
  Guard guard ( this->mutex() );
  return ( WxObjectMap::find<wxTextCtrl> ( this ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Detach from gui object.
//
///////////////////////////////////////////////////////////////////////////////

void WxTextWindow::detach()
{
  WxObjectMap::remove ( this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Create the text window.
//
///////////////////////////////////////////////////////////////////////////////

bool WxTextWindow::create ( AFW::Core::Window *w )
{
  Guard guard ( this->mutex() );

  // Get the window.
  wxWindow *window ( WxObjectMap::find<wxFrame> ( w ) );
  if ( 0x0 == window )
    return false;

  // Don't create twice.
  if ( 0x0 != this->get() )
    return false;

  // Make a text control.
  std::auto_ptr<wxTextCtrl> text ( new wxTextCtrl 
    ( window, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE ) );

  // Add another event handler.
  text->PushEventHandler ( new WxEventHandler );

  // Set our window in the map.
  WxObjectMap::set ( this, text.release() );

  // It worked.
  return true;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the text.
//
///////////////////////////////////////////////////////////////////////////////

void WxTextWindow::textSet ( const std::string &t )
{
  Guard guard ( this->mutex() );
  BaseClass::textSet ( t );
  this->_textSet ( t.c_str(), t.length() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the text.
//
///////////////////////////////////////////////////////////////////////////////

void WxTextWindow::textSet ( const char *t, unsigned int length )
{
  Guard guard ( this->mutex() );
  BaseClass::textSet ( t, length );
  this->_textSet ( t, length );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Append the text.
//
///////////////////////////////////////////////////////////////////////////////

void WxTextWindow::textAppend ( const std::string &t )
{
  Guard guard ( this->mutex() );
  BaseClass::textAppend ( t );
  this->_textAppend ( t.c_str(), t.length() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Append the text.
//
///////////////////////////////////////////////////////////////////////////////

void WxTextWindow::textAppend ( const char *t, unsigned int length )
{
  Guard guard ( this->mutex() );
  BaseClass::textAppend ( t );
  this->_textAppend ( t, length );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Append to the existing text.
//
///////////////////////////////////////////////////////////////////////////////

void WxTextWindow::_textAppend ( const char *text, unsigned int length )
{
  Guard guard ( this->mutex() );
  if ( 0x0 != text && length > 0 )
  {
    wxTextCtrl *window ( WxObjectMap::find<wxTextCtrl> ( this ) );
    if ( window )
    {
      window->AppendText ( wxString ( text, length ) );
    }
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the text.
//
///////////////////////////////////////////////////////////////////////////////

void WxTextWindow::_textSet ( const char *text, unsigned int length )
{
  Guard guard ( this->mutex() );
  if ( 0x0 != text && length > 0 )
  {
    wxTextCtrl *window ( WxObjectMap::find<wxTextCtrl> ( this ) );
    if ( window )
    {
      window->SetValue ( wxString ( text, length ) );
    }
  }
}
