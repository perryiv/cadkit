
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Triangulate component.
//
///////////////////////////////////////////////////////////////////////////////

#include "Helios/Plugins/TriangulateGrid/TriangulateGridComponent.h"

#include "Usul/Components/Factory.h"

USUL_DECLARE_COMPONENT_FACTORY ( TriangulateGridComponent );
USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( TriangulateGridComponent, TriangulateGridComponent::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
// Constructor
//
///////////////////////////////////////////////////////////////////////////////

TriangulateGridComponent::TriangulateGridComponent()
{
}


///////////////////////////////////////////////////////////////////////////////
//
// Destructor
//
///////////////////////////////////////////////////////////////////////////////

TriangulateGridComponent::~TriangulateGridComponent() 
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *TriangulateGridComponent::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::ITriangulateGrid::IID:
    return static_cast < Usul::Interfaces::ITriangulateGrid*>(this);
  case Usul::Interfaces::IPlugin::IID:
    return static_cast < Usul::Interfaces::IPlugin* > ( this );
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build a triangle set from a grid of data.  GridResolution is the size of a grid cell in the x and y directions.
//
///////////////////////////////////////////////////////////////////////////////

OsgTools::Triangles::TriangleSet*  TriangulateGridComponent::triangulateGrid ( const Grid &grid, const GridResolution& resolution, ValueType noDataValue )
{
  return 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Usul::Interfaces::IPlugin implementation
//
///////////////////////////////////////////////////////////////////////////////

std::string TriangulateGridComponent::getPluginName() const 
{
  return "Triangulate Grid  ";
}
