
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Connection.h"

#include "Minerva/Core/DB/Connection.h"

#include "Usul/Pointers/Pointers.h"
#include "Usul/Strings/Managed.h"

using namespace DT::Minerva::Glue;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Connection::Connection() :
_connection ( new ::Minerva::Core::DB::Connection )
{
  Usul::Pointers::reference( _connection );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Connection::~Connection()
{
  Usul::Pointers::unreference ( _connection );
  _connection = 0x0;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Finializer.
//
///////////////////////////////////////////////////////////////////////////////

Connection::!Connection()
{
  Usul::Pointers::unreference ( _connection );
  _connection = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the hostname.
//
///////////////////////////////////////////////////////////////////////////////

System::String^ Connection::Hostname::get()
{
  return gcnew System::String ( _connection->hostname().c_str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the hostname.
//
///////////////////////////////////////////////////////////////////////////////

void Connection::Hostname::set ( System::String^ value )
{
  _connection->hostname ( Usul::Strings::convert ( value ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the database.
//
///////////////////////////////////////////////////////////////////////////////

System::String^ Connection::Database::get()
{
  return gcnew System::String ( _connection->database().c_str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the database.
//
///////////////////////////////////////////////////////////////////////////////

void Connection::Database::set ( System::String^ value )
{
  _connection->database( Usul::Strings::convert( value ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the username.
//
///////////////////////////////////////////////////////////////////////////////

System::String^ Connection::Username::get()
{
  return gcnew System::String ( _connection->username().c_str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the username.
//
///////////////////////////////////////////////////////////////////////////////

void Connection::Username::set ( System::String^ value )
{
  _connection->username ( Usul::Strings::convert ( value ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the password.
//
///////////////////////////////////////////////////////////////////////////////

System::String^ Connection::Password::get()
{
  return gcnew System::String ( _connection->password().c_str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the password.
//
///////////////////////////////////////////////////////////////////////////////

void Connection::Password::set( System::String^ value )
{
  _connection->password ( Usul::Strings::convert ( value ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Connect.
//
///////////////////////////////////////////////////////////////////////////////

void Connection::connect()
{
  _connection->connect();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Disconnect.
//
///////////////////////////////////////////////////////////////////////////////

void Connection::disconnect()
{
  _connection->disconnect();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the native connection.
//
///////////////////////////////////////////////////////////////////////////////

::Minerva::Core::DB::Connection*  Connection::nativeConnection()
{
  return _connection;
}
