
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Menu-bar class.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Menus/MenuBar.h"
#include "AppFrameWork/Menus/MenuButton.h"
#include "AppFrameWork/Core/Application.h"
#include "AppFrameWork/Core/MainWindow.h"
#include "AppFrameWork/Core/Define.h"

#include "Usul/Bits/Bits.h"

#include <iostream>

using namespace AFW::Menus;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

MenuBar::MenuBar() : BaseClass(),
  _menus  (),
  _flags  ( DIRTY ),
  _parent ( 0x0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

MenuBar::~MenuBar()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

void MenuBar::dirty ( bool state )
{
  const unsigned int bit ( MenuBar::DIRTY );
  if ( state )
  {
    _flags = Usul::Bits::add ( _flags, bit );

    // Set parent as dirty too.
    if ( _parent )
      _parent->dirty ( true );
  }
  else
  {
    _flags = Usul::Bits::remove ( _flags, bit );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

bool MenuBar::dirty() const
{
  const unsigned int bit ( MenuBar::DIRTY );
  return Usul::Bits::has ( _flags, bit );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build a default GUI.
//
///////////////////////////////////////////////////////////////////////////////

void MenuBar::buildDefault()
{
  // Safely...
  try
  {
    this->_buildDefault();
  }

  // Catch exceptions.
  AFW_CATCH_BLOCK ( "3280844121", "3720564149" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build a default GUI.
//
///////////////////////////////////////////////////////////////////////////////

void MenuBar::_buildDefault()
{
  // File menu.
  MenuGroup::ValidRefPtr fileMenu ( new MenuGroup ( "File" ) );
    MenuButton::ValidRefPtr newButton   ( new MenuButton ( "New..."  ) );
    MenuButton::ValidRefPtr openButton  ( new MenuButton ( "Open..." ) );
    MenuButton::ValidRefPtr closeButton ( new MenuButton ( "Close"   ) );
    fileMenu->append ( newButton.get() );
    fileMenu->append ( openButton.get() );
    fileMenu->append ( closeButton.get() );
  _menus.push_back ( fileMenu.get() );
}
