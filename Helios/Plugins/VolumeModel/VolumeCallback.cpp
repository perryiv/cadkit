
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2005, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Callback for changing spacing of images in volume
//
///////////////////////////////////////////////////////////////////////////////

#include "VolumeCallback.h"

#include "OsgTools/Draggers/Dragger.h"



///////////////////////////////////////////////////////////////////////////////
//
//  Default constructor.
//
///////////////////////////////////////////////////////////////////////////////

VolumeCallback::VolumeCallback() : BaseClass(),
_transforms()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

VolumeCallback::VolumeCallback ( const VolumeCallback &c ) :
  BaseClass ( c ),
  _transforms( c._transforms )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

VolumeCallback::~VolumeCallback()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Change the image's z value
//
///////////////////////////////////////////////////////////////////////////////

void VolumeCallback::operator() ( OsgTools::Draggers::Dragger &d )
{
  osg::Matrix m ( d.getMatrix() * _transforms.back()->getMatrix() );

  osg::Vec3 t ( m.getTrans() );

  const double zInc ( t.z() / _transforms.size() );

  double z ( 0.0 );

  for( Transforms::iterator i = _transforms.begin(); i != _transforms.end() - 1; ++ i )
  {
    osg::Matrix mat ( (*i)->getMatrix() );

    osg::Vec3 trans ( mat.getTrans() );

    trans.z() = z;

    mat.setTrans( trans );

    (*i)->setMatrix( mat );

    z += zInc;
  }

}

