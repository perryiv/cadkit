
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Command list.
//
///////////////////////////////////////////////////////////////////////////////

#include "Precompiled.h"
#include "CommandList.h"
#include "Quit.h"

using namespace VRV;
using namespace VRV::Commands;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( CommandList, CommandList::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

CommandList::CommandList() : BaseClass(), 
  _commands()
{
  // Register the commands.
  _commands.push_back ( new Quit );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

CommandList::~CommandList()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *CommandList::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case VRV::Interfaces::ICommandList::IID:
    return static_cast<VRV::Interfaces::ICommandList*>(this);
  case Usul::Interfaces::IUnknown::IID:
    return static_cast<Usul::Interfaces::IUnknown*>(static_cast<VRV::Interfaces::ICommandList*>(this));
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the number of commands.
//
///////////////////////////////////////////////////////////////////////////////

unsigned long CommandList::getNumCommands() const
{
  return _commands.size();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the command.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::ICommand *CommandList::getCommand ( unsigned long which )
{
  return _commands.at ( which );
}
