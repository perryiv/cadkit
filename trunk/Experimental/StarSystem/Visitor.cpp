
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base visitor class.
//
///////////////////////////////////////////////////////////////////////////////

#include "StarSystem/Visitor.h"
#include "StarSystem/System.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Trace/Trace.h"

using namespace StarSystem;

STAR_SYSTEM_IMPLEMENT_VISITOR_CLASS ( Visitor );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor
//
///////////////////////////////////////////////////////////////////////////////

Visitor::Visitor() : BaseClass()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

Visitor::~Visitor()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Visitor::_destroy ), "2197133630" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::_destroy()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the node.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( Node & )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the node.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( Body & )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the node.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( Group &group )
{
  USUL_TRACE_SCOPE;
  Guard guard1 ( this->mutex() );
  Guard guard2 ( group.mutex() );

  if ( false == group.nodes().empty() )
  {
    Group::Nodes &nodes ( group.nodes() );
    for ( Group::Nodes::iterator i = nodes.begin(); i != nodes.end(); ++i )
    {
      Node::RefPtr &node ( *i );
      Guard guard3 ( node->mutex() );
      if ( true == node.valid() )
      {
        node->accept ( *this );
      }
    }
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the node.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( System &system )
{
  USUL_TRACE_SCOPE;
  Guard guard1 ( this->mutex() );
  Guard guard2 ( system.mutex() );

  if ( 0x0 != system.body() )
  {
    system.body()->accept ( *this );
  }

  if ( 0x0 != system.satellites() && false == system.satellites()->empty() )
  {
    system.satellites()->accept ( *this );
  }
}
