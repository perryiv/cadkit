
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Component exceptions.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _USUL_COMPONENT_OBJECT_EXCEPTION_CLASSES_H_
#define _USUL_COMPONENT_OBJECT_EXCEPTION_CLASSES_H_

#include <stdexcept>


namespace Usul {
namespace Components {
namespace Exceptions {


///////////////////////////////////////////////////////////////////////////////
//
//  Base class for exceptions.
//
///////////////////////////////////////////////////////////////////////////////

struct Exception : public std::runtime_error
{
  Exception ( const std::string &what ) : std::runtime_error ( what ){}
};


///////////////////////////////////////////////////////////////////////////////
//
//  Failed to find a function in a dynamically loaded library.
//
///////////////////////////////////////////////////////////////////////////////

struct FailedToFindFunction : public Exception
{
  FailedToFindFunction ( const std::string &what ) : Exception ( what ){}
};


///////////////////////////////////////////////////////////////////////////////
//
//  Failed to create a component.
//
///////////////////////////////////////////////////////////////////////////////

struct FailedToCreate : public Exception
{
  FailedToCreate ( const std::string &what ) : Exception ( what ){}
};


///////////////////////////////////////////////////////////////////////////////
//
//  Failed to find a string in the registry.
//
///////////////////////////////////////////////////////////////////////////////

struct StringNotRegistered : public Exception
{
  StringNotRegistered ( const std::string &what ) : Exception ( what ){}
};


///////////////////////////////////////////////////////////////////////////////
//
//  The loader-module was 'Debug' while the module loaded was 'Release', 
//  or the other way around.
//
///////////////////////////////////////////////////////////////////////////////

struct MismatchedBuildModes : public Exception
{
  MismatchedBuildModes ( const std::string &what ) : Exception ( what ){}
};


} // namespace Exceptions
} // namespace Components
} // namespace Usul


#endif // _USUL_COMPONENT_OBJECT_EXCEPTION_CLASSES_H_
