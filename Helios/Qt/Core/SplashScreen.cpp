
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Helios/Qt/Core/SplashScreen.h"

#include "Usul/Errors/Assert.h"
#include "Usul/App/Application.h"
#include "Usul/Predicates/FileExists.h"

#include "QtGui/QVBoxLayout"
#include "QtGui/QSplashScreen"
#include "QtGui/QProgressBar"
#include "QtGui/QPixmap"

using namespace CadKit::Helios::Core;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

SplashScreen::SplashScreen( QWidget *mainWindow ) : BaseClass(),
_splashScreen ( new QSplashScreen ),
_progressBar ( new QProgressBar ),
_refCount ( 0 )
{
  QVBoxLayout *layout ( new QVBoxLayout ( this ) );

  QPixmap pixmap;

  // Get the splash screen.
  std::string splashImage ( Usul::App::Application::instance().splashImagePath() );
  if( Usul::Predicates::FileExists::test ( splashImage ) )
    pixmap.load( splashImage.c_str() );

  if ( false == pixmap.isNull() )
    _splashScreen->setPixmap( pixmap );

  _splashScreen->finish ( mainWindow );

  layout->addWidget( _splashScreen );
  layout->addWidget( _progressBar );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

SplashScreen::~SplashScreen()
{
	// Make sure.
	USUL_ASSERT ( 0 == _refCount );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the status bar text.
//
///////////////////////////////////////////////////////////////////////////////

void SplashScreen::setStatusBarText ( const std::string &text, bool force )
{
	if( 0x0 != _splashScreen )
		_splashScreen->showMessage ( tr ( text.c_str() ) );
}
	

///////////////////////////////////////////////////////////////////////////////
//
//  Show the progress bar.
//
///////////////////////////////////////////////////////////////////////////////

void SplashScreen::showProgressBar()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the total of progress bar.
//
///////////////////////////////////////////////////////////////////////////////

void SplashScreen::setTotalProgressBar ( unsigned int value )
{
	if( 0x0 != _progressBar )
		_progressBar->setRange ( 0, static_cast < int > ( value ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Update the progress bar.
//
///////////////////////////////////////////////////////////////////////////////

void SplashScreen::updateProgressBar ( unsigned int value )
{
	if ( 0x0 != _progressBar )
		_progressBar->setValue ( static_cast < int > ( value ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Hide the progress bar.
//
///////////////////////////////////////////////////////////////////////////////

void SplashScreen::hideProgressBar()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown* SplashScreen::queryInterface ( unsigned long iid )
{
	switch ( iid )
	{
	case Usul::Interfaces::IUnknown::IID:
	case Usul::Interfaces::IStatusBar::IID:
		return static_cast < Usul::Interfaces::IStatusBar* > ( this );
	case Usul::Interfaces::IProgressBar::IID:
		return static_cast < Usul::Interfaces::IProgressBar *  > ( this );
	default:
		return 0x0;
	}
}


///////////////////////////////////////////////////////////////////////////////
//
//  Ref.  Keep track for debugging purposes.
//
///////////////////////////////////////////////////////////////////////////////

void SplashScreen::ref()
{
	++_refCount;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Unref.  Do not delete.  Qt will handle deletion.
//
///////////////////////////////////////////////////////////////////////////////

void SplashScreen::unref ( bool )
{
	--_refCount;
}
