
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant and Perry L. Miller IV.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Inverse matrix functor.
//
///////////////////////////////////////////////////////////////////////////////

#include "InverseMatrix.h"

using namespace VRV::Functors::Matrix;


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructors.
//
///////////////////////////////////////////////////////////////////////////////

InverseMatrix::InverseMatrix ( Unknown *unknown, MatrixFunctor *mf ) : BaseClass ( unknown ), _mf ( mf )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructors.
//
///////////////////////////////////////////////////////////////////////////////

InverseMatrix::InverseMatrix ( const InverseMatrix &cb ) : BaseClass ( cb ), _mf ( cb._mf )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructors.
//
///////////////////////////////////////////////////////////////////////////////

InverseMatrix::~InverseMatrix()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the inverse of the contained matrix.
//
///////////////////////////////////////////////////////////////////////////////

void InverseMatrix::operator()()
{
  if ( _mf.valid() )
  {
    (*_mf)();
    _matrix = _mf->matrix();
    _matrix.invert();
  }
}
