
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all commands.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Commands/Command.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Trace/Trace.h"

using namespace Usul::Commands;

USUL_IMPLEMENT_TYPE_ID ( Command );

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( Command, Command::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Command::Command ( Usul::Interfaces::IUnknown *caller ) : BaseClass(),
  _caller ( caller ),
  _text(),
  _toolTipText(),
  _shortcut(),
  _iconPath()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Command::~Command()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Command::_destroy ), "3176019710" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy.
//
///////////////////////////////////////////////////////////////////////////////

void Command::_destroy()
{
  USUL_TRACE_SCOPE;
  _caller = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//  Does this function need to be guarded?
//  If two threads are in this function there isn't any chance of data problems.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *Command::queryInterface ( unsigned long iid )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );

  switch ( iid )
  {
  case Usul::Interfaces::ICommand::IID:
    return static_cast<Usul::Interfaces::ICommand*>(this);
  case Usul::Interfaces::IUnknown::IID:
    return static_cast<Usul::Interfaces::IUnknown*>(static_cast<Usul::Interfaces::ICommand*>(this));
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the caller.
//
///////////////////////////////////////////////////////////////////////////////

const Usul::Interfaces::IUnknown *Command::_getCaller() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _caller.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the caller.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *Command::_getCaller()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _caller.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the text.
//
///////////////////////////////////////////////////////////////////////////////

void Command::text( const std::string& value )
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	_text = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the text.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Command::text() const
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	return _text;
}
  

///////////////////////////////////////////////////////////////////////////////
//
//  Set the tooltip.
//
///////////////////////////////////////////////////////////////////////////////

void Command::tooltip ( const std::string& value )
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	_toolTipText = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the tooltip.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Command::tooltip() const
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	return _toolTipText;
}
  

///////////////////////////////////////////////////////////////////////////////
//
//  Set the shortcut.
//
///////////////////////////////////////////////////////////////////////////////

void Command::shortcut ( const std::string& value )
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	_shortcut = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the shortcut.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Command::shortcut() const
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	return _shortcut;
}
  

///////////////////////////////////////////////////////////////////////////////
//
//  Set the icon path.
//
///////////////////////////////////////////////////////////////////////////////

void Command::iconPath ( const std::string& value )
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	_iconPath = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the icon path.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Command::iconPath() const
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	return _iconPath;
}
