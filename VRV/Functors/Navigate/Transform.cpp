
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant and Perry L. Miller IV.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base callback class for functors that transform the scene.
//
///////////////////////////////////////////////////////////////////////////////

#include "Transform.h"

using namespace VRV::Functors;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Transform::Transform ( 
  Unknown *unknown, 
  Direction *dir, 
  AnalogInput *ai,
  unsigned int id ) : 
  BaseClass ( unknown, id ),
  _dir ( dir ),
  _ai  ( ai ),
  _fi  ( unknown ),
  _wi  ( unknown ),
  _mm  ( unknown )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

Transform::Transform ( const Transform &t ) : 
  BaseClass ( t ),
  _dir ( t._dir ),
  _ai  ( t._ai ),
  _fi  ( t._fi ),
  _wi  ( t._wi ),
  _mm  ( t._mm )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Transform::~Transform()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Update and return the analog input.
//
///////////////////////////////////////////////////////////////////////////////

float Transform::_analog()
{
  (*_ai)();
  return _ai->value();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Update and return the direction.
//
///////////////////////////////////////////////////////////////////////////////

const Direction::Vector &Transform::_direction()
{
  (*_dir)();
  return _dir->vector();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the amount of time the last frame took.
//
///////////////////////////////////////////////////////////////////////////////

float Transform::_frameTime() const
{
  return static_cast < float > ( _fi->frameTime() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the radius of the "world".
//
///////////////////////////////////////////////////////////////////////////////

float Transform::_worldRadius() const
{
  return static_cast < float > ( _wi->worldRadius() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Post multiply the current matrix.
//
///////////////////////////////////////////////////////////////////////////////

void Transform::_postMult ( const Matrix &M )
{
  _mm->postMultiply ( M.get() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Post multiply the current matrix.
//
///////////////////////////////////////////////////////////////////////////////

void Transform::_preMult ( const Matrix &M )
{
  _mm->preMultiply ( M.get() );
}
