
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Menu button.
//
///////////////////////////////////////////////////////////////////////////////

#include "MenuKit/Button.h"
#include "MenuKit/Visitor.h"

#include "Usul/Bits/Bits.h"

using namespace MenuKit;


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructor.
//
///////////////////////////////////////////////////////////////////////////////

Button::Button(): BaseClass(),
_command ( 0x0 ),
_flags ( 0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructor.
//
///////////////////////////////////////////////////////////////////////////////

Button::Button( Usul::Commands::Command* command ): BaseClass(),
_command ( 0x0 ),
_flags ( 0 )
{
  this->command ( command );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

Button::Button ( const Button& b ): BaseClass ( b )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Assignment.
//
///////////////////////////////////////////////////////////////////////////////

Button& Button::operator = ( const Button& b )
{
  BaseClass::operator = ( b );
  return ( *this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Button::~Button()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Accept the visitor.
//
///////////////////////////////////////////////////////////////////////////////

void Button::accept ( Visitor &v )
{
  v.apply ( *this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the checked state.
//
///////////////////////////////////////////////////////////////////////////////

bool Button::checked() const
{
  return Usul::Bits::has <unsigned int, unsigned int> ( this->flags(), Button::CHECKED );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the checked state.
//
///////////////////////////////////////////////////////////////////////////////

void Button::checked ( bool e )
{
  Guard guard ( this->mutex () );
  if ( e )
    this->flags ( Usul::Bits::add <unsigned int, unsigned int>    ( this->flags(), Button::CHECKED ) );
  else
    this->flags ( Usul::Bits::remove <unsigned int, unsigned int> ( this->flags(), Button::CHECKED ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the toggle state.
//
///////////////////////////////////////////////////////////////////////////////

bool Button::toggle() const
{
  return Usul::Bits::has <unsigned int, unsigned int> ( this->flags(), Button::TOGGLE );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the toggle state.
//
///////////////////////////////////////////////////////////////////////////////

void Button::toggle ( bool e )
{
  if ( e )
    this->flags ( Usul::Bits::add    <unsigned int, unsigned int> ( this->flags(), Button::TOGGLE ) );
  else
    this->flags ( Usul::Bits::remove <unsigned int, unsigned int> ( this->flags(), Button::TOGGLE ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the radio state.
//
///////////////////////////////////////////////////////////////////////////////

bool Button::radio() const
{
  return Usul::Bits::has <unsigned int, unsigned int> ( this->flags(), Button::RADIO );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the radio state.
//
///////////////////////////////////////////////////////////////////////////////

void Button::radio ( bool e )
{
  if ( e )
    this->flags ( Usul::Bits::add <unsigned int, unsigned int>    ( this->flags(), Button::RADIO ) );
  else
    this->flags ( Usul::Bits::remove <unsigned int, unsigned int> ( this->flags(), Button::RADIO ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the separator state.
//
///////////////////////////////////////////////////////////////////////////////

bool Button::separator() const
{
  return Usul::Bits::has <unsigned int, unsigned int> ( this->flags(), Button::SEPARATOR );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the separator state.
//
///////////////////////////////////////////////////////////////////////////////

void Button::separator ( bool e )
{
  if ( e )
    this->flags ( Usul::Bits::add    <unsigned int, unsigned int> ( this->flags(), Button::SEPARATOR ) );
  else
    this->flags ( Usul::Bits::remove <unsigned int, unsigned int> ( this->flags(), Button::SEPARATOR ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the command.
//
///////////////////////////////////////////////////////////////////////////////

void Button::command ( Command * command )
{
  Guard guard ( this->mutex () );
  _command = command;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the command.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Commands::Command * Button::command ()
{
  Guard guard ( this->mutex () );
  return _command.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the command.
//
///////////////////////////////////////////////////////////////////////////////

const Usul::Commands::Command * Button::command () const
{
  Guard guard ( this->mutex () );
  return _command.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the flags.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int Button::flags() const
{
  Guard guard ( this->mutex () );
  return _flags;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the flags.
//
///////////////////////////////////////////////////////////////////////////////

void Button::flags ( unsigned int f )
{
  Guard guard ( this->mutex () );
  _flags = f;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the icon filename.
//
///////////////////////////////////////////////////////////////////////////////

void Button::iconFile ( const std::string &f )
{
  if ( _command.valid () )
    _command->iconPath ( f );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the icon filename.
//
///////////////////////////////////////////////////////////////////////////////

std::string Button::iconFile() const
{
  return _command.valid () ? _command->iconPath() : "";
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the text string.
//
///////////////////////////////////////////////////////////////////////////////

void Button::text ( const std::string &t )
{
  if ( _command.valid () )
    _command->text ( t );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the text string.
//
///////////////////////////////////////////////////////////////////////////////

std::string Button::text() const
{
  return _command.valid () ? _command->text() : "";
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the information string.
//
///////////////////////////////////////////////////////////////////////////////

void Button::info ( const std::string &s )
{
  if ( _command.valid () )
    _command->statusTip ( s );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the information string.
//
///////////////////////////////////////////////////////////////////////////////

std::string Button::info() const
{
  return _command.valid () ? _command->statusTip() : "";
}


///////////////////////////////////////////////////////////////////////////////
//
//  Helper command.
//
///////////////////////////////////////////////////////////////////////////////

namespace Helper {

class GenericCommand : public Usul::Commands::Command
{
public:
  typedef Usul::Commands::Command BaseClass;
  typedef Button::ExecuteFunction ExecuteFunctor;
  typedef Button::EnableFunction EnableFunctor;
  typedef GenericCommand ThisType;

  USUL_DECLARE_QUERY_POINTERS  ( GenericCommand );

  GenericCommand ( const std::string& name, ExecuteFunctor functor, Usul::Interfaces::IUnknown * caller = 0x0 ) : 
    BaseClass ( caller ),
    _functor ( functor ),
    _enable()
  {
    this->text ( name );
  }

  GenericCommand ( const std::string& name, ExecuteFunctor functor, EnableFunctor e, Usul::Interfaces::IUnknown * caller = 0x0 ) : 
    BaseClass ( caller ),
    _functor ( functor ),
    _enable ( e )
  {
    this->text ( name );
  }

  virtual Usul::Commands::Command* clone() const { return new ThisType ( *this ); }

protected:

  virtual ~GenericCommand() {}

  /// Execute the command.
  virtual void _execute()
  {
    _functor();
  }


  /// Update the enable state.
  virtual bool updateEnable() const
  {
    return ( _enable ? _enable() : true );
  }

private:
  ExecuteFunctor _functor;
  EnableFunctor _enable;
};

}


///////////////////////////////////////////////////////////////////////////////
//
//  Create a button.
//
///////////////////////////////////////////////////////////////////////////////

Button* Button::create ( const std::string &name, ExecuteFunction f )
{
  Usul::Commands::Command::RefPtr command ( new Helper::GenericCommand ( name, f ) );
  Button::RefPtr button ( new Button ( command.get() ) );
  return button.release();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Create a button.
//
///////////////////////////////////////////////////////////////////////////////

Button* Button::create ( const std::string &name, ExecuteFunction f, EnableFunction e )
{
  Usul::Commands::Command::RefPtr command ( new Helper::GenericCommand ( name, f, e ) );
  Button::RefPtr button ( new Button ( command.get() ) );
  return button.release();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Create a button.
//
///////////////////////////////////////////////////////////////////////////////

Button* Button::createWithIcon ( const std::string &name, const std::string& icon, ExecuteFunction f )
{
  Usul::Commands::Command::RefPtr command ( new Helper::GenericCommand ( name, f ) );
  command->iconPath ( icon );
  Button::RefPtr button ( new Button ( command.get() ) );
  return button.release();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Create a button.
//
///////////////////////////////////////////////////////////////////////////////

Button* Button::createWithIcon ( const std::string &name, const std::string& icon, ExecuteFunction f, EnableFunction e )
{
  Usul::Commands::Command::RefPtr command ( new Helper::GenericCommand ( name, f, e ) );
  command->iconPath ( icon );
  Button::RefPtr button ( new Button ( command.get() ) );
  return button.release();
}
