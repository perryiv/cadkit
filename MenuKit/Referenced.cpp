
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all other classes.
//
///////////////////////////////////////////////////////////////////////////////

#include "Referenced.h"

using namespace MenuKit;


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructor.
//
///////////////////////////////////////////////////////////////////////////////

Referenced::Referenced(): _refCount ( 0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

Referenced::Referenced ( const Referenced &r ) : _refCount ( 0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Assignment.
//
///////////////////////////////////////////////////////////////////////////////

Referenced &Referenced::operator = ( const Referenced &r )
{
  return ( *this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Referenced::~Referenced()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Reference this item.
//
///////////////////////////////////////////////////////////////////////////////

void Referenced::ref()
{
  ++_refCount;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Unreference this item.
//
///////////////////////////////////////////////////////////////////////////////

void Referenced::unref()
{
  if ( 0 == --_refCount )
    delete this;
}


///////////////////////////////////////////////////////////////////////////////
//
//  For use with boost::intrusive_ptr.
//
///////////////////////////////////////////////////////////////////////////////

namespace boost
{
  void intrusive_ptr_add_ref ( MenuKit::Referenced *ptr )
  {
    assert ( ptr );
    ptr->ref();
  }

  void intrusive_ptr_release ( MenuKit::Referenced *ptr )
  {
    assert ( ptr );
    ptr->unref();
  }
};
