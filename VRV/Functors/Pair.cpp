
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant and Perry L. Miller IV.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Functor pair.
//
///////////////////////////////////////////////////////////////////////////////

#include "Pair.h"

using namespace VRV::Functors;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Pair::Pair ( 
  Unknown *unknown, 
  BaseFunctor *c1, 
  BaseFunctor *c2,
  unsigned int id ) : 
  BaseClass ( unknown, id ),
  _c1 ( c1 ),
  _c2 ( c2 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

Pair::Pair ( const Pair &cb ) : BaseClass ( cb ),
  _c1 ( cb._c1 ),
  _c2 ( cb._c2 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Pair::~Pair()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Have the functors do their thing.
//
///////////////////////////////////////////////////////////////////////////////

void Pair::operator()()
{
  if ( _c1.valid() )
    (*_c1)();
  if ( _c2.valid() )
    (*_c2)();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the first functor.
//
///////////////////////////////////////////////////////////////////////////////

void Pair::first ( BaseFunctor *first )
{
  _c1 = first;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the first functor.
//
///////////////////////////////////////////////////////////////////////////////

BaseFunctor * Pair::first ( )
{
  return _c1.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the first functor.
//
///////////////////////////////////////////////////////////////////////////////

const BaseFunctor * Pair::first ( ) const
{
  return _c1.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the second functor.
//
///////////////////////////////////////////////////////////////////////////////

void Pair::second ( BaseFunctor *second )
{
  _c2 = second;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the second functor.
//
///////////////////////////////////////////////////////////////////////////////

BaseFunctor * Pair::second ( )
{
  return _c2.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the second functor.
//
///////////////////////////////////////////////////////////////////////////////

const BaseFunctor * Pair::second ( ) const
{
  return _c2.get();
}
