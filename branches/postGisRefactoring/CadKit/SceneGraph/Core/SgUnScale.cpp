
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  SgUnScale:
//
/////////////////////////////////////////////////////////////////////////////

#include "SgPrecompiled.h"
#include "SgUnScale.h"

#include "Standard/SlPrint.h"

using namespace CadKit;

SG_IMPLEMENT_DYNAMIC_NODE ( SgUnScale, SgTransformation );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgUnScale::SgUnScale() : SgTransformation(),
  _unScaleFlags ( ASSUME_UNIFORM_SCALE )
{
  SL_PRINT2 ( "SgUnScale::SgUnScale(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgUnScale::SgUnScale ( const SgUnScale &unscale ) : SgTransformation ( unscale ),
  _unScaleFlags ( ASSUME_UNIFORM_SCALE )
{
  SL_PRINT2 ( "SgUnScale::SgUnScale(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

SgUnScale::~SgUnScale()
{
  SL_PRINT2 ( "SgUnScale::~SgUnScale(), this = %X\n", this );
}
