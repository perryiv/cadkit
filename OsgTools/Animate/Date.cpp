
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Date class wrapper around boost's date class.
//
///////////////////////////////////////////////////////////////////////////////

#include "OsgTools/Animate/Date.h"

#include <vector>
#include <sstream>

using namespace OsgTools::Animate;

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Date::Date() :
_date()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Date::Date( const std::string& date ) :
_date ( boost::gregorian::from_simple_string ( date ) )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Date::Date ( boost::date_time::special_values value ) : _date ( value )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Date::Date ( const boost::gregorian::date& date ) : _date ( date )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the day.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int Date::day() const
{
  return _date.day();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the month.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int Date::month() const
{
  return _date.month();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the year.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int Date::year() const
{
  return _date.year();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Increment the day.
//
///////////////////////////////////////////////////////////////////////////////

void Date::increment()
{
  boost::gregorian::date_duration dd(1);
  _date = _date + dd;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the date as a string.
//
///////////////////////////////////////////////////////////////////////////////

std::string Date::toString()
{
  return boost::gregorian::to_simple_string(_date);
}


///////////////////////////////////////////////////////////////////////////////
//
//  Is the given date less than this date?
//
///////////////////////////////////////////////////////////////////////////////

bool Date::operator<( const Date& rhs ) const
{
  return this->_toJulian() < rhs._toJulian();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Is the given date greater than this date?
//
///////////////////////////////////////////////////////////////////////////////

bool Date::operator>( const Date& rhs ) const
{
  return this->_toJulian() > rhs._toJulian();
}

bool Date::operator==( const Date& rhs ) const
{
  return this->_toJulian() == rhs._toJulian();
}

bool Date::operator!=(const Date& rhs ) const
{
  return this->_toJulian() != rhs._toJulian();
}

void Date::moveBackNumDays ( unsigned int days )
{
  _date = _date - boost::gregorian::date_duration( days );
}

bool Date::operator<=( const Date& rhs ) const
{
  return this->_toJulian() <= rhs._toJulian();
}

bool Date::operator>=( const Date& rhs ) const
{
  return this->_toJulian() >= rhs._toJulian();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get this date's Julian day value.
//
///////////////////////////////////////////////////////////////////////////////

long Date::_toJulian() const
{
  return _date.julian_day();
}


/// Get the underlying boost date.
boost::gregorian::date& Date::date()
{
  return _date;
}

const boost::gregorian::date& Date::date() const
{
  return _date;
}


void Date::incrementDay()
{
  boost::gregorian::date_duration dd(1);
  _date = _date + dd;
}


void Date::incrementMonth()
{
  boost::gregorian::months one(1);
  _date = _date + one;
}

void Date::incrementYear()
{
  boost::gregorian::years one(1);
  _date = _date + one;
}
