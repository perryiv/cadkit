
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Decision Theater
//  All rights reserved.
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "RLayerGlue.h"

#include "Usul/Pointers/Pointers.h"
#include "Threads/OpenThreads/Mutex.h"
#include "Usul/Threads/Mutex.h"

using namespace DT::Minerva::Glue;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

RLayerGlue::RLayerGlue() : BaseClass(),
_layer ( 0x0 )
{
  Usul::Threads::SetMutexFactory factory ( &Threads::OT::newOpenThreadsMutex );
  _layer = new ::Minerva::Layers::RLayer;
  Usul::Pointers::reference ( _layer );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

RLayerGlue::RLayerGlue( RLayerGlue ^ layer ) : BaseClass( layer )
{
  _layer = new ::Minerva::Layers::RLayer;
  Usul::Pointers::reference ( _layer );

  this->_setProperties( layer );

  this->DrawMode = layer->DrawMode;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

RLayerGlue::~RLayerGlue()
{
  Usul::Pointers::unreference( _layer );
  _layer = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Finalizer.
//
///////////////////////////////////////////////////////////////////////////////

RLayerGlue::!RLayerGlue()
{
  Usul::Pointers::unreference( _layer );
  _layer = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the layer.
//
///////////////////////////////////////////////////////////////////////////////

::Minerva::Layers::Layer* RLayerGlue::layer()
{
  return _layer;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the draw mode.
//
///////////////////////////////////////////////////////////////////////////////

DT::Minerva::Glue::RLayerGlue::Mode RLayerGlue::DrawMode::get()
{
  return static_cast< DT::Minerva::Glue::RLayerGlue::Mode > ( _layer->mode() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the draw mode.
//
///////////////////////////////////////////////////////////////////////////////

void RLayerGlue::DrawMode::set( DT::Minerva::Glue::RLayerGlue::Mode mode )
{
  _layer->mode( static_cast < ::Minerva::Layers::RLayer::Mode > ( mode ) );
}
