
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  OpenGL canvas.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/FOX/Precompiled.h"
#include "GSG/FOX/Canvas.h"

#include "GSG/Core/Config.h"

using namespace GSG;
using namespace GSG::FOX;


//////////////////////////////////////////////////////////////////////////
//
//  Message maps.
//
//////////////////////////////////////////////////////////////////////////

FXDEFMAP ( Canvas ) CanvasMap[] =
{
  // Message type, id, and handler.
  FXMAPFUNC ( SEL_LEFTBUTTONPRESS, 0, Canvas::onLeftBtnPress ),
};

// This class, base class, array of message handlers, size of the array.
FXIMPLEMENT ( Canvas, FXGLCanvas, CanvasMap, ARRAYNUMBER ( CanvasMap ) );


//////////////////////////////////////////////////////////////////////////
//
//  Default constructor (needed for FXIMPLEMENT macro).
//
//////////////////////////////////////////////////////////////////////////

Canvas::Canvas() : FXGLCanvas()
{
  // Do not use this constructor.
  GSG_ASSERT ( false );
  ErrorChecker ( false );
}


//////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
//////////////////////////////////////////////////////////////////////////

Canvas::Canvas ( FXComposite *parent, FXGLVisual *visual ) :
  FXGLCanvas ( parent, visual )
{
  // Empty.
}


//////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
//////////////////////////////////////////////////////////////////////////

Canvas::~Canvas()
{
  // Nothing to delete.
}


//////////////////////////////////////////////////////////////////////////
//
//  Called when the left mouse button is pressed.
//
//////////////////////////////////////////////////////////////////////////

long Canvas::onLeftBtnPress ( FXObject *object, FXSelector selector, void *callData )
{
  ErrorChecker ( 0x0 != callData );

  // Pop this window to the front.
  this->setFocus();

  // Call the base class's function.
  return FXGLCanvas::onLeftBtnPress ( object, selector, callData );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Is it created?
//
///////////////////////////////////////////////////////////////////////////////

bool Canvas::isCreated() const
{
  return ( 0x0 != this->id() );
}
