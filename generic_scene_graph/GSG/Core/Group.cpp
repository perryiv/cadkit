
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A group node.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Group.h"
#include "GSG/Core/Visitor.h"
#include "GSG/Core/PushPop.h"

using namespace GSG;

GSG_IMPLEMENT_ACCEPT_NODE ( Group );
GSG_IMPLEMENT_CLONE  ( Group );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

Group::Group() : Node(), 
  _nodes()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

Group::Group ( const Group &g ) : Node ( g ), 
  _nodes ( g._nodes )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

Group::~Group()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Append the child node.
//
/////////////////////////////////////////////////////////////////////////////

void Group::append ( Node *node )
{
  Lock lock ( this );
  _nodes.insert ( _nodes.end(), Node::ValidPtr ( node ) );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Prepend the child node.
//
/////////////////////////////////////////////////////////////////////////////

void Group::prepend ( Node *node )
{
  Lock lock ( this );
  _nodes.insert ( _nodes.begin(), Node::ValidPtr ( node ) );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Insert the child.
//
/////////////////////////////////////////////////////////////////////////////

void Group::insert ( Nodes::iterator beforeMe, Node *node )
{
  Lock lock ( this );
  _nodes.insert ( beforeMe, Node::ValidPtr ( node ) );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the nodes.
//
/////////////////////////////////////////////////////////////////////////////

Group::Nodes::const_iterator Group::begin() const
{
  Lock lock ( this );
  return _nodes.begin();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the nodes.
//
/////////////////////////////////////////////////////////////////////////////

Group::Nodes::iterator Group::begin()
{
  Lock lock ( this );
  return _nodes.begin();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the nodes.
//
/////////////////////////////////////////////////////////////////////////////

Group::Nodes::const_iterator Group::end() const
{
  Lock lock ( this );
  return _nodes.end();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the nodes.
//
/////////////////////////////////////////////////////////////////////////////

Group::Nodes::iterator Group::end()
{
  Lock lock ( this );
  return _nodes.end();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Update this group.
//
/////////////////////////////////////////////////////////////////////////////

void Group::update()
{
  Lock lock ( this );

  // Call the base class's function first.
  BaseClass::update();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Calculate the bounding sphere.
//
/////////////////////////////////////////////////////////////////////////////

void Group::calculateBoundingSphere()
{
  Lock lock ( this );

  // Accumulate the bounding sphere for all of the nodes.
  Detail::GetBoundOfObjects < BoundingSphere > gbs;
  gbs = std::for_each ( _nodes.begin(), _nodes.end(), gbs );
  this->boundingSphere ( gbs.get() );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Clear (remove) all the children.
//
/////////////////////////////////////////////////////////////////////////////

void Group::clear()
{
  Lock lock ( this );
  _nodes.erase ( _nodes.begin(), _nodes.end() );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Erase (remove) the children indicated by the iterators.
//
/////////////////////////////////////////////////////////////////////////////

void Group::erase ( Group::iterator first, Group::iterator last )
{
  _nodes.erase ( first, last );
}
