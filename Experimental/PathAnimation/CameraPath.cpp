
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2004, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  The camera path class.
//
///////////////////////////////////////////////////////////////////////////////

#include "PathAnimation/CameraPath.h"

#include "Serialize/XML/Deserialize.h"
#include "Serialize/XML/Serialize.h"

#include "Usul/Factory/RegisterCreator.h"
#include "Usul/File/Path.h"
#include "Usul/Strings/Case.h"
#include "Usul/Trace/Trace.h"

SERIALIZE_XML_DECLARE_VECTOR_3_WRAPPER(CameraPath::Triplet);
USUL_FACTORY_REGISTER_CREATOR(CameraPath);

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

CameraPath::CameraPath() : BaseClass ( "Camera Path Document" ),
  _values()
{
  USUL_TRACE_SCOPE;

  this->_addMember ( "values", _values );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

CameraPath::~CameraPath()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Append the camera information.
//
///////////////////////////////////////////////////////////////////////////////

void CameraPath::cameraAppend ( const Usul::Math::Vec3d &eye, const Usul::Math::Vec3d &center, const Usul::Math::Vec3d &up )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  _values.insert ( _values.end(), Triplet ( eye, center, up ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Prepend the camera information.
//
///////////////////////////////////////////////////////////////////////////////

void CameraPath::cameraPrepend ( const Usul::Math::Vec3d &eye, const Usul::Math::Vec3d &center, const Usul::Math::Vec3d &up )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  _values.insert ( _values.begin(), Triplet ( eye, center, up ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Close the path if we can.
//
///////////////////////////////////////////////////////////////////////////////

void CameraPath::closePath()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );

  if ( false == this->canClose() )
    return;

  _values.insert ( _values.end(), _values.front() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Can we close the path?
//
///////////////////////////////////////////////////////////////////////////////

bool CameraPath::canClose() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return ( _values.size() > 1 );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Can we play the animation?
//
///////////////////////////////////////////////////////////////////////////////

bool CameraPath::canPlay() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return ( _values.size() > 1 );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return true if this document can do it.
//
///////////////////////////////////////////////////////////////////////////////

bool CameraPath::canExport ( const std::string &file ) const
{
  return this->canSave ( file );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return true if this document can do it.
//
///////////////////////////////////////////////////////////////////////////////

bool CameraPath::canInsert ( const std::string &file ) const
{
  return this->canSave ( file );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return true if this document can do it.
//
///////////////////////////////////////////////////////////////////////////////

bool CameraPath::canOpen ( const std::string &file ) const
{
  return this->canSave ( file );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return true if this document can do it.
//
///////////////////////////////////////////////////////////////////////////////

bool CameraPath::canSave ( const std::string &file ) const
{
  const std::string ext ( Usul::Strings::lowerCase ( Usul::File::extension ( file ) ) );
  return ( ext == "cpf" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the filters that correspond to what this document can export.
//
///////////////////////////////////////////////////////////////////////////////

CameraPath::Filters CameraPath::filtersExport() const
{
  return this->filtersSave();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the filters that correspond to what this document can insert.
//
///////////////////////////////////////////////////////////////////////////////

CameraPath::Filters CameraPath::filtersInsert() const
{
  return this->filtersSave();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the filters that correspond to what this document can open.
//
//////////////////////////////////////////////////////////////////////////////

CameraPath::Filters CameraPath::filtersOpen() const
{
  return this->filtersSave();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the filters that correspond to what this document can save.
//
///////////////////////////////////////////////////////////////////////////////

CameraPath::Filters CameraPath::filtersSave() const
{
  Filters filters;
  filters.push_back ( Filter ( "Camera Path (*.cpf)", "*.cpf" ) );
  return filters;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Read.
//
///////////////////////////////////////////////////////////////////////////////

void CameraPath::read ( const std::string &file, Unknown *caller, Unknown *progress )
{
  Serialize::XML::deserialize ( file, *this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Write.
//
///////////////////////////////////////////////////////////////////////////////

void CameraPath::write ( const std::string &file, Unknown *caller  ) const
{
  Serialize::XML::serialize ( "CameraPath", *this, file );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Clear all the paths.
//
///////////////////////////////////////////////////////////////////////////////

void CameraPath::clear ( Usul::Interfaces::IUnknown *caller )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  _values.clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the number of cameras.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int CameraPath::size() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _values.size();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the values.
//
///////////////////////////////////////////////////////////////////////////////

void CameraPath::values ( Values &v, bool reverseOrder ) const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );

  if ( true == reverseOrder )
  {
    v.assign ( _values.rbegin(), _values.rend() );
  }
  else
  {
    v.assign ( _values.begin(), _values.end() );
  }
}
