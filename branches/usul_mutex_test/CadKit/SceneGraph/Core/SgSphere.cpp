
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  SgSphere.cpp: Sphere class.
//
/////////////////////////////////////////////////////////////////////////////

#include "SgPrecompiled.h"
#include "SgSphere.h"

#ifndef _CADKIT_USE_PRECOMPILED_HEADERS
# include "Standard/SlPrint.h"
#endif

using namespace CadKit;

SG_IMPLEMENT_DYNAMIC_NODE(SgSphere,SgPrimitive);


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgSphere::SgSphere() : SgPrimitive(),
  _tessellationType ( NO_POLES ),
  _center ( 0.0f, 0.0f, 0.0f ),
  _radius ( 1.0f ),
  _member0 ( 2 ), 
  _member1 ( 1 )
{
  SL_PRINT2 ( "SgSphere::SgSphere(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgSphere::SgSphere ( const SgSphere &copyMe ) : SgPrimitive(),
  _tessellationType ( copyMe._tessellationType ),
  _center ( copyMe._center ),
  _radius ( copyMe._radius ),
  _member0 ( copyMe._member0 ), 
  _member1 ( copyMe._member1 )
{
  SL_PRINT2 ( "SgSphere::SgSphere(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

SgSphere::~SgSphere()
{
  SL_PRINT2 ( "SgSphere::SgSphere(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the number of slices.
//
/////////////////////////////////////////////////////////////////////////////

void SgSphere::setNumSlices ( const SlUint32 &numSlices )
{
  SL_ASSERT ( this && numSlices > 1 );
  SL_ASSERT ( POLES == _tessellationType );
  _member0 = numSlices;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the number of stacks.
//
/////////////////////////////////////////////////////////////////////////////

void SgSphere::setNumStacks ( const SlUint32 &numStacks )
{
  SL_ASSERT ( this && numStacks > 1 );
  SL_ASSERT ( POLES == _tessellationType );
  _member1 = numStacks;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the number of subdivisions.
//
/////////////////////////////////////////////////////////////////////////////

void SgSphere::setNumSubdivisions ( const SlUint32 &numSubdivisions )
{
  SL_ASSERT ( this );
  SL_ASSERT ( NO_POLES == _tessellationType );
  _member1 = numSubdivisions;
}
