
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Animate/TimeSpan.h"

#include "Usul/Factory/RegisterCreator.h"

using namespace Minerva::Core::Animate;

USUL_FACTORY_REGISTER_CREATOR ( TimeSpan );

SERIALIZE_XML_DECLARE_TYPE_WRAPPER ( Minerva::Core::Animate::Date );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

TimeSpan::TimeSpan() : 
BaseClass(),
_firstDate( boost::date_time::min_date_time ),
_lastDate( boost::date_time::max_date_time ),
SERIALIZE_XML_INITIALIZER_LIST
{
  this->_addMember ( "first_date", _firstDate );
  this->_addMember ( "last_date",  _lastDate );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

TimeSpan::~TimeSpan()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the min date.
//
///////////////////////////////////////////////////////////////////////////////

void TimeSpan::firstDate( const Date& date )
{
  Guard guard ( this );
  _firstDate = date;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the min date.
//
///////////////////////////////////////////////////////////////////////////////

Minerva::Core::Animate::Date TimeSpan::firstDate() const
{
  Guard guard ( this );
  return _firstDate;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the max date.
//
///////////////////////////////////////////////////////////////////////////////

void TimeSpan::lastDate( const Date& date )
{
  Guard guard ( this );
  _lastDate = date;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the max date.
//
///////////////////////////////////////////////////////////////////////////////

Minerva::Core::Animate::Date TimeSpan::lastDate() const
{
  Guard guard ( this );
  return _lastDate;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the name of the span.
//
///////////////////////////////////////////////////////////////////////////////

std::string TimeSpan::name () const
{
  return this->firstDate().toString() + "->" + this->lastDate().toString();
}
