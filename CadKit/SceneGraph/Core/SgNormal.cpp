
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  SgNormal.cpp: 3D coordinates.
//
/////////////////////////////////////////////////////////////////////////////

#include "SgPrecompiled.h"
#include "SgNormal.h"

#include "Standard/SlPrint.h"

using namespace CadKit;

SG_IMPLEMENT_DYNAMIC_NODE ( SgNormal, SgNode );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgNormal::SgNormal() : SgNode()
{
  SL_PRINT2 ( "SgNormal::SgNormal(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

SgNormal::~SgNormal()
{
  SL_PRINT2 ( "SgNormal::~SgNormal(), this = %X\n", this );
  _normals.clear();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Does the given node have the same visible properties?
//
/////////////////////////////////////////////////////////////////////////////

bool SgNormal::isEqualVisibleProperties ( const SgNode &node ) const
{
  SL_ASSERT ( this );

  // Make sure we have the right type.
  if ( false == node.isOfType ( SgNormal::getClassType() ) )
    return false;

  // Typecast.
  SgNormal &n = (SgNormal &) node;

  // Are they the same?
  return ( _normals.isEqual ( n._normals ) && SgNode::isEqualVisibleProperties ( node ) );
}
