
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2005, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  XML tree root class.
//
///////////////////////////////////////////////////////////////////////////////

#include "XmlTree/Root.h"
#include "XmlTree/Detail/RootImpl.h"

#include "xercesc/util/PlatformUtils.hpp"

using namespace XmlTree;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Root::Root() : BaseClass(),
  _mutex(),
  _root ( new XmlTree::Detail::RootImpl )
{
  xercesc::XMLPlatformUtils::Initialize();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Root::Root ( const std::string &file ) : BaseClass(),
  _mutex(),
  _root ( new XmlTree::Detail::RootImpl )
{
  xercesc::XMLPlatformUtils::Initialize();
  this->load ( file );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

Root::~Root()
{
  delete _root;
  xercesc::XMLPlatformUtils::Terminate();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Load the file.
//
///////////////////////////////////////////////////////////////////////////////

void Root::load ( const std::string &file )
{
  Guard guard ( _mutex );
  _root->load ( file );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Write to file.
//
///////////////////////////////////////////////////////////////////////////////

void Root::write ( const std::string &file )
{
  Guard guard ( _mutex );
  _root->write ( file );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Clear the tree.
//
///////////////////////////////////////////////////////////////////////////////

void Root::clear()
{
  Guard guard ( _mutex );
  _root->clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the node.
//
///////////////////////////////////////////////////////////////////////////////

void Root::node ( const std::string &path, char delim, unsigned int value )
{
  Guard guard ( _mutex );
  _root->node ( path, delim, value );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the node.
//
///////////////////////////////////////////////////////////////////////////////

void Root::node ( const std::string &path, char delim, int value )
{
  Guard guard ( _mutex );
  _root->node ( path, delim, value );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the node.
//
///////////////////////////////////////////////////////////////////////////////

void Root::node ( const std::string &path, char delim, bool value )
{
  Guard guard ( _mutex );
  _root->node ( path, delim, value );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the node.
//
///////////////////////////////////////////////////////////////////////////////

void Root::node ( const std::string &path, char delim, const std::string &value )
{
  Guard guard ( _mutex );
  _root->node ( path, delim, value );
}
