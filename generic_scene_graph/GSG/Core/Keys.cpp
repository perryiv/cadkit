
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Keeps track of the keyboard state.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Keys.h"

using namespace GSG;

GSG_IMPLEMENT_CLONE ( Keys );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

Keys::Keys() : Referenced(),
  _s()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

Keys::Keys ( const Keys &k ) : Referenced ( k ),
  _s ( k._s )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

Keys::~Keys()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set this key as "down".
//
/////////////////////////////////////////////////////////////////////////////

void Keys::down ( UnsignedInteger c )
{
  _s[c] = Keys::DOWN;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set this key as "up".
//
/////////////////////////////////////////////////////////////////////////////

void Keys::up ( UnsignedInteger c )
{
  _s[c] = Keys::UP;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the state of the key.
//
/////////////////////////////////////////////////////////////////////////////

Keys::State Keys::state ( UnsignedInteger c ) const
{
  States::const_iterator i = _s.find ( c );
  return ( ( _s.end() == i ) ? Keys::UNKNOWN : i->second );
}
