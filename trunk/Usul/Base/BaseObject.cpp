
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Convenient base class.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Base/BaseObject.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Trace/Trace.h"

using namespace Usul::Base;

USUL_IMPLEMENT_TYPE_ID ( BaseObject );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

BaseObject::BaseObject() : BaseClass(),
  _mutex()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

BaseObject::BaseObject ( const BaseObject &m ) : BaseClass ( m ),
  _mutex()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Assignment.
//
///////////////////////////////////////////////////////////////////////////////

BaseObject &BaseObject::operator = ( const BaseObject &m )
{
  USUL_TRACE_SCOPE;
  return *this;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

BaseObject::~BaseObject()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &BaseObject::_destroy ), "2946393115" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy the object.
//
///////////////////////////////////////////////////////////////////////////////

void BaseObject::_destroy()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the mutex.
//
///////////////////////////////////////////////////////////////////////////////

BaseObject::Mutex &BaseObject::mutex() const
{
  USUL_TRACE_SCOPE;
  return _mutex;
}
