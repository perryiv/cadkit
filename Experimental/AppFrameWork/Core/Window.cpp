
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all windows.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Core/Group.h"

#include "Usul/Bits/Bits.h"

using namespace AFW::Core;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Window::Window ( const std::string &text, Icon *icon ) : BaseClass(),
  _flags   ( DIRTY ),
  _parent  ( 0x0 ),
  _icon    ( icon ),
  _text    ( text ),
  _commands(),
  _updates ()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Window::~Window()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

void Window::dirty ( bool state )
{
  const unsigned int bit ( Window::DIRTY );
  if ( state )
  {
    _flags = Usul::Bits::add ( _flags, bit );

    // Set parent as dirty too.
    if ( _parent )
      _parent->dirty ( true );
  }
  else
  {
    _flags = Usul::Bits::remove ( _flags, bit );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

bool Window::dirty() const
{
  const unsigned int bit ( Window::DIRTY );
  return Usul::Bits::has ( _flags, bit );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the parent.
//
///////////////////////////////////////////////////////////////////////////////

const Group *Window::parent() const
{
  return _parent;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the parent.
//
///////////////////////////////////////////////////////////////////////////////

Group *Window::parent()
{
  return _parent;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the text.
//
///////////////////////////////////////////////////////////////////////////////

const std::string &Window::text() const
{
  return _text;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the text.
//
///////////////////////////////////////////////////////////////////////////////

void Window::text ( const std::string &t )
{
  _text = t;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Append an action.
//
///////////////////////////////////////////////////////////////////////////////

void Window::append ( AFW::Actions::CommandAction *c )
{
  _commands.push_back ( c );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Append an action.
//
///////////////////////////////////////////////////////////////////////////////

void Window::append ( AFW::Conditions::Condition *c, AFW::Actions::UpdateAction *u )
{
  _updates.push_back ( UpdatePair ( c, u ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the parent.
//
///////////////////////////////////////////////////////////////////////////////

void Window::_setParent ( Group *parent )
{
  _parent = parent;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the icon.
//
///////////////////////////////////////////////////////////////////////////////

const AFW::Core::Icon *Window::icon() const
{
  return _icon.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the icon.
//
///////////////////////////////////////////////////////////////////////////////

AFW::Core::Icon *Window::icon()
{
  return _icon.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the actions.
//
///////////////////////////////////////////////////////////////////////////////

Window::CommandActionsItr Window::commandsBegin()
{
  return _commands.begin();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the actions.
//
///////////////////////////////////////////////////////////////////////////////

Window::CommandActionsConstItr Window::commandsBegin() const
{
  return _commands.begin();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the actions.
//
///////////////////////////////////////////////////////////////////////////////

Window::CommandActionsItr Window::commandsEnd()
{
  return _commands.end();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the actions.
//
///////////////////////////////////////////////////////////////////////////////

Window::CommandActionsConstItr Window::commandsEnd() const
{
  return _commands.end();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the actions.
//
///////////////////////////////////////////////////////////////////////////////

Window::UpdatePairsItr Window::updatesBegin()
{
  return _updates.begin();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the actions.
//
///////////////////////////////////////////////////////////////////////////////

Window::UpdatePairsConstItr Window::updatesBegin() const
{
  return _updates.begin();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the actions.
//
///////////////////////////////////////////////////////////////////////////////

Window::UpdatePairsItr Window::updatesEnd()
{
  return _updates.end();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the actions.
//
///////////////////////////////////////////////////////////////////////////////

Window::UpdatePairsConstItr Window::updatesEnd() const
{
  return _updates.end();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Call the actions.
//
///////////////////////////////////////////////////////////////////////////////

void Window::callCommandActions ( Window *window, Usul::Base::Referenced *data )
{
  for ( CommandActionsItr i = _commands.begin(); i != _commands.end(); ++i )
  {
    CommandAction::RefPtr command ( *i );
    if ( command.valid() )
    {
      command->execute ( window, data );
    }
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Call the actions.
//
///////////////////////////////////////////////////////////////////////////////

void Window::callUpdateActions ( Window *window, Usul::Base::Referenced *data )
{
  for ( UpdatePairsItr i = _updates.begin(); i != _updates.end(); ++i )
  {
    UpdatePair update ( *i );
    AFW::Conditions::Condition::RefPtr condition ( update.first );
    AFW::Actions::UpdateAction::RefPtr action ( update.second );
    if ( condition.valid() && action.valid() )
    {
      if ( condition->evaluate ( window, data ) )
        action->execute ( window, data );
    }
  }
}
