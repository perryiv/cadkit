
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2005, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Classes for attribute wrappers.
//
///////////////////////////////////////////////////////////////////////////////

#include "Attribute.h"
#include "Constants.h"

#include "Usul/Functions/GUID.h"
#include "Usul/Trace/Trace.h"

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( BaseAttribute, BaseAttribute::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor
//
///////////////////////////////////////////////////////////////////////////////

BaseAttribute::BaseAttribute ( const std::string &name, const std::string &guid ) : BaseClass(),
  _guid ( guid )
{
  USUL_TRACE_SCOPE;

  // Set the name.
  BaseClass::name ( name );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

BaseAttribute::~BaseAttribute()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query the interfaces
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *BaseAttribute::queryInterface ( unsigned long iid )
{
  USUL_TRACE_SCOPE;
  switch ( iid )
  {
  case Usul::Interfaces::ILayer::IID:
    return static_cast < Usul::Interfaces::ILayer* > ( this );
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the guid.
//
///////////////////////////////////////////////////////////////////////////////

std::string BaseAttribute::guid() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _guid;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the name.
//
///////////////////////////////////////////////////////////////////////////////

std::string BaseAttribute::name() const
{
  USUL_TRACE_SCOPE;
  return BaseClass::name();
}
