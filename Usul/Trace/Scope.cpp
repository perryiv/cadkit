
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Class for Scopeing when entering and leaving a scope.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Trace/Scope.h"
#include "Usul/Trace/Print.h"
#include "Usul/System/Clock.h"
#include "Usul/Threads/ThreadId.h"

#include <iostream>
#include <sstream>

using namespace Usul::Trace;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Scope::Scope ( const void *object, const std::string &n ) : 
  _name   ( n ), 
  _object ( object )
{
  this->_begin();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Scope::Scope ( const std::string &n ) : 
  _name   ( n ), 
  _object ( 0x0 )
{
  this->_begin();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Scope::~Scope()
{
  this->_end();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Print the beginning of a scope.
//
///////////////////////////////////////////////////////////////////////////////

void Scope::_begin() const
{
  std::ostringstream out;

  out << "<function";

  if ( 0x0 != _object )
    out << " object=\"" << _object << "\"";

  out << " name=\"" << _name << "\"";
  out << " time=\"" << Usul::System::Clock::milliseconds() << "\"";
  out << " thread=\"" << Usul::Threads::currentThreadId() << "\"";
  out << ">\n";

  Usul::Trace::Print::execute ( out.str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Print the end of a scope.
//
///////////////////////////////////////////////////////////////////////////////

void Scope::_end() const
{
  Usul::Trace::Print::execute ( "</function>\n" );
}
