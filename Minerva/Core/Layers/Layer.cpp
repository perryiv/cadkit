
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Layers/Layer.h"

#include "osg/Group"
#include "osg/MatrixTransform"

#include <algorithm>
#include <functional>

using namespace Minerva::Core::Layers;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Layer::Layer() : BaseClass(),
_mutex(),
_name( "Layer" ),
_layerID ( 0 ),
_primaryKeyColumn( "id" ),
_tablename(),
_labelColumn(),
_query(),
_renderBin ( 0 ),
_zOffset ( 0.0 ),
_dataObjects(),
_connection(),
_colorFunctor( 0x0 ),
_legendObject ( new LegendObject ),
_legendText( "" ),
_showLabel ( false ),
_shown ( true ),
_labelColor( 0.0, 0.0, 0.0, 1.0 ),
_labelZOffset( 1000.0 ),
_labelSize ( 25.0f ),
_colorColumn()
{
  static unsigned int layerID ( 0 );
  _layerID = ++layerID;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Layer::~Layer()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the layer id.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::layerID( unsigned int id )
{
  Guard guard( _mutex );
  _layerID = id;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the layer id.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int Layer::layerID() const
{
  return _layerID;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the connection.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::connection ( Minerva::Core::DB::Connection *connection )
{
  Guard guard( _mutex );
  _connection = connection;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the connection.
//
///////////////////////////////////////////////////////////////////////////////

Minerva::Core::DB::Connection* Layer::connection ()
{
  Guard guard( _mutex );
  return _connection;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the tablename.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::tablename( const std::string& table )
{
  Guard guard( _mutex );
  _tablename = table;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the tablename.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::tablename() const
{
  return _tablename;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label column.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::labelColumn( const std::string& column )
{
  Guard guard( _mutex );
  _labelColumn = column;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the label column.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::labelColumn() const
{
  return _labelColumn;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the render bin.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::renderBin( unsigned int bin )
{
  Guard guard( _mutex );
  _renderBin = bin;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the render bin.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int Layer::renderBin( ) const
{
  return _renderBin;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build the scene.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::buildScene( osg::Group* parent )
{
  Guard guard( _mutex );
  //std::for_each( _dataObjects.begin(), _dataObjects.end(), std::mem_fun( &DataObject::buildScene) );

  for( DataObjects::iterator iter = _dataObjects.begin(); iter != _dataObjects.end(); ++iter )
  {
    parent->addChild( (*iter)->buildScene() );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the query for data.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::query ( const std::string& query )
{
  Guard guard( _mutex );
  _query = query;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the query for data.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::query ( ) const
{
  return _query;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add a data object.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::_addDataObject ( Minerva::Core::DataObjects::DataObject *dataObject )
{
  _dataObjects.push_back( dataObject );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Clear all the data objects.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::_clearDataObjects ()
{
  _dataObjects.clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get all the data objects.
//
///////////////////////////////////////////////////////////////////////////////

Layer::DataObjects& Layer::_getDataObjects()
{
  return _dataObjects;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Does this layer contain temporal data?
//
///////////////////////////////////////////////////////////////////////////////

bool Layer::isTemporal() const
{
  return false;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color functor.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::colorFunctor( Minerva::Core::Functors::BaseColorFunctor *colorFunctor )
{
  _colorFunctor = colorFunctor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color functor.
//
///////////////////////////////////////////////////////////////////////////////

Minerva::Core::Functors::BaseColorFunctor * Layer::colorFunctor()
{
  return _colorFunctor.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color functor.
//
///////////////////////////////////////////////////////////////////////////////

const Minerva::Core::Functors::BaseColorFunctor * Layer::colorFunctor() const
{
  return _colorFunctor.get();
}


// This is lame...need to find a better way...
void Layer::setDataMembers ( Layer * layer )
{
  this->_layerID = layer->_layerID;
  this->_tablename = layer->_tablename;
  this->_labelColumn = layer->_labelColumn;
  this->_query = layer->_query;
  this->_renderBin = layer->_renderBin;
  this->_zOffset = layer->_zOffset;
  this->_connection = layer->_connection;
  this->_colorFunctor = layer->_colorFunctor;
  this->legendText ( layer->legendText() );
  this->_showLabel = layer->_showLabel;
  this->_shown = layer->_shown;
  this->_labelColor = layer->_labelColor;
  this->_labelZOffset = layer->_labelZOffset;
  this->_labelSize = layer->_labelSize;
  this->_colorColumn = layer->_colorColumn;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the z offset.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::zOffset( float f )
{
  _zOffset = f;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the z offset.
//
///////////////////////////////////////////////////////////////////////////////

float Layer::zOffset( ) const
{
  return _zOffset;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the legend object.
//
///////////////////////////////////////////////////////////////////////////////

OsgTools::Legend::LegendObject* Layer::legendObject()
{
  return _legendObject.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the legend text.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::legendText( const std::string& text )
{
  if( 0x0 == this->legendObject()->text() )
    this->legendObject()->text( new OsgTools::Legend::Text );
  this->legendObject()->text()->text ( text );
  _legendText = text;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the legend text.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::legendText() const
{
  return _legendText;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the show label.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::showLabel( bool b )
{
  _showLabel = b;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the show label.
//
///////////////////////////////////////////////////////////////////////////////

bool Layer::showLabel() const
{
  return _showLabel;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the show label.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::showLayer( bool b )
{
  _shown = b;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the show label.
//
///////////////////////////////////////////////////////////////////////////////

bool Layer::showLayer() const
{
  return _shown;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label color.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::labelColor( const osg::Vec4& color )
{
  _labelColor = color;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the label color.
//
///////////////////////////////////////////////////////////////////////////////

const osg::Vec4& Layer::labelColor() const
{
  return _labelColor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label z offset.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::labelZOffset( float offset )
{
  _labelZOffset = offset;
}


///////////////////////////////////////////////////////////////////////////////
//
// Get the label z offset.
//
///////////////////////////////////////////////////////////////////////////////

float Layer::labelZOffset() const
{
  return _labelZOffset;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color column.
//
///////////////////////////////////////////////////////////////////////////////

void  Layer::colorColumn( const std::string& column )
{
  _colorColumn = column;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color column.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::colorColumn() const
{
  return _colorColumn;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color.
//
///////////////////////////////////////////////////////////////////////////////

osg::Vec4 Layer::_color ( const pqxx::result::const_iterator& iter )
{
  osg::Vec4 color( 0.0, 0.0, 0.0, 1.0 );

  try
  {
    if( !this->colorColumn().empty() )
    {
      std::string column ( this->colorColumn() );
      double fieldValue = iter[ column.c_str() ].as < double > ();
      color = (*this->colorFunctor())(fieldValue);
    }
    else
    {
      color = (*this->colorFunctor())( 0.0 );
    }
  }
  catch ( const std::exception& e )
  {
    std::cout << "Error 2909352868: " << e.what() << std::endl;
  }

  return color;
}


///////////////////////////////////////////////////////////////////////////////
//
// Get the number of data objects in this layer.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int Layer::number() const
{
  return _dataObjects.size();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Label the data object.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::_labelDataObject ( Minerva::Core::DataObjects::DataObject* dataObject )
{
  // If we have a column to use for a label.
  if( this->showLabel() && !this->labelColumn().empty() )
  {
    std::string value ( this->connection()->getColumnDataString( dataObject->tableName(), dataObject->rowId(), this->labelColumn() ) );

    dataObject->label( value );
    dataObject->labelColor( this->labelColor() );

    osg::Vec3 center ( dataObject->geometry()->getCenter( 0.0, 0.0, this->labelZOffset() ) );
    dataObject->labelPosition( center );

    dataObject->labelSize( _labelSize );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the label size.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::labelSize( float size )
{
  _labelSize = size;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the label size.
//
///////////////////////////////////////////////////////////////////////////////

float Layer::labelSize() const
{
  return _labelSize;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the name.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::name( const std::string& name )
{
  _name = name;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the name.
//
///////////////////////////////////////////////////////////////////////////////

const std::string&  Layer::name() const
{
  return _name;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the default query.
//
///////////////////////////////////////////////////////////////////////////////

std::string Layer::defaultQuery() const
{
  // Get the geometry colomn.
  const std::string geomColumn ( this->geometryColumn() );

  // Build the query.
  std::ostringstream query;
  query << "SELECT " << this->primaryKeyColumn() << " as id, srid(" << geomColumn << ") as srid, asBinary(" << geomColumn << ") as geom";
  if ( this->colorColumn().size() > 0 )
  {
    query << ", " << this->colorColumn();
  }
  
  query << " FROM " << this->tablename( );
  return query.str();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the primary key column.
//
///////////////////////////////////////////////////////////////////////////////

void Layer::primaryKeyColumn( const std::string& value )
{
  _primaryKeyColumn = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the primary key column.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Layer::primaryKeyColumn() const
{
  return _primaryKeyColumn;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the geometry column name.
//
///////////////////////////////////////////////////////////////////////////////

std::string Layer::geometryColumn() const
{
  return "geom";
}
