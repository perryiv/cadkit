
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A class that represent a viewport.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _GENERIC_SCENE_GRAPH_CORE_VIEWPORT_CLASS_H_
#define _GENERIC_SCENE_GRAPH_CORE_VIEWPORT_CLASS_H_


namespace GSG {
namespace Detail {


template
<
  class LocationType_,
  class SizeType_
>
class Viewport
{
public:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Useful typedefs.
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef LocationType_ LocationType;
  typedef SizeType_ SizeType;


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  explicit Viewport() :
    _x ( 0 ),
    _y ( 0 ),
    _w ( 0 ),
    _h ( 0 )
  {
    // Empty.
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Copy constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Viewport ( const Viewport &v ) :
    _x ( v._x ),
    _y ( v._y ),
    _w ( v._w ),
    _h ( v._h )
  {
    // Empty.
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Viewport ( LocationType x, LocationType y, SizeType w, SizeType h ) :
    _x ( x ),
    _y ( y ),
    _w ( w ),
    _h ( h )
  {
    // Empty.
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Is the viewport valid?
  //
  /////////////////////////////////////////////////////////////////////////////

  bool valid() const
  {
    return 
      this->x()      >= 0 && 
      this->y()      >= 0 &&
      this->width()  >= 0 && 
      this->height() >= 0;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set x.
  //
  /////////////////////////////////////////////////////////////////////////////

  const LocationType &x() const
  {
    return _x; 
  }
  LocationType &x()
  {
    return _x; 
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set y.
  //
  /////////////////////////////////////////////////////////////////////////////

  const LocationType &y() const
  {
    return _y; 
  }
  LocationType &y()
  {
    return _y; 
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set width.
  //
  /////////////////////////////////////////////////////////////////////////////

  const SizeType &width() const
  {
    return _w; 
  }
  SizeType &width()
  {
    return _w; 
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set height.
  //
  /////////////////////////////////////////////////////////////////////////////

  const SizeType &height() const
  {
    return _h; 
  }
  SizeType &height()
  {
    return _h; 
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set the viewport.
  //
  /////////////////////////////////////////////////////////////////////////////

  void set ( LocationType x, LocationType y, SizeType w, SizeType h )
  {
    _x = x;
    _y = y;
    _w = w;
    _h = h;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Assignment.
  //
  /////////////////////////////////////////////////////////////////////////////

  Viewport &operator = ( const Viewport &rhs )
  {
    _x = rhs._x;
    _y = rhs._y;
    _w = rhs._w;
    _h = rhs._h;
    return *this;
  }

protected:

  LocationType _x;
  LocationType _y;
  SizeType _w;
  SizeType _h;
};


}; // namespace Detail
}; // namespace GSG


#endif // _GENERIC_SCENE_GRAPH_CORE_VIEWPORT_CLASS_H_
