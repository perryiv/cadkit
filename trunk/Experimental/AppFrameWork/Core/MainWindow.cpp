
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Main window class.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Core/MainWindow.h"
#include "AppFrameWork/Core/Application.h"
#include "AppFrameWork/Core/Define.h"
#include "Usul/Bits/Bits.h"

#include <iostream>

using namespace AFW::Core;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

MainWindow::MainWindow() : BaseClass(),
  _menuBar ( 0x0 ),
  _flags   ( DIRTY )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

MainWindow::~MainWindow()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build a default GUI.
//
///////////////////////////////////////////////////////////////////////////////

void MainWindow::buildDefault()
{
  // Safely...
  try
  {
    this->_buildDefault();
  }

  // Catch exceptions.
  AFW_CATCH_BLOCK ( "2275617693", "2075124085" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build a default GUI.
//
///////////////////////////////////////////////////////////////////////////////

void MainWindow::_buildDefault()
{
  this->menuBar ( new AFW::Menus::MenuBar );
  this->menuBar()->buildDefault();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

void MainWindow::dirty ( bool state )
{
  const unsigned int bit ( MainWindow::DIRTY );
  if ( state )
  {
    _flags = Usul::Bits::add ( _flags, bit );

    // Set application as dirty too.
    AFW::Core::Application::instance().dirty ( true );
  }
  else
  {
    _flags = Usul::Bits::remove ( _flags, bit );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

bool MainWindow::dirty() const
{
  const unsigned int bit ( MainWindow::DIRTY );
  return Usul::Bits::has ( _flags, bit );
}
