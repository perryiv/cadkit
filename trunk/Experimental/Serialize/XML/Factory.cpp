
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Serialization factory class.
//
///////////////////////////////////////////////////////////////////////////////

#include "Serialize/XML/Factory.h"

using namespace Serialize::XML;


///////////////////////////////////////////////////////////////////////////////
//
//  Singelton instance.
//
///////////////////////////////////////////////////////////////////////////////

Factory *Factory::_instance = 0x0;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor
//
///////////////////////////////////////////////////////////////////////////////

Factory::Factory() : _creators()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

Factory::~Factory()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the single instance.
//
///////////////////////////////////////////////////////////////////////////////

Factory &Factory::instance()
{
  if ( 0x0 == _instance )
  {
    _instance = new Factory;
  }
  return *_instance;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the single instance.
//
///////////////////////////////////////////////////////////////////////////////

void Factory::instance ( Factory *f )
{
  if ( 0x0 != _instance )
  {
    delete _instance;
  }
  _instance = f;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add a creator.
//
///////////////////////////////////////////////////////////////////////////////

void Factory::add ( BaseCreator *c )
{
  if ( 0x0 != c )
  {
    _creators.insert ( Creators::value_type ( c->name(), BaseCreator::ValidRefPtr ( c ) ) );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Remove a creator.
//
///////////////////////////////////////////////////////////////////////////////

void Factory::remove ( const std::string &name )
{
  _creators.erase ( name );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return a newly created object, or null.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Base::Referenced *Factory::create ( const std::string &name )
{
  Creators::iterator i = _creators.find ( name );
  if ( _creators.end() == i )
  {
    return 0x0;
  }
  BaseCreator &creator = *(i->second);
  return creator();
}
