
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant and Perry L. Miller IV.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Identity matrix functor.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Functors/Interaction/Matrix/IdentityMatrix.h"
#include "Usul/Trace/Trace.h"

using namespace Usul::Functors::Interaction::Matrix;

USUL_IMPLEMENT_TYPE_ID ( IdentityMatrix );


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructor.
//
///////////////////////////////////////////////////////////////////////////////

IdentityMatrix::IdentityMatrix ( Unknown *caller, const std::string &name ) : BaseClass ( caller, name )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructors.
//
///////////////////////////////////////////////////////////////////////////////

IdentityMatrix::IdentityMatrix ( const IdentityMatrix &cb ) : BaseClass ( cb )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructors.
//
///////////////////////////////////////////////////////////////////////////////

IdentityMatrix::~IdentityMatrix()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Update the matrix.
//
///////////////////////////////////////////////////////////////////////////////

void IdentityMatrix::operator()()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  _matrix.identity(); // Probably already is identity...
}
