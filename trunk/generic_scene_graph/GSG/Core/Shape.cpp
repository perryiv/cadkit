
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A shape node.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Shape.h"
#include "GSG/Core/Attributes.h"
#include "GSG/Core/Visitor.h"
#include "GSG/Core/PushPop.h"

using namespace GSG;

GSG_IMPLEMENT_ACCEPT_NODE ( Shape );
GSG_IMPLEMENT_CLONE  ( Shape );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

Shape::Shape() : Node(), 
  _primitives(),
  _vb ( UNKNOWN ),
  _nb ( UNKNOWN ),
  _cb ( UNKNOWN ),
  _attributes ( 0x0 )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

Shape::Shape ( const Shape &s ) : Node ( s ), 
  _primitives ( s._primitives ),
  _vb ( s._vb ),
  _nb ( s._nb ),
  _cb ( s._cb ),
  _attributes ( s._attributes )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

Shape::~Shape()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Append the primitive.
//
/////////////////////////////////////////////////////////////////////////////

void Shape::append ( Primitive *prim )
{
  Lock lock ( this );
  _primitives.insert ( _primitives.end(), Primitive::ValidPtr ( prim ) );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Prepend the primitive.
//
/////////////////////////////////////////////////////////////////////////////

void Shape::prepend ( Primitive *prim )
{
  Lock lock ( this );
  _primitives.insert ( _primitives.begin(), Primitive::ValidPtr ( prim ) );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Insert the child.
//
/////////////////////////////////////////////////////////////////////////////

void Shape::insert ( Primitives::iterator beforeMe, Primitive *prim )
{
  Lock lock ( this );
  _primitives.insert ( beforeMe, Primitive::ValidPtr ( prim ) );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the binding.
//
/////////////////////////////////////////////////////////////////////////////

void Shape::vertexBinding ( Binding vb )
{
  Lock lock ( this );
  _vb = vb;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the binding.
//
/////////////////////////////////////////////////////////////////////////////

void Shape::normalBinding ( Binding nb )
{
  Lock lock ( this );
  _nb = nb;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the binding.
//
/////////////////////////////////////////////////////////////////////////////

void Shape::colorBinding ( Binding cb )
{
  Lock lock ( this );
  _cb = cb;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the binding.
//
/////////////////////////////////////////////////////////////////////////////

Shape::Binding Shape::vertexBinding() const
{
  Lock lock ( this );
  return _vb;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the binding.
//
/////////////////////////////////////////////////////////////////////////////

Shape::Binding Shape::normalBinding() const
{
  Lock lock ( this );
  return _nb;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the binding.
//
/////////////////////////////////////////////////////////////////////////////

Shape::Binding Shape::colorBinding() const
{
  Lock lock ( this );
  return _cb;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the attributes.
//
/////////////////////////////////////////////////////////////////////////////

const Attributes *Shape::attributes() const
{
  Lock lock ( this );
  return _attributes;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Get the attributes.
//
/////////////////////////////////////////////////////////////////////////////

Attributes *Shape::attributes()
{
  Lock lock ( this );
  return _attributes;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the attributes.
//
/////////////////////////////////////////////////////////////////////////////

void Shape::attributes ( Attributes *a )
{
  Lock lock ( this );
  _attributes = a;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the primitives.
//
/////////////////////////////////////////////////////////////////////////////

Shape::Primitives::const_iterator Shape::begin() const
{
  Lock lock ( this );
  return _primitives.begin();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the primitives.
//
/////////////////////////////////////////////////////////////////////////////

Shape::Primitives::iterator Shape::begin()
{
  Lock lock ( this );
  return _primitives.begin();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the primitives.
//
/////////////////////////////////////////////////////////////////////////////

Shape::Primitives::const_iterator Shape::end() const
{
  Lock lock ( this );
  return _primitives.end();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Iterators to the primitives.
//
/////////////////////////////////////////////////////////////////////////////

Shape::Primitives::iterator Shape::end()
{
  Lock lock ( this );
  return _primitives.end();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Update this shape.
//
/////////////////////////////////////////////////////////////////////////////

void Shape::update()
{
  Lock lock ( this );

  // Call the base class's function first.
  BaseClass::update();
}


/////////////////////////////////////////////////////////////////////////////
//
//  Calculate the bounding sphere.
//
/////////////////////////////////////////////////////////////////////////////

void Shape::calculateBoundingSphere()
{
  Lock lock ( this );

  // Accumulate the bounding sphere for all of the primitives.
  Detail::GetBoundOfObjects < BoundingSphere > gbs;
  gbs = std::for_each ( _primitives.begin(), _primitives.end(), gbs );
  this->boundingSphere ( gbs.get() );
}
