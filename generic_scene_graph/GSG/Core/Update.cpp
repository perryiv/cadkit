
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  The updating class.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Update.h"
#include "GSG/Core/Transform.h"
#include "GSG/Core/Lod.h"
#include "GSG/Core/Camera.h"
#include "GSG/Core/Shape.h"

using namespace GSG;

GSG_IMPLEMENT_CLONE ( Update );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Update::Update() : Visitor()
{
  // Empty.
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

Update::Update ( const Update &r ) : Visitor ( r )
{
  // Empty.
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Update::~Update()
{
  // Empty.
}


///////////////////////////////////////////////////////////////////////////////
//
//  The visit functions.
//
///////////////////////////////////////////////////////////////////////////////

GSG_DEFINE_DELEGATING_VISIT_NODE_FUNCTIONS ( Update, _update );


///////////////////////////////////////////////////////////////////////////////
//
//  Update the node.
//
///////////////////////////////////////////////////////////////////////////////

void Update::_update ( Node &n )
{
  Lock lock ( this );
  n.update();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Update the group.
//
///////////////////////////////////////////////////////////////////////////////

void Update::_update ( Group &g )
{
  Lock lock ( this );
  this->_traverse ( g ); // Traverse first.
  this->_update ( static_cast < Node & > ( g ) );
}
