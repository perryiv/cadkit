
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Smart-pointer that registers itself as a delete-listener of the object.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _USUL_WEAK_POINTER_CLASS_H_
#define _USUL_WEAK_POINTER_CLASS_H_

#include "Usul/Errors/Assert.h"
#include "Usul/Interfaces/IDeleteListener.h"
#include "Usul/Interfaces/IDeleteNotify.h"


namespace Usul {
namespace Pointers {


template < class T > class WeakPointer : public Usul::Interfaces::IDeleteListener
{
public:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Typedefs.
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef WeakPointer < T > ThisType;
  typedef Usul::Interfaces::IDeleteListener IDeleteListener;
  typedef Usul::Interfaces::IDeleteNotify IDeleteNotify;


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Default constructor. Needed for containers.
  //
  /////////////////////////////////////////////////////////////////////////////

  WeakPointer() : _p ( 0x0 )
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  WeakPointer ( T *t ) : _p ( t )
  {
    this->_addSelfAsDeleteListener();
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Copy constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  WeakPointer ( const ThisType &p ) : _p ( p.get() )
  {
    this->_addSelfAsDeleteListener();
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Destructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  ~WeakPointer()
  {
    this->_removeSelfAsDeleteListener();
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Assignment.
  //
  /////////////////////////////////////////////////////////////////////////////

  ThisType &operator = ( T *p )
  {
    this->_set ( p );
    return *this;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Assignment.
  //
  /////////////////////////////////////////////////////////////////////////////

  ThisType &operator = ( const ThisType &p )
  {
    this->_set ( p.get() );
    return *this;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Query the interfaces
  //
  /////////////////////////////////////////////////////////////////////////////

  Usul::Interfaces::IUnknown *queryInterface ( unsigned long iid )
  {
    switch ( iid )
    {
    case Usul::Interfaces::IUnknown::IID:
    case Usul::Interfaces::IDeleteListener::IID:
      return static_cast < Usul::Interfaces::IDeleteListener* > ( this );
    default:
      return 0x0;
    }
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Reference this object.
  //
  /////////////////////////////////////////////////////////////////////////////

  void ref()
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Dereference this object.
  //
  /////////////////////////////////////////////////////////////////////////////

  void unref ( bool )
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Notify the listener that the object has been deleted.
  //
  /////////////////////////////////////////////////////////////////////////////

  void objectDeleted ( Usul::Interfaces::IUnknown *unknown )
  {
    // Don't set to null more than once.
    if ( 0x0 == _p )
    {
      USUL_ASSERT ( false ); // Should not happen.
      return;
    }

    // Make sure they are the same. Do not reference or de-reference!
    // Have to query for the interface because the same object can have two 
    // or more IUnknown pointers with different addresses.
    IDeleteNotify *theirs ( static_cast < IDeleteNotify * > ( ( 0x0 == unknown ) ? 0x0 : unknown->queryInterface ( IDeleteNotify::IID ) ) );
    IDeleteNotify *mine   ( static_cast < IDeleteNotify * > ( ( 0x0 ==      _p ) ? 0x0 :      _p->queryInterface ( IDeleteNotify::IID ) ) );
    if ( mine == theirs )
    {
      _p = 0x0;
    }
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get internal pointer.
  //
  /////////////////////////////////////////////////////////////////////////////

  T *get() const
  {
    return _p;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Is the internal pointer valid?
  //
  /////////////////////////////////////////////////////////////////////////////

  bool valid() const
  {
    return ( 0x0 != _p );
  }

private:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Add this class as a delete-listener.
  //
  /////////////////////////////////////////////////////////////////////////////

  void _addSelfAsDeleteListener()
  {
    IDeleteNotify::QueryPtr notify ( _p );
    if ( true == notify.valid() )
    {
      notify->addDeleteListener ( this );
    }
  }

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Remove this class as a delete-listener.
  //
  /////////////////////////////////////////////////////////////////////////////

  void _removeSelfAsDeleteListener()
  {
    IDeleteNotify::QueryPtr notify ( _p );
    if ( true == notify.valid() )
    {
      notify->removeDeleteListener ( this );
    }
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set internal pointer.
  //
  /////////////////////////////////////////////////////////////////////////////

  void _set ( T *p )
  {
    if ( p != _p )
    {
      this->_removeSelfAsDeleteListener();
      _p = p;
      this->_addSelfAsDeleteListener();
    }
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Data members.
  //
  /////////////////////////////////////////////////////////////////////////////

  T *_p;
};


} // namespace Pointers
} // namespace Usul


#endif // _USUL_WEAK_POINTER_CLASS_H_
