
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 4004, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A pool of 4D vectors.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/VecPool.h"

using namespace GSG;


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

VecPool::VecPool() : Referenced(), 
  _indices(),
  _format ( INDICES_UNKNOWN )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

VecPool::VecPool ( const VecPool &p ) : Referenced ( p ), 
  _indices ( p._indices ),
  _format  ( p._format )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

VecPool::~VecPool()
{
  // Empty.
}


///////////////////////////////////////////////////////////////////////////////
//
//  Access to the indices.
//
///////////////////////////////////////////////////////////////////////////////

VecPool::value_type VecPool::index ( VecPool::size_type i ) const
{
  BoundsChecker ( _indices.size(), i );
  return _indices[i];
}


///////////////////////////////////////////////////////////////////////////////
//
//  Access to the indices.
//
///////////////////////////////////////////////////////////////////////////////

void VecPool::index ( VecPool::size_type i, const VecPool::value_type &v )
{
  BoundsChecker ( _indices.size(), i );
  _indices[i] = v;
}
