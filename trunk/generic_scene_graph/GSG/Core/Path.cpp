
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A node path.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Path.h"

using namespace GSG;

GSG_IMPLEMENT_CLONE ( Path );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

Path::Path() : Referenced(),
  _stack()
{

}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

Path::Path ( const Path &p ) : Referenced ( p ),
  _stack ( p._stack )
{

}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

Path::~Path()
{

}


/////////////////////////////////////////////////////////////////////////////
//
//  Push the node.
//
/////////////////////////////////////////////////////////////////////////////

void Path::push ( Node *n )
{
  Lock lock ( this );
  _stack.push ( n );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Pop the node.
//
/////////////////////////////////////////////////////////////////////////////

void Path::pop()
{
  Lock lock ( this );
  ErrorChecker ( false == _stack.empty() );
  _stack.pop();
}
