
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Sphere class.
//
///////////////////////////////////////////////////////////////////////////////

#include "Precompiled.h"
#include "Sphere.h"
#include "Factory.h"

#include "osg/ShapeDrawable"
#include "osg/Geode"

using namespace SAL;
using namespace SAL::OSG;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( Sphere, Sphere::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Sphere::Sphere() : BaseClass(),
  _center ( 0, 0, 0 ),
  _radius ( 1 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Sphere::~Sphere()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *Sphere::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case SAL::Interfaces::ISphereFloat::IID:
    return static_cast<SAL::Interfaces::ISphereFloat*>(this);
  case SAL::Interfaces::IBuilder::IID:
    return static_cast<SAL::Interfaces::IBuilder*>(this);
  case Usul::Interfaces::IUnknown::IID:
    return static_cast<Usul::Interfaces::IUnknown*>(static_cast<SAL::Interfaces::ISphereFloat*>(this));
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the center
//
///////////////////////////////////////////////////////////////////////////////

void Sphere::setSphereCenter ( const Vec3 &c )
{
  _center = c;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the center.
//
///////////////////////////////////////////////////////////////////////////////

void Sphere::getSphereCenter ( Vec3 &c ) const
{
  c = _center;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the radius
//
///////////////////////////////////////////////////////////////////////////////

void Sphere::setSphereRadius ( float r )
{
  _radius = r;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the radius.
//
///////////////////////////////////////////////////////////////////////////////

void Sphere::getSphereRadius ( float &r ) const
{
  r = _radius;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Build the scene.
//
///////////////////////////////////////////////////////////////////////////////

SAL::Interfaces::INode *Sphere::buildScene() const
{
  // Make a sphere.
  typedef USUL_VALID_REF_POINTER ( osg::Sphere ) ValidOsgSphere;
  ValidOsgSphere sphere ( new osg::Sphere );

  // Set its properties.
  sphere->setCenter ( osg::Vec3 ( _center[0], _center[1], _center[2] ) );
  sphere->setRadius ( _radius );

  // Build the sphere.
  typedef USUL_VALID_REF_POINTER ( osg::Drawable ) ValidOsgDrawable;
  ValidOsgDrawable drawable ( new osg::ShapeDrawable ( sphere ) );

  // Attach it to a geode.
  typedef USUL_VALID_REF_POINTER ( osg::Geode ) ValidOsgGeode;
  ValidOsgGeode geode ( new osg::Geode() );
  geode->addDrawable ( drawable );

  // Create the corresponding component.
  INode::ValidQueryPtr node ( Factory::create ( geode ) );

  // Return the new component.
  return node.release();
}
