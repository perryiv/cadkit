
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Wrapper class for a single gadget::DigitalInterface.
//
///////////////////////////////////////////////////////////////////////////////

#include "ButtonDevice.h"

#include "gadget/Type/Digital.h"

using namespace VRV::Devices;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

ButtonDevice::ButtonDevice ( unsigned long mask, const std::string &name ) : 
  BaseClass(),
  _di(),
  _mask ( mask )
{
  // Initialize.
  _di.init ( name );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

ButtonDevice::~ButtonDevice()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the device state.
//
///////////////////////////////////////////////////////////////////////////////

unsigned long ButtonDevice::state() const
{
  Guard guard ( this->mutex() );

  // Jump through these hoops because getData() is not const.
  DI &di = const_cast < DI & > ( _di );
  return static_cast < unsigned long > ( di->getData() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Notify listeners if state changed.
//
///////////////////////////////////////////////////////////////////////////////

void ButtonDevice::notify()
{
  Guard guard ( this->mutex() );

  // First update state.
  this->state();

  // Tell every button to notify.
  //std::for_each ( _buttons.begin(), _buttons.end(), std::mem_fun ( &ButtonDevice::notify ) );
}
