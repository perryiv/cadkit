
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base callback for SQLite database.
//
///////////////////////////////////////////////////////////////////////////////

#include "SQLiteWrap/Callback.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Functions/SafeCall.h"

using namespace SQLiteWrap;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor
//
///////////////////////////////////////////////////////////////////////////////

Callback::Callback () : BaseClass(),
  _mutex ( Usul::Threads::Mutex::create() )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

Callback::~Callback()
{
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Callback::_clean ), "9388339910" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Clean this instance. Should only be called from the destructor.
//
///////////////////////////////////////////////////////////////////////////////

void Callback::_clean()
{
  delete _mutex; _mutex = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Callback function.
//
///////////////////////////////////////////////////////////////////////////////

void Callback::operator () ( const Database &, const std::string &, const std::string & )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Called right before a query.
//
///////////////////////////////////////////////////////////////////////////////

void Callback::start ( const Database & )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Called right after a query.
//
///////////////////////////////////////////////////////////////////////////////

void Callback::finish ( const Database & )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the mutex.
//
///////////////////////////////////////////////////////////////////////////////

Callback::Mutex &Callback::mutex() const
{
  return *_mutex;
}
