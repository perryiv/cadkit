
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  1D translate dragger.
//
///////////////////////////////////////////////////////////////////////////////

#include "OsgTools/Draggers/Translate.h"

using namespace OsgTools;
using namespace OsgTools::Draggers;


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructor.
//
///////////////////////////////////////////////////////////////////////////////

Translate::Translate() : BaseClass(),
  _trans ( 0, 0, 0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

Translate::Translate ( const Translate &dragger, const osg::CopyOp &op ) :
  BaseClass ( dragger, op ),
  _trans ( dragger._trans )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Translate::~Translate()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Read the dragger.
//
///////////////////////////////////////////////////////////////////////////////

bool Translate::read ( osg::Object &object, osgDB::Input &fr )
{
  bool iteratorAdvanced = false;
 // Translate *t = static_cast < Translate * > ( &object );
  return iteratorAdvanced;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Write the dragger.
//
///////////////////////////////////////////////////////////////////////////////

bool Translate::write ( const osg::Object &object, osgDB::Output &fw )
{
 // const Translate *t = static_cast < const Translate * > ( &object );
  return false;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Execute the command.
//
///////////////////////////////////////////////////////////////////////////////

void Translate::execute ( Command c, const osg::Vec3d &pt0, const osg::Vec3d &pt1 )
{
  BaseClass::execute ( c, pt0, pt1 );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the translation.
//
///////////////////////////////////////////////////////////////////////////////

void Translate::translation ( const osg::Vec3d &t )
{
  osg::MatrixTransform::setMatrix ( osg::Matrixd::translate ( t ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the translation.
//
///////////////////////////////////////////////////////////////////////////////

osg::Vec3d Translate::translation()
{
  return this->getMatrix().getTrans();
}
