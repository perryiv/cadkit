
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Geometry/Polygon.h"

using namespace Minerva::Core::Geometry;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( Polygon, Polygon::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Polygon::Polygon ( ) :
BaseClass(),
_boundaries()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Polygon::~Polygon()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the outer boundary.
//
///////////////////////////////////////////////////////////////////////////////

void Polygon::outerBoundary ( const Vertices& vertices )
{
  this->line ( vertices );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the outer boundary.
//
///////////////////////////////////////////////////////////////////////////////

const Polygon::Vertices& Polygon::outerBoundary() const
{
  return this->line();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add an inner boundary.
//
///////////////////////////////////////////////////////////////////////////////

void Polygon::addInnerBoundary ( const Vertices& vertices )
{
  _boundaries.push_back ( vertices );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the inner boundaries.
//
///////////////////////////////////////////////////////////////////////////////

const Polygon::Boundaries& Polygon::innerBoundaries() const
{
  return _boundaries;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown* Polygon::queryInterface( unsigned long iid )
{
  switch ( iid )
  {
  case Minerva::Interfaces::IPolygonData::IID:
    return static_cast < Minerva::Interfaces::IPolygonData* > ( this );
  default:
    return BaseClass::queryInterface ( iid );
  }
}
