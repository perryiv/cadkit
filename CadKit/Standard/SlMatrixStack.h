
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  SlMatrixStack: A stack of matrices.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _CADKIT_STANDARD_LIBRARY_MATRIX_STACK_CLASS_H_
#define _CADKIT_STANDARD_LIBRARY_MATRIX_STACK_CLASS_H_

#include "SlAssert.h"

#include <list>


namespace CadKit {


template < class Matrix > class SlMatrixStack
{
public:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Useful typedef(s).
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef Matrix MatrixType;
  typedef std::list<MatrixType> StackType;


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Default constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  SlMatrixStack() : 
    _matrices()
  {

  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Copy constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  SlMatrixStack ( const SlMatrixStack &ms ) : 
    _matrices ( ms._matrices )
  {

  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Assignment.
  //
  /////////////////////////////////////////////////////////////////////////////

  SlMatrixStack &operator = ( const SlMatrixStack &ms )
  {
    _matrices = ms._matrices;
    return *this;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Push a matrix onto the stack.
  //
  /////////////////////////////////////////////////////////////////////////////

  void push ( const Matrix &ms )
  {
    _matrices.push_back ( ms );
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Pop the top matrix off the stack.
  //
  /////////////////////////////////////////////////////////////////////////////

  void pop()
  {
    SL_ASSERT ( false == _matrices.empty() );
    _matrices.pop_back();
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get the top matrix.
  //
  /////////////////////////////////////////////////////////////////////////////

  const Matrix &top() const
  {
    SL_ASSERT ( false == _matrices.empty() );
    return _matrices.back();
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Multiply all the matrices into one.
  //
  /////////////////////////////////////////////////////////////////////////////

  void multiply ( Matrix &answer ) const
  {
    // Loop through all of the matrices.
    for ( typename StackType::const_iterator i = _matrices.begin(); i != _matrices.end(); ++i )
    {
      // There must be a "*=" operator for Matrix.
      answer *= *i;
    }
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Return the size.
  //
  /////////////////////////////////////////////////////////////////////////////

  typename StackType::size_type size() const
  {
    return _matrices.size();
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Is it empty?
  //
  /////////////////////////////////////////////////////////////////////////////

  bool empty() const
  {
    return _matrices.empty();
  }


protected:

  StackType _matrices;
};


}; // namespace CadKit.


#endif // _CADKIT_STANDARD_LIBRARY_MATRIX_STACK_CLASS_H_
