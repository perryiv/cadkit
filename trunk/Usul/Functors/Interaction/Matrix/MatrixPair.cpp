
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant and Perry L. Miller IV.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Pair of matrix functors.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Functors/Interaction/Matrix/MatrixPair.h"
#include "Usul/Trace/Trace.h"

using namespace Usul::Functors::Interaction::Matrix;

USUL_IMPLEMENT_TYPE_ID ( MatrixPair );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

MatrixPair::MatrixPair ( 
  Unknown *caller, 
  MatrixFunctor *c1, 
  MatrixFunctor *c2,
  const std::string &name ) : 
  BaseClass ( caller, name ),
  _c1 ( c1 ),
  _c2 ( c2 )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

MatrixPair::MatrixPair ( const MatrixPair &cb ) : BaseClass ( cb ),
  _c1 ( cb._c1 ),
  _c2 ( cb._c2 )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

MatrixPair::~MatrixPair()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the matrix.
//
///////////////////////////////////////////////////////////////////////////////

void MatrixPair::operator()()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );

  if ( ( true == _c1.valid() ) && ( true == _c2.valid() ) )
  {
    (*_c1)();
    (*_c2)();

    _matrix = _c1->matrix() * _c2->matrix();
  }
}
