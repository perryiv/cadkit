
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all menu items window class.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Menus/MenuGroup.h"

#include "Usul/Bits/Bits.h"

#include <limits>

using namespace AFW::Menus;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

MenuItem::MenuItem() : BaseClass(),
  _text      (),
  _underline ( std::numeric_limits<unsigned short>::max() ),
  _flags     ( DIRTY ),
  _parent    ( 0x0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

MenuItem::MenuItem ( const std::string &text, unsigned short underline ) : BaseClass(),
  _text      ( text ),
  _underline ( underline ),
  _flags     ( DIRTY ),
  _parent    ( 0x0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

MenuItem::~MenuItem()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

void MenuItem::dirty ( bool state )
{
  const unsigned int bit ( MenuItem::DIRTY );
  if ( state )
  {
    _flags = Usul::Bits::add ( _flags, bit );

    // Set parent as dirty too.
    if ( _parent )
      _parent->dirty ( true );
  }
  else
  {
    _flags = Usul::Bits::remove ( _flags, bit );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the dirty flag.
//
///////////////////////////////////////////////////////////////////////////////

bool MenuItem::dirty() const
{
  const unsigned int bit ( MenuItem::DIRTY );
  return Usul::Bits::has ( _flags, bit );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the parent.
//
///////////////////////////////////////////////////////////////////////////////

void MenuItem::_setParent ( MenuGroup *group )
{
  _parent = group;
}
