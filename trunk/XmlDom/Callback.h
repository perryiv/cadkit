
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Callback policy classes.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _XML_CALLBACK_CLASSES_H_
#define _XML_CALLBACK_CLASSES_H_


namespace XML {
namespace Callback {


///////////////////////////////////////////////////////////////////////////////
//
//  A do-nothing callback class.
//
///////////////////////////////////////////////////////////////////////////////

template < class StringType, class UserDataType > struct DoNothing
{
  typedef StringType String;
  typedef UserDataType UserData;
  explicit DoNothing(){}
  void startNode ( const String &name, const String &value ){}
  void endNode ( const String &name ){}
};


///////////////////////////////////////////////////////////////////////////////
//
//  A node-callback class.
//
///////////////////////////////////////////////////////////////////////////////

template < class StringType, class UserDataType > struct Notify
{
  /////////////////////////////////////////////////////////////////////////////
  //
  //  Useful typedef.
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef StringType String;
  typedef UserDataType UserData;


  /////////////////////////////////////////////////////////////////////////////
  //
  //  The callback type.
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef void StartCallbackType ( const String &name, const String &value, UserData data );
  typedef void EndCallbackType ( const String &name, UserData data );


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Default constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  explicit Notify() : _start ( 0x0 ), _end ( 0x0 ), _data ( 0x0 ){}


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Copy constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Notify ( const Notify &cb ) : _start ( cb._start ), _end ( cb._end ){}


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Assignment.
  //
  /////////////////////////////////////////////////////////////////////////////

  Notify &operator = ( const Notify &cb )
  {
    _start = cb._start;
    _end = cb._end;
    return *this;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set the start callback.
  //
  /////////////////////////////////////////////////////////////////////////////

  void set ( StartCallbackType *cb )
  {
    _start = cb;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set the end callback.
  //
  /////////////////////////////////////////////////////////////////////////////

  void set ( EndCallbackType *cb )
  {
    _end = cb;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Set the user data.
  //
  /////////////////////////////////////////////////////////////////////////////

  void set ( UserDataType data )
  {
    _data = data;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Called when the start of a node is found.
  //
  /////////////////////////////////////////////////////////////////////////////

  void startNode ( const String &name, const String &value )
  {
    if ( _start )
    {
      _start ( name, value, _data );
    }
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Called when the end of a node is found.
  //
  /////////////////////////////////////////////////////////////////////////////

  void endNode ( const String &name )
  {
    if ( _end )
    {
      _end ( name, _data );
    }
  }

protected:

  StartCallbackType *_start;
  EndCallbackType *_end;
  UserDataType _data;
};


}; // namespace Callback
}; // namespace XML


#endif // _XML_CALLBACK_CLASSES_H_
