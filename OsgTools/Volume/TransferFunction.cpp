
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author(s): Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "OsgTools/Volume/TransferFunction.h"

using namespace OsgTools::Volume;

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

TransferFunction::TransferFunction () : 
  BaseClass (),
  _image ( 0x0 ),
  _texture ( 0x0 ),
  _textureUnit ( 0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

TransferFunction::~TransferFunction()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the image.
//
///////////////////////////////////////////////////////////////////////////////

osg::Image* TransferFunction::image ()
{
  Guard guard ( this->mutex () );
  return _image.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the image.
//
///////////////////////////////////////////////////////////////////////////////

const osg::Image* TransferFunction::image () const
{
  Guard guard ( this->mutex () );
  return _image.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the texture.
//
///////////////////////////////////////////////////////////////////////////////

osg::Texture* TransferFunction::texture ()
{
  Guard guard ( this->mutex () );
  return _texture.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the texture.
//
///////////////////////////////////////////////////////////////////////////////

const osg::Texture* TransferFunction::texture () const
{
  Guard guard ( this->mutex () );
  return _texture.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Mark as dirty.
//
///////////////////////////////////////////////////////////////////////////////

void TransferFunction::dirty ()
{
  Guard guard ( this->mutex () );
  if ( _image.valid () )
    _image->dirty ();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the texture unit.
//
///////////////////////////////////////////////////////////////////////////////

void TransferFunction::textureUnit ( unsigned int unit )
{
  Guard guard ( this->mutex () );
  _textureUnit = unit;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the texture unit.
//
///////////////////////////////////////////////////////////////////////////////

unsigned int TransferFunction::textureUnit () const
{
  Guard guard ( this->mutex () );
  return _textureUnit;
}
