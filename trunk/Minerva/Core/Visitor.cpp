
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base visitor class.
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Visitor.h"
#include "Minerva/Core/TileEngine/Body.h"
#include "Minerva/Core/Data/Container.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Cast/Cast.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Trace/Trace.h"

using namespace Minerva::Core;

MINERVA_IMPLEMENT_VISITOR_CLASS ( Visitor );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor
//
///////////////////////////////////////////////////////////////////////////////

Visitor::Visitor() : BaseClass()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

Visitor::~Visitor()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Visitor::_destroy ), "2197133630" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::_destroy()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the feature.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( Minerva::Core::Data::Feature &feature )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the data object.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( Minerva::Core::Data::DataObject &dataObject )
{
  this->visit ( USUL_UNSAFE_CAST ( Feature&, dataObject ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the vector layer.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( Minerva::Core::Data::Container& vector )
{
  vector.traverse ( *this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the node.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( Minerva::Core::TileEngine::Body & body )
{
  USUL_TRACE_SCOPE;
  
  // Get body compoents.
  Minerva::Core::Data::Container::RefPtr vector ( body.vectorData() );
  Minerva::Core::Layers::RasterLayer::RefPtr raster ( body.rasterData() );
  Minerva::Core::Layers::RasterLayer::RefPtr elevation ( body.elevationData() );
  
  if ( vector.valid() )
    vector->traverse ( *this );
  
  if ( raster.valid() )
    this->visit ( *raster );
  
  if ( elevation.valid() )
    this->visit ( *elevation );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the raster layer.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( Minerva::Core::Layers::RasterLayer &rasterLayer )
{
  this->visit ( USUL_UNSAFE_CAST ( Feature&, rasterLayer ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Visit the raster group.
//
///////////////////////////////////////////////////////////////////////////////

void Visitor::visit ( Minerva::Core::Layers::RasterGroup &rasterGroup )
{
  rasterGroup.traverse ( *this );
}
