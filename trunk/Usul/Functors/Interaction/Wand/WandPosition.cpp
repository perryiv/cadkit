
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant and Perry L. Miller IV.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Wand position matrix functor.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Functors/Interaction/Wand/WandPosition.h"
#include "Usul/Trace/Trace.h"

using namespace Usul::Functors::Interaction::Wand;

USUL_IMPLEMENT_TYPE_ID ( WandPosition );


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructors.
//
///////////////////////////////////////////////////////////////////////////////

WandPosition::WandPosition ( Unknown *caller, const std::string &name ) : BaseClass ( caller, name )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructors.
//
///////////////////////////////////////////////////////////////////////////////

WandPosition::WandPosition ( const WandPosition &w ) : BaseClass ( w )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructors.
//
///////////////////////////////////////////////////////////////////////////////

WandPosition::~WandPosition()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the wand's position.
//
///////////////////////////////////////////////////////////////////////////////

void WandPosition::operator()()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );

  // Get the wand's position.
  WandState::Vector p ( 0, 0, 0 );
  WandState *state ( this->_wandState() );
  if ( 0x0 != state )
  {
    state->wandPosition ( p );
  }

  // Make a translation
  _matrix.makeTranslation ( p ); // Note: rotation should be identity.
}


///////////////////////////////////////////////////////////////////////////////
//
//  Clone.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Functors::Interaction::Common::BaseFunctor* WandPosition::clone()
{
  return new WandPosition ( *this );
}
