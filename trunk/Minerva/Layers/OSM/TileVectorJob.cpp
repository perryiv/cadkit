
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Job that uses the extended API (XAPI).
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Layers/OSM/TileVectorJob.h"
#include "Minerva/Layers/OSM/XAPIMapQuery.h"

using namespace Minerva::Layers::OSM;

USUL_IMPLEMENT_TYPE_ID ( TileVectorJob );
USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( TileVectorJob, TileVectorJob::BaseClass );

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

TileVectorJob::TileVectorJob ( Cache::RefPtr cache, const std::string& url, const Extents& extents, const Predicate& predicate ) : BaseClass(),
  _cache ( cache ),
  _url ( url ),
  _extents ( extents ),
  _predicate ( predicate ),
  _data()
{
  this->name ( Usul::Strings::format ( "OSM Map Query: ", _predicate.first, "=", _predicate.second ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

TileVectorJob::~TileVectorJob()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *TileVectorJob::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::ITileVectorJob::IID:
    return static_cast < Usul::Interfaces::ITileVectorJob * > ( this );
  default:
    return BaseClass::queryInterface ( iid );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Cancel the job (ITileVectorJob).
//
///////////////////////////////////////////////////////////////////////////////

void TileVectorJob::cancelVectorJob()
{
  this->cancel();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the container of data (ITileVectorJob).
//
///////////////////////////////////////////////////////////////////////////////

TileVectorJob::Data TileVectorJob::getVectorData() const
{
  return _data;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Is the job done (ITileVectorJob)?
//
///////////////////////////////////////////////////////////////////////////////

bool TileVectorJob::isVectorJobDone() const
{
  return this->isDone();
}
