
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Magrathea/WmsLayer.h"

#include "Usul/Functions/Guid.h"
#include "Usul/Factory/RegisterCreator.h"

using namespace Magrathea;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( WmsLayer, WmsLayer::BaseClass );
USUL_FACTORY_REGISTER_CREATOR ( WmsLayer );

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

WmsLayer::WmsLayer() : BaseClass(),
_guid ( Usul::Functions::GUID::generate() ),
_server (),
_imageType (),
_cacheDirectory (),
_transparentFlag ( false ),
_transparentColorFlag ( false ),
_r ( 0 ),
_g ( 0 ),
_b ( 0 ),
_wmsImageLayer ( new ossimPlanetWmsImageLayer ),
SERIALIZE_XML_INITIALIZER_LIST
{
  SERIALIZE_XML_ADD_MEMBER ( _guid );
  SERIALIZE_XML_ADD_MEMBER ( _server );
  SERIALIZE_XML_ADD_MEMBER ( _imageType );
  SERIALIZE_XML_ADD_MEMBER ( _cacheDirectory );
  SERIALIZE_XML_ADD_MEMBER ( _transparentFlag );
  SERIALIZE_XML_ADD_MEMBER ( _transparentColorFlag );
  SERIALIZE_XML_ADD_MEMBER ( _r );
  SERIALIZE_XML_ADD_MEMBER ( _g );
  SERIALIZE_XML_ADD_MEMBER ( _b );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

WmsLayer::~WmsLayer()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the server.
//
///////////////////////////////////////////////////////////////////////////////

void WmsLayer::server( const std::string& serverString )
{
  _server = serverString;
  _wmsImageLayer->setServer ( serverString );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the server.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& WmsLayer::server() const
{
  return _wmsImageLayer->getServer();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the image type.
//
///////////////////////////////////////////////////////////////////////////////

void WmsLayer::imageType( const std::string& imageType )
{
  _imageType = imageType;
  _wmsImageLayer->setImageType ( imageType );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the image type.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& WmsLayer::imageType() const
{
  return _wmsImageLayer->getImageType();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the cache directory.
//
///////////////////////////////////////////////////////////////////////////////

void WmsLayer::cacheDirectory( const std::string& directory )
{
  _cacheDirectory = directory;
  _wmsImageLayer->setCacheDirectory( directory.c_str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the cache directory.
//
///////////////////////////////////////////////////////////////////////////////

std::string WmsLayer::cacheDirectory() const
{
  return _wmsImageLayer->getCacheDirectory().c_str();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the transparent flag.
//
///////////////////////////////////////////////////////////////////////////////

void WmsLayer::transparentFlag( bool flag )
{
  _transparentFlag = flag;
  _wmsImageLayer->setTransparentFlag ( flag );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the transparent flag.
//
///////////////////////////////////////////////////////////////////////////////

bool WmsLayer::transparentFlag() const
{
  return _wmsImageLayer->getTransparentFlag();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the transparent color flag.
//
///////////////////////////////////////////////////////////////////////////////

void WmsLayer::transparentColorFlag( bool flag )
{
  _transparentColorFlag = flag;
  _wmsImageLayer->setTransparentColorFlag ( flag );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the transparent color flag.
//
///////////////////////////////////////////////////////////////////////////////

bool WmsLayer::transparentColorFlag() const
{
  return _wmsImageLayer->getTransparentColorFlag();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the transparent color.
//
///////////////////////////////////////////////////////////////////////////////

void WmsLayer::transparentColor( unsigned int r, unsigned int g, unsigned int b )
{
  _r = r; _g = g; _b = b;
  _wmsImageLayer->setTransparentColor ( r, g, b );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown* WmsLayer::queryInterface(unsigned long iid)
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::ILayer::IID:
    return static_cast < Usul::Interfaces::ILayer * > ( this );
  case Usul::Interfaces::IOssimPlanetLayer::IID:
    return static_cast < Usul::Interfaces::IOssimPlanetLayer * > ( this );
  case Usul::Interfaces::ILayerExtents::IID:
    return static_cast < Usul::Interfaces::ILayerExtents* > ( this );
  case Usul::Interfaces::ISerialize::IID:
    return static_cast < Usul::Interfaces::ISerialize* > ( this );
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the ossimPlanetTexutureLayer.
//
///////////////////////////////////////////////////////////////////////////////

ossimPlanetTextureLayer* WmsLayer::ossimPlanetLayer()
{
  return _wmsImageLayer.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the guid.
//
///////////////////////////////////////////////////////////////////////////////

std::string WmsLayer::guid() const
{
  return _guid;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set show layer.
//
///////////////////////////////////////////////////////////////////////////////

void WmsLayer::showLayer( bool b )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get show layer.
//
///////////////////////////////////////////////////////////////////////////////

bool WmsLayer::showLayer() const
{
  return true;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the layer extents.
//
///////////////////////////////////////////////////////////////////////////////

void WmsLayer::layerExtents ( double &lat, double &lon, double& height ) const
{
  _wmsImageLayer->getCenterLatLonLength( lat, lon, height );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Deserialize.
//
///////////////////////////////////////////////////////////////////////////////

void WmsLayer::deserialize ( const XmlTree::Node& node )
{
  _dataMemberMap.deserialize( node );
  this->server ( _server );
  this->imageType ( _imageType );
  this->cacheDirectory( _cacheDirectory );
  this->transparentFlag ( _transparentFlag );
  this->transparentColorFlag ( _transparentColorFlag );
  this->transparentColor ( _r, _g, _b );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the name.
//
///////////////////////////////////////////////////////////////////////////////

const std::string&  WmsLayer::name() const
{
  return this->server();
}
