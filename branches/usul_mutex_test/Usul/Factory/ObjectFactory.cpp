
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Factory class.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Factory/ObjectFactory.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Trace/Trace.h"

using namespace Usul::Factory;


///////////////////////////////////////////////////////////////////////////////
//
//  Singelton instance.
//
///////////////////////////////////////////////////////////////////////////////

ObjectFactory *ObjectFactory::_instance = 0x0;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor
//
///////////////////////////////////////////////////////////////////////////////

ObjectFactory::ObjectFactory() : 
  _mutex    ( new ObjectFactory::Mutex ),
  _creators ()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

ObjectFactory::~ObjectFactory()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &ObjectFactory::_destroy ), "2675811176" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy this instance.
//
///////////////////////////////////////////////////////////////////////////////

void ObjectFactory::_destroy()
{
  USUL_TRACE_SCOPE;
  this->clear();
  delete _mutex; _mutex = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Clear the map.
//
///////////////////////////////////////////////////////////////////////////////

void ObjectFactory::clear()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  _creators.clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the single instance.
//
///////////////////////////////////////////////////////////////////////////////

ObjectFactory &ObjectFactory::instance()
{
  USUL_TRACE_SCOPE_STATIC;
  if ( 0x0 == _instance )
  {
    _instance = new ObjectFactory;
  }
  return *_instance;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the single instance.
//
///////////////////////////////////////////////////////////////////////////////

void ObjectFactory::instance ( ObjectFactory *f )
{
  USUL_TRACE_SCOPE_STATIC;
  if ( 0x0 != _instance )
  {
    delete _instance;
  }
  _instance = f;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Add a creator.
//
///////////////////////////////////////////////////////////////////////////////

void ObjectFactory::add ( BaseCreator *c )
{
  USUL_TRACE_SCOPE;
  if ( 0x0 != c )
  {
    Guard guard ( this->mutex() );
    _creators.insert ( Creators::value_type ( c->name(), BaseCreator::ValidRefPtr ( c ) ) );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Remove a creator.
//
///////////////////////////////////////////////////////////////////////////////

void ObjectFactory::remove ( const std::string &name )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  _creators.erase ( name );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return a newly created object, or null.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Base::Referenced *ObjectFactory::create ( const std::string &name )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );

  Creators::iterator i = _creators.find ( name );
  if ( _creators.end() == i )
  {
    return 0x0;
  }

  BaseCreator &creator = *(i->second);
  return creator();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the mutex.
//
///////////////////////////////////////////////////////////////////////////////

ObjectFactory::Mutex &ObjectFactory::mutex() const
{
  USUL_TRACE_SCOPE;
  return *_mutex;
}
