
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A sequence of vertex primitives.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/PrimitiveSet.h"

using namespace GSG;

GSG_IMPLEMENT_CLONE ( PrimitiveSet );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

PrimitiveSet::PrimitiveSet() : Referenced(), 
  _pool ( 0x0 ),
  _ppn  ( 0x0 ),
  _ppc  ( 0x0 ),
  _type ( TYPE_UNKNOWN ),
  _nb   ( BINDING_UNKNOWN ),
  _cb   ( BINDING_UNKNOWN ),
  _prims(),
  _bound()
{
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

PrimitiveSet::PrimitiveSet ( const PrimitiveSet &s ) : Referenced ( s ), 
  _pool  ( s._pool ),
  _ppn   ( s._ppn ),
  _ppc   ( s._ppc ),
  _type  ( s._type ),
  _nb    ( s._nb ),
  _cb    ( s._cb ),
  _prims ( s._prims ),
  _bound ( s._bound )
{
  BOOST_MPL_ASSERT_IS_SAME ( size_type,  ValuePool::size_type );
  BOOST_MPL_ASSERT_IS_SAME ( size_type, NormalPool::size_type );
  BOOST_MPL_ASSERT_IS_SAME ( size_type,  ColorPool::size_type );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

PrimitiveSet::~PrimitiveSet()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the type.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::type ( Type t )
{
  Lock lock ( this );
  _type = t;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Normal binding.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::normalBinding ( Binding nb )
{
  Lock lock ( this );
  _nb = nb;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Color binding.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::colorBinding ( Binding cb )
{
  Lock lock ( this );
  _cb = cb;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Append the primitive.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::append ( Primitive *ps )
{
  Lock lock ( this );
  _prims.insert ( _prims.end(), Primitive::ValidPtr ( ps ) );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Prepend the primitive.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::prepend ( Primitive *ps )
{
  Lock lock ( this );
  _prims.insert ( _prims.begin(), Primitive::ValidPtr ( ps ) );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Insert the primitive.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::insert ( PrimitiveSet::iterator beforeMe, Primitive *ps )
{
  Lock lock ( this );
  _prims.insert ( beforeMe, Primitive::ValidPtr ( ps ) );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the values.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::values ( ValuePool *vp )
{
  Lock lock ( this );
  _pool = vp;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set/get the per-primitive normals. If the normals are in the 
//  interleaved array then this should be null.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::normals ( NormalPool *np )
{
  Lock lock ( this );
  _ppn = np;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set/get the per-primitive colors. If the colors are in the 
//  interleaved array then this should be null.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::colors ( ColorPool *cp )
{
  Lock lock ( this );
  _ppc = cp;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set the bounding sphere.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::boundingSphere ( const BoundingSphere &b )
{
  Lock lock ( this );
  _bound = b;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Calculate the bounding sphere.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::calculateBoundingSphere()
{
  // Loop through the primitives and grow the bounding sphere.
  BoundingSphere bound;
  for ( Primitives::const_iterator i = _prims.begin(); i != _prims.end(); ++i )
  {
    Primitive::ValidPtr prim ( *i );
    this->_grow ( prim, bound );
  }

  // Set this instance's sphere.
  this->boundingSphere ( bound );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Grow the bounding sphere.
//
/////////////////////////////////////////////////////////////////////////////

void PrimitiveSet::_grow ( const Primitive *prim, BoundingSphere &bound ) const
{
  // Loop through the vertices and grow the bounding sphere.
  Real v0, v1, v2;
  Indices::size_type size ( prim->size() );
  for ( Indices::size_type i = prim->start(); i < size; ++i )
  {
    // Get the vertex.
    _pool->vertex ( i, v0, v1, v2 );

    // Vector-type may not be the same.
    bound.grow ( BoundingSphere::VectorType ( v0, v1, v2 ) );
  }
}
