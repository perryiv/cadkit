
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Class for Scopeing when entering and leaving a scope.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Trace/Scope.h"
#include "Usul/Trace/Print.h"
#include "Usul/System/Clock.h"
#include "Usul/Threads/ThreadId.h"

#include <iostream>
#include <sstream>

using namespace Usul::Trace;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Scope::Scope ( const std::string &n ) : _name ( n )
{
  std::ostringstream out;
  out << "<function";
  out << " name=\"" << _name << "\"";
  out << " time=\"" << Usul::System::Clock::milliseconds() << "\"";
  out << " thread=\"" << Usul::Threads::currentThreadId() << "\"";
  out << ">\n";
  Usul::Trace::Print::execute ( out.str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Scope::~Scope()
{
  Usul::Trace::Print::execute ( "</function>\n" );
}
