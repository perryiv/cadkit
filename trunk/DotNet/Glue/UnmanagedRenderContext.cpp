
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

#include "UnmanagedRenderContext.h"

using namespace CadKit::OpenGL::Glue;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( UnmanagedRenderContext , UnmanagedRenderContext::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

UnmanagedRenderContext::UnmanagedRenderContext() : BaseClass(),
_makeCurrentCallback ( 0x0 ),
_swapBuffersCallback ( 0x0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

UnmanagedRenderContext::~UnmanagedRenderContext()
{
  _makeCurrentCallback = 0x0;
  _swapBuffersCallback = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Call the callback to make the context current.
//
///////////////////////////////////////////////////////////////////////////////

void UnmanagedRenderContext::makeCurrent()
{
  if(_makeCurrentCallback)
    _makeCurrentCallback();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Call the callback to swap buffers.
//
///////////////////////////////////////////////////////////////////////////////

void UnmanagedRenderContext::swapBuffers()
{
  if(_swapBuffersCallback)
    _swapBuffersCallback();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the callback to make the context current.
//
///////////////////////////////////////////////////////////////////////////////

void UnmanagedRenderContext::makeCurrentCallback( managedCallback callback )
{
  _makeCurrentCallback = callback;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the callback to swap buffers.
//
///////////////////////////////////////////////////////////////////////////////

void UnmanagedRenderContext::swapBuffersCallback ( managedCallback callback )
{
  _swapBuffersCallback = callback;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *UnmanagedRenderContext::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::IOpenGLContext::IID:
    return static_cast < Usul::Interfaces::IOpenGLContext * > ( this );
  default:
    return 0x0;
  }  
}
