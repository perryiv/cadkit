
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "SingleColorFunctor.h"

using namespace DT::Minerva::Glue;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

SingleColorFunctor::SingleColorFunctor() : _functor ( new ::Minerva::Core::Functors::SingleColorFunctor )
{
  Usul::Pointers::reference( _functor );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

SingleColorFunctor::SingleColorFunctor ( ::Minerva::Core::Functors::SingleColorFunctor* functor ) : _functor ( functor )
{
  Usul::Pointers::reference( _functor );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

SingleColorFunctor::~SingleColorFunctor()
{
  Usul::Pointers::unreference( _functor );
  _functor = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Finalizer.
//
///////////////////////////////////////////////////////////////////////////////

SingleColorFunctor::!SingleColorFunctor()
{
  Usul::Pointers::unreference( _functor );
  _functor = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color functor.
//
///////////////////////////////////////////////////////////////////////////////

Minerva::Core::Functors::BaseColorFunctor * SingleColorFunctor::colorFunctor()
{
  return _functor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color.
//
///////////////////////////////////////////////////////////////////////////////

System::Drawing::Color^ SingleColorFunctor::Color::get()
{
  return this->toManagedColor( _functor->color() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the color.
//
///////////////////////////////////////////////////////////////////////////////

void SingleColorFunctor::Color::set( System::Drawing::Color^ color )
{
  _functor->color( this->toOsgColor( color ) );
}
