
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all menu commands.
//
///////////////////////////////////////////////////////////////////////////////

#include "AppFrameWork/Menus/Button.h"
#include "AppFrameWork/Core/BaseVisitor.h"
#include "AppFrameWork/Core/Program.h"

#include <limits>

using namespace AFW::Menus;

AFW_IMPLEMENT_OBJECT ( Button );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Button::Button() : BaseClass(),
  _underline ( std::numeric_limits<unsigned short>::max() ),
  _type ( MENU_BUTTON )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Button::~Button()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the underline index.
//
///////////////////////////////////////////////////////////////////////////////

unsigned short Button::underline() const
{
  Guard guard ( this->mutex() );
  return _underline;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the underline index.
//
///////////////////////////////////////////////////////////////////////////////

void Button::underline ( unsigned short u )
{
  Guard guard ( this->mutex() );
  _underline = u;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Accept the visitor.
//
///////////////////////////////////////////////////////////////////////////////

void Button::accept ( AFW::Core::BaseVisitor *v )
{
  Guard guard ( this->mutex() );
  if ( v )
    v->visit ( this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the type.
//
///////////////////////////////////////////////////////////////////////////////

Button::Type Button::type() const
{
  Guard guard ( this->mutex() );
  return _type;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the underline index.
//
///////////////////////////////////////////////////////////////////////////////

void Button::type ( const Type &t )
{
  Guard guard ( this->mutex() );
  _type = t;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Factory function.
//
///////////////////////////////////////////////////////////////////////////////

Button *Button::createSeparator()
{
  return Button::createButton ( std::string(), Button::MENU_SEPARATOR, AFW::Core::Icon() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Factory function.
//
///////////////////////////////////////////////////////////////////////////////

Button *Button::createCheck ( const std::string &text )
{
  return Button::createButton ( text, Button::MENU_CHECK, AFW::Core::Icon() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Factory function.
//
///////////////////////////////////////////////////////////////////////////////

Button *Button::createRadio ( const std::string &text )
{
  return Button::createButton ( text, Button::MENU_RADIO, AFW::Core::Icon() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Factory function.
//
///////////////////////////////////////////////////////////////////////////////

Button *Button::createButton ( const std::string &text )
{
  return Button::createButton ( text, Button::MENU_BUTTON, AFW::Core::Icon() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Factory function.
//
///////////////////////////////////////////////////////////////////////////////

Button *Button::createButton ( const std::string &text, const AFW::Core::Icon &i )
{
  return Button::createButton ( text, Button::MENU_BUTTON, i );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Factory function.
//
///////////////////////////////////////////////////////////////////////////////

Button *Button::createButton ( const std::string &text, const std::string &icon )
{
  return Button::createButton ( text, Button::MENU_BUTTON, AFW::Core::Icon ( icon ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Factory function.
//
///////////////////////////////////////////////////////////////////////////////

Button *Button::createButton ( const std::string &text, const Type &t, const AFW::Core::Icon &i )
{
  Button::RefPtr button ( AFW::Core::Program::instance().newObject<Button>() );
  if ( button.valid() )
  {
    button->textSet ( text );
    button->icon ( i );
    button->type ( t );
  }
  return button.release();
}
