
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Simple class representing a sphere.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _VIRTUAL_REALITY_VIEWER_SPHERE_CLASS_H_
#define _VIRTUAL_REALITY_VIEWER_SPHERE_CLASS_H_

#include "Usul/Math/Vector3.h"


namespace VRV {


template < class RealType_ > class Sphere
{
public:

  /////////////////////////////////////////////////////////////////////////////
  //
  //  Typedefs.
  //
  /////////////////////////////////////////////////////////////////////////////

  typedef RealType_ RealType;
  typedef Usul::Math::Vector3<RealType> Vec3;


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Default constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Sphere() :
    _center ( 0, 0, 0 ),
    _radius ( 1 )
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Sphere ( const Vec3 &c, RealType r ) :
    _center ( c ),
    _radius ( r )
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Copy constructor.
  //
  /////////////////////////////////////////////////////////////////////////////

  Sphere ( const Sphere &s ) :
    _center ( s._center ),
    _radius ( s._radius )
  {
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Assignment.
  //
  /////////////////////////////////////////////////////////////////////////////

  Sphere &operator = ( const Sphere &s )
  {
    _center = s._center;
    _radius = s._radius;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set the center.
  //
  /////////////////////////////////////////////////////////////////////////////

  const Vec3 &center() const
  {
    return _center;
  }
  Vec3 &center()
  {
    return _center;
  }
  void center ( const Vec3 &c )
  {
    _center = c;
  }


  /////////////////////////////////////////////////////////////////////////////
  //
  //  Get/set the radius.
  //
  /////////////////////////////////////////////////////////////////////////////

  RealType radius() const
  {
    return _radius;
  }
  void radius ( RealType r )
  {
    _radius = r;
  }

private:

  Vec3 _center;
  RealType _radius;
};


///////////////////////////////////////////////////////////////////////////////
//
//  Common types.
//
///////////////////////////////////////////////////////////////////////////////

typedef Sphere<double> Sphered;
typedef Sphere<float>  Spheref;


}; // namespace VRV


#endif // _VIRTUAL_REALITY_VIEWER_SPHERE_CLASS_H_
