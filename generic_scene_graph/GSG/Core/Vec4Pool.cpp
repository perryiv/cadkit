
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 4004, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A pool of 4D vectors.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Vec4Pool.h"
#include "GSG/Core/Container.h"

using namespace GSG;

GSG_IMPLEMENT_CLONE ( Vec4Pool );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

Vec4Pool::Vec4Pool() : Referenced(), 
  _s()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

Vec4Pool::Vec4Pool ( const Vec4Pool &p ) : Referenced ( p ), 
  _s ( p._s )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

Vec4Pool::~Vec4Pool()
{
  // Empty.
}


///////////////////////////////////////////////////////////////////////////////
//
//  Access to the elements.
//
///////////////////////////////////////////////////////////////////////////////

const Vec4Pool::value_type &Vec4Pool::operator [] ( Vec4Pool::size_type i ) const
{
  Lock lock ( this );
  BoundsChecker ( _s.size(), i );
  return GSG::constReference ( _s, i );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Access to the elements.
//
///////////////////////////////////////////////////////////////////////////////

Vec4Pool::value_type &Vec4Pool::operator [] ( Vec4Pool::size_type i )
{
  Lock lock ( this );
  BoundsChecker ( _s.size(), i );
  return GSG::reference ( _s, i );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Resize the pool.
//
///////////////////////////////////////////////////////////////////////////////

void Vec4Pool::resize ( Vec4Pool::size_type s )
{
  Lock lock ( this );
  _s.resize ( s );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the size.
//
///////////////////////////////////////////////////////////////////////////////

Vec4Pool::size_type Vec4Pool::size() const
{
  Lock lock ( this );
  return _s.size();
}
