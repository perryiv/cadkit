
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Geometry/Point.h"

#include "Usul/Components/Manager.h"
#include "Usul/Interfaces/IProjectCoordinates.h"

using namespace Minerva::Core::Geometry;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( Point, Point::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Point::Point() : BaseClass()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Point::~Point()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the point
//
///////////////////////////////////////////////////////////////////////////////

Usul::Math::Vec3d Point::pointData( )
{
  Usul::Math::Vec3d point;

  Usul::Interfaces::IProjectCoordinates::QueryPtr project ( Usul::Components::Manager::instance().getInterface( Usul::Interfaces::IProjectCoordinates::IID ) );

  if( project.valid() )
  {
    point.set( _point[0] + _offset[0], _point[1] + _offset[1], _offset[2] );

    Usul::Math::Vec3d latLongPoint;
    project->projectToSpherical( point, _srid, latLongPoint );
    return latLongPoint;
  }

  return _point;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the center of the geometry.
//
///////////////////////////////////////////////////////////////////////////////

osg::Vec3f Point::geometryCenter ( unsigned int& srid )
{
  return Point::geometryCenter( this->spatialOffset(), srid );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the center of the geometry.
//
///////////////////////////////////////////////////////////////////////////////

osg::Vec3f Point::geometryCenter ( const osg::Vec3f& offset, unsigned int& srid )
{
  srid = this->srid();
  osg::Vec3f center ( _point[0] + _offset[0], _point[1] + _offset[1], _offset[2] );
  return center;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown* Point::queryInterface( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::IPointData::IID:
    return static_cast < Usul::Interfaces::IPointData* > ( this );
  default:
    return BaseClass::queryInterface ( iid );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the point.
//
///////////////////////////////////////////////////////////////////////////////

void Point::point( const Usul::Math::Vec3d& p )
{
  _point = p;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the point.
//
///////////////////////////////////////////////////////////////////////////////

const Usul::Math::Vec3d Point::point() const
{
  return _point;
}
