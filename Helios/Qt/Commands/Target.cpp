
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Target for QAction.
//
///////////////////////////////////////////////////////////////////////////////

#include "Helios/Qt/Commands/Target.h"
#include "Helios/Qt/Tools/Icon.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Trace/Trace.h"

#include <memory>

using namespace CadKit::Helios::Commands;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Target::Target ( Command *command ) : BaseClass(),
  _command ( command )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Target::~Target()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Target::_destroy ), "2696785842" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy.
//
///////////////////////////////////////////////////////////////////////////////

void Target::_destroy()
{
  USUL_TRACE_SCOPE;
  _command = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  This gets called when the action is requested from the GUI.
//
///////////////////////////////////////////////////////////////////////////////

void Target::_slot()
{
  USUL_TRACE_SCOPE;
  if ( true == _command.valid() )
  {
    _command->execute ( _command->caller() );
  }
}
