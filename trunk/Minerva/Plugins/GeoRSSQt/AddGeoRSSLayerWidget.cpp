
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Plugins/GeoRSSQt/CompileGuard.h"
#include "Minerva/Plugins/GeoRSSQt/AddGeoRSSLayerWidget.h"

#include "Minerva/Layers/GeoRSS/GeoRSSLayer.h"

#include "Minerva/Interfaces/IAddLayer.h"

#include "QtTools/Color.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

AddGeoRSSLayerWidget::AddGeoRSSLayerWidget ( QWidget *parent ) : BaseClass ( parent )
{
  // Initialize code from designer.
  this->setupUi ( this );
  
  // Set default color.
  _colorButton->color ( QColor ( 255, 0, 0, 255 ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

AddGeoRSSLayerWidget::~AddGeoRSSLayerWidget()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the url.
//
///////////////////////////////////////////////////////////////////////////////

void AddGeoRSSLayerWidget::url ( const std::string&  s )
{
  _urlEdit->setText ( s.c_str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the url.
//
///////////////////////////////////////////////////////////////////////////////

std::string AddGeoRSSLayerWidget::url() const
{
  return _urlEdit->text().toStdString();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the refresh rate.
//
///////////////////////////////////////////////////////////////////////////////

void AddGeoRSSLayerWidget::refreshRate ( double  d )
{
  _refreshRate->setValue( d );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the refresh rate.
//
///////////////////////////////////////////////////////////////////////////////

double AddGeoRSSLayerWidget::refreshRate() const
{
  return _refreshRate->value();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the enable filtering flag.
//
///////////////////////////////////////////////////////////////////////////////

void AddGeoRSSLayerWidget::enableFiltering ( bool b )
{
  _enableFiltering->setChecked ( b );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the enable filtering flag.
//
///////////////////////////////////////////////////////////////////////////////

bool AddGeoRSSLayerWidget::enableFiltering() const
{
  return Qt::Checked == _enableFiltering->checkState();
}



///////////////////////////////////////////////////////////////////////////////
//
//  Set the element.
//
///////////////////////////////////////////////////////////////////////////////

void AddGeoRSSLayerWidget::element ( const std::string&  s )
{
  _elementFilter->setText ( s.c_str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the element.
//
///////////////////////////////////////////////////////////////////////////////

std::string AddGeoRSSLayerWidget::element() const
{
  return _elementFilter->text().toStdString();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the value.
//
///////////////////////////////////////////////////////////////////////////////

void AddGeoRSSLayerWidget::value ( const std::string& s )
{
  _valueFilter->setText ( s.c_str() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the value.
//
///////////////////////////////////////////////////////////////////////////////

std::string AddGeoRSSLayerWidget::value() const
{
  return _valueFilter->text().toStdString();
}
                                         

///////////////////////////////////////////////////////////////////////////////
//
//  Set the color.
//
///////////////////////////////////////////////////////////////////////////////

void AddGeoRSSLayerWidget::color ( const Usul::Math::Vec4f& c )
{
  _colorButton->color ( QtTools::Color<Usul::Math::Vec4f>::convert ( c ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the color.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Math::Vec4f AddGeoRSSLayerWidget::color()  const
{
  return QtTools::Color<Usul::Math::Vec4f>::convert ( _colorButton->color() );
}
