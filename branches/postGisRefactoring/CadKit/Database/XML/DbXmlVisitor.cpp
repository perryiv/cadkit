
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  DbXmlVisitor: The base visitor class.
//
///////////////////////////////////////////////////////////////////////////////

#include "DbXmlPrecompiled.h"
#include "DbXmlVisitor.h"
#include "DbXmlNode.h"

#ifndef _CADKIT_USE_PRECOMPILED_HEADERS
# include "Standard/SlPrint.h"
# include "Standard/SlAssert.h"
#endif

using namespace CadKit;

DB_XML_IMPLEMENT_VISITOR(DbXmlVisitor,SlRefBase);


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

DbXmlVisitor::DbXmlVisitor() : SlRefBase ( 0 )
{
  SL_PRINT2 ( "In DbXmlVisitor::DbXmlVisitor(), this = %X\n", this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

DbXmlVisitor::~DbXmlVisitor()
{
  SL_PRINT2 ( "In DbXmlVisitor::~DbXmlVisitor(), this = %X\n", this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Reset the visitor. Call this in between scene traversals to ensure that
//  any accumulated states are reset. Here in the base class there is nothing 
//  to reset. I didn't want this to be a pure virtual because it isn't 
//  something that visitors should have to define.
//
///////////////////////////////////////////////////////////////////////////////

bool DbXmlVisitor::reset()
{
  SL_ASSERT ( this );
  return true;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Push the node.
//
///////////////////////////////////////////////////////////////////////////////

void DbXmlVisitor::pushNode ( DbXmlNode *node )
{
  SL_ASSERT ( this );

  // This is not a list of ref-pointers, so we have to manually do it.
  _stack.push_back ( node );
  node->ref();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Pop the top node.
//
///////////////////////////////////////////////////////////////////////////////

void DbXmlVisitor::popNode()
{
  SL_ASSERT ( this );
  SL_ASSERT ( false == _stack.empty() );

  // This is not a list of ref-pointers, so we have to manually do it.
  _stack.back()->unref();
  _stack.pop_back();
}
