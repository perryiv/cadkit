
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _VIRTUAL_REALITY_VIEWER_EXCEPTIONS_H_
#define _VIRTUAL_REALITY_VIEWER_EXCEPTIONS_H_

#include <stdexcept>


namespace VRV {
namespace Exceptions {


///////////////////////////////////////////////////////////////////////////////
//
// Exception for invalid user input.
//
///////////////////////////////////////////////////////////////////////////////

struct UserInput : public std::invalid_argument
{
  UserInput ( const std::string &what ) : std::invalid_argument ( what ){}
};


///////////////////////////////////////////////////////////////////////////////
//
// Exception for corrupt registry.
//
///////////////////////////////////////////////////////////////////////////////

struct CorruptRegistry : public std::runtime_error
{
  CorruptRegistry ( const std::string &what ) : std::runtime_error ( what ){}
};


///////////////////////////////////////////////////////////////////////////////
//
// Exception for recursive mutex lock.
//
///////////////////////////////////////////////////////////////////////////////

struct RecursiveMutexLock : public std::runtime_error
{
  RecursiveMutexLock ( const std::string &what ) : std::runtime_error ( what ){}
};


///////////////////////////////////////////////////////////////////////////////
//
// Exception for failing to start a worked-thread job.
//
///////////////////////////////////////////////////////////////////////////////

struct FailedToStartJob : public std::runtime_error
{
  FailedToStartJob ( const std::string &what ) : std::runtime_error ( what ){}
};


}; // namespace Exceptions
}; // namespace VRV


#endif // _VIRTUAL_REALITY_VIEWER_EXCEPTIONS_H_
