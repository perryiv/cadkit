
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Magrathea/ImageTextureLayer.h"

#include "Usul/Functions/GUID.h"
#include "Usul/Factory/RegisterCreator.h"

using namespace Magrathea;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( ImageTextureLayer, ImageTextureLayer::BaseClass );
USUL_FACTORY_REGISTER_CREATOR ( ImageTextureLayer );

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

ImageTextureLayer::ImageTextureLayer( ) : BaseClass(),
_guid ( Usul::Functions::GUID::generate() ),
_filename ( ),
_ossimTextureLayer ( new ossimPlanetOssimImageLayer ),
SERIALIZE_XML_INITIALIZER_LIST
{
  SERIALIZE_XML_ADD_MEMBER ( _guid );
  SERIALIZE_XML_ADD_MEMBER ( _filename );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

ImageTextureLayer::ImageTextureLayer( const std::string& filename ) : BaseClass(),
_guid ( Usul::Functions::GUID::generate() ),
_filename ( filename ),
_ossimTextureLayer ( new ossimPlanetOssimImageLayer )
{
  _ossimTextureLayer->openImage ( filename.c_str() );

  SERIALIZE_XML_ADD_MEMBER ( _guid );
  SERIALIZE_XML_ADD_MEMBER ( _filename );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor..
//
///////////////////////////////////////////////////////////////////////////////

ImageTextureLayer::~ImageTextureLayer()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown* ImageTextureLayer::queryInterface(unsigned long iid)
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::ILayer::IID:
    return static_cast < Usul::Interfaces::ILayer * > ( this );
  case Usul::Interfaces::IOssimPlanetLayer::IID:
    return static_cast < Usul::Interfaces::IOssimPlanetLayer * > ( this );
  case Usul::Interfaces::ILayerExtents::IID:
    return static_cast < Usul::Interfaces::ILayerExtents* > ( this );
  case Usul::Interfaces::ISerialize::IID:
    return static_cast < Usul::Interfaces::ISerialize* > ( this );
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the state code.
//
///////////////////////////////////////////////////////////////////////////////

ossimPlanetTextureLayerStateCode ImageTextureLayer::getStateCode() const
{
  return _ossimTextureLayer->getStateCode();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the ossimPlanetTexutureLayer.
//
///////////////////////////////////////////////////////////////////////////////

ossimPlanetTextureLayer* ImageTextureLayer::ossimPlanetLayer()
{
  return _ossimTextureLayer.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the guid.
//
///////////////////////////////////////////////////////////////////////////////

std::string ImageTextureLayer::guid() const
{
  return _guid;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the filename.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& ImageTextureLayer::filename() const
{
  return _filename;
}



///////////////////////////////////////////////////////////////////////////////
//
//  Set show layer.
//
///////////////////////////////////////////////////////////////////////////////

void ImageTextureLayer::showLayer( bool b )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get show layer.
//
///////////////////////////////////////////////////////////////////////////////

bool ImageTextureLayer::showLayer() const
{
  return true;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the layer extents.
//
///////////////////////////////////////////////////////////////////////////////

void ImageTextureLayer::layerExtents ( double &lat, double &lon, double& height ) const
{
  _ossimTextureLayer->getCenterLatLonLength( lat, lon, height );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the name.
//
///////////////////////////////////////////////////////////////////////////////

std::string  ImageTextureLayer::name() const
{
  return this->filename();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Deserialize.
//
///////////////////////////////////////////////////////////////////////////////

void ImageTextureLayer::deserialize ( const XmlTree::Node& node )
{
  _dataMemberMap.deserialize( node );
  
  _ossimTextureLayer->openImage ( _filename.c_str() );
}

