
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all geometry builders.
//
///////////////////////////////////////////////////////////////////////////////

#include "ModflowModel/Builders/Geometry.h"

#include "Usul/Trace/Trace.h"

using namespace Modflow::Builders;

USUL_IMPLEMENT_TYPE_ID ( Geometry );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Geometry::Geometry ( const std::string &name, Modflow::Geometry::ID geometry ) : BaseClass(),
  _geometry ( geometry )
{
  USUL_TRACE_SCOPE;
  this->name ( name );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Geometry::~Geometry()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Empty base function to avoid those darn pure virtual calls.
//
///////////////////////////////////////////////////////////////////////////////

void Geometry::build ( const Layer *layer, const Cell *cell, osg::Vec3Array *vertices, osg::Vec3Array *normals, const Vec3d &offset, double scale )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the geometry id.
//
///////////////////////////////////////////////////////////////////////////////

Modflow::Geometry::ID Geometry::geometry() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _geometry;
}
