
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Error policy classes.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef _XML_ERROR_POLICY_CLASSES_H_
#define _XML_ERROR_POLICY_CLASSES_H_

#include <sstream>


///////////////////////////////////////////////////////////////////////////////
//
//  Macro for assert.
//
///////////////////////////////////////////////////////////////////////////////

#ifdef _WIN32
# include <crtdbg.h>
# define XML_ASSERT_MACRO _ASSERT
#else
# include <cassert>
# define XML_ASSERT_MACRO assert
#endif


namespace XML {
namespace Config {


///////////////////////////////////////////////////////////////////////////////
//
//  Assert policy.
//
///////////////////////////////////////////////////////////////////////////////

struct Assert
{
  void operator () ( unsigned int id, bool state ) const
  {
    XML_ASSERT_MACRO ( state );
  }
};


///////////////////////////////////////////////////////////////////////////////
//
//  Thrower policy.
//
///////////////////////////////////////////////////////////////////////////////

template < class Exception > struct Thrower
{
  void operator () ( unsigned int id, bool state ) const
  {
    if ( !state )
    {
      std::ostringstream message;
      message << "XML Error: " << id;
      throw Exception ( message.str() );
    }
  }
};


///////////////////////////////////////////////////////////////////////////////
//
//  Callback policy.
//
///////////////////////////////////////////////////////////////////////////////

template < class Functor > struct Callback
{
  Callback() : _f(){}
  Callback ( const Callback &cb ) : _f ( cb._f ){}
  void operator () ( unsigned int id, bool state ) const
  {
    _f ( id, state );
  }
  void functor ( Functor f )
  {
    _f = f;
  }
protected:
  Functor _f;
};


///////////////////////////////////////////////////////////////////////////////
//
//  A pair of policies.
//
///////////////////////////////////////////////////////////////////////////////

template < class PolicyA, class PolicyB > struct Pair
{
  void operator () ( unsigned int id, bool state ) const
  {
    if ( !state )
    {
      PolicyA() ( id, state );
      PolicyB() ( id, state );
    }
  }
};


}; // namespace Config
}; // namespace XML


///////////////////////////////////////////////////////////////////////////////
//
//  Cleanup
//
///////////////////////////////////////////////////////////////////////////////

#undef XML_ASSERT_MACRO


#endif // _XML_ERROR_POLICY_CLASSES_H_
