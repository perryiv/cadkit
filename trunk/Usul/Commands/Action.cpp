
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all actions. An action is an event handler.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Commands/Action.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Trace/Trace.h"

using namespace Usul::Commands;

USUL_IMPLEMENT_TYPE_ID ( Action );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Action::Action ( Usul::Interfaces::IUnknown *caller ) : BaseClass(),
  _caller ( caller ),
  _text(),
  _toolTipText(),
  _shortcut(),
  _iconPath()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Action::~Action()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Action::_destroy ), "3176019710" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy.
//
///////////////////////////////////////////////////////////////////////////////

void Action::_destroy()
{
  USUL_TRACE_SCOPE;
  _caller = 0x0;
  _text.clear();
  _toolTipText.clear();
  _shortcut.clear();
  _iconPath.clear();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the caller.
//
///////////////////////////////////////////////////////////////////////////////

const Usul::Interfaces::IUnknown *Action::caller() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _caller.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the caller.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *Action::caller()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _caller.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the text.
//
///////////////////////////////////////////////////////////////////////////////

void Action::text ( const std::string& value )
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	_text = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the text.
//
///////////////////////////////////////////////////////////////////////////////

std::string Action::text() const
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
  return std::string ( _text.begin(), _text.end() ); // More thread-safe?
}
  

///////////////////////////////////////////////////////////////////////////////
//
//  Set the tooltip.
//
///////////////////////////////////////////////////////////////////////////////

void Action::tooltip ( const std::string& value )
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	_toolTipText = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the tooltip.
//
///////////////////////////////////////////////////////////////////////////////

std::string Action::tooltip() const
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
  return std::string ( _toolTipText.begin(), _toolTipText.end() ); // More thread-safe?
}
  

///////////////////////////////////////////////////////////////////////////////
//
//  Set the shortcut.
//
///////////////////////////////////////////////////////////////////////////////

void Action::shortcut ( const std::string& value )
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	_shortcut = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the shortcut.
//
///////////////////////////////////////////////////////////////////////////////

std::string Action::shortcut() const
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
  return std::string ( _shortcut.begin(), _shortcut.end() ); // More thread-safe?
}
  

///////////////////////////////////////////////////////////////////////////////
//
//  Set the icon path.
//
///////////////////////////////////////////////////////////////////////////////

void Action::iconPath ( const std::string& value )
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
	_iconPath = value;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the icon path.
//
///////////////////////////////////////////////////////////////////////////////

std::string Action::iconPath() const
{
	USUL_TRACE_SCOPE;
	Guard guard ( this->mutex() );
  return std::string ( _iconPath.begin(), _iconPath.end() ); // More thread-safe?
}
