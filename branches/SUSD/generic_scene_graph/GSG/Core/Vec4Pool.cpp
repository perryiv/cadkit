
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 4004, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A pool of 4D vectors.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Vec4Pool.h"

using namespace GSG;

GSG_IMPLEMENT_REFERENCED ( Vec4Pool );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

Vec4Pool::Vec4Pool() : Referenced(), 
  _values()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

Vec4Pool::Vec4Pool ( const Vec4Pool &p ) : Referenced ( p ), 
  _values ( p._values )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

Vec4Pool::~Vec4Pool()
{
  // Empty.
}


///////////////////////////////////////////////////////////////////////////////
//
//  Access to the values.
//
///////////////////////////////////////////////////////////////////////////////

const Vec4Pool::value_type &Vec4Pool::value ( Vec4Pool::size_type i ) const
{
  BoundsChecker ( _values.size(), i );
  return _values[i];
}


///////////////////////////////////////////////////////////////////////////////
//
//  Access to the values.
//
///////////////////////////////////////////////////////////////////////////////

void Vec4Pool::value ( Vec4Pool::size_type i, const Vec4Pool::value_type &v )
{
  BoundsChecker ( _values.size(), i );
  _values[i] = v;
}


/////////////////////////////////////////////////////////////////////////////
//
//  Set from the given object.
//
/////////////////////////////////////////////////////////////////////////////

void Vec4Pool::setFrom ( const Vec4Pool &p )
{
  Lock lock ( this );

  // Set the members.
  _values = p._values;

  // Call the base class's function.
  BaseClass::setFrom ( p );
}
