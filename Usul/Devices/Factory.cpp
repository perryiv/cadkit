
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2005, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

#include "Factory.h"
#include "IDeviceCreate.h"

#include "Usul/Components/Manager.h"

using namespace Usul::Devices;

///////////////////////////////////////////////////////////////////////////////
//
//  Static instance.
//
///////////////////////////////////////////////////////////////////////////////

Factory *Factory::_instance ( 0x0 );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Factory::Factory()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Factory::~Factory()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Singleton.
//
///////////////////////////////////////////////////////////////////////////////

Factory &Factory::instance()
{
  if ( 0x0 == _instance )
    _instance = new Factory;
  return *_instance;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get a list of devices.
//
///////////////////////////////////////////////////////////////////////////////

Factory::Devices Factory::devices ( Usul::Interfaces::IUnknown* caller )
{
  Devices devices;
  
  typedef Usul::Components::Manager Manager;
  typedef Manager::UnknownSet Unknowns;

  Unknowns unknowns ( Manager::instance().getInterfaces ( Usul::Devices::IDeviceCreate::IID ) );

  for( Unknowns::iterator iter = unknowns.begin(); iter != unknowns.end(); ++iter )
  {
    Usul::Devices::IDeviceCreate::ValidQueryPtr deviceCreate ( (*iter).get() );
    Usul::Devices::IDevice::QueryPtr device ( deviceCreate->createDevice( caller ) );

    if( device.valid() )
      devices.push_back( device.get() );
  }

  return devices;
}
