
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant and Perry L. Miller IV.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Functor class for vertical joystick input.
//
///////////////////////////////////////////////////////////////////////////////

#include "Usul/Functors/Interaction/Input/JoystickVertical.h"
#include "Usul/Trace/Trace.h"

using namespace Usul::Functors::Interaction::Input;

USUL_IMPLEMENT_TYPE_ID ( JoystickVertical );


///////////////////////////////////////////////////////////////////////////////
//
//  Default constructor.
//
///////////////////////////////////////////////////////////////////////////////

JoystickVertical::JoystickVertical ( Unknown *caller, const std::string &name ) : 
  BaseClass ( caller, name ),
  _j ( caller )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
///////////////////////////////////////////////////////////////////////////////

JoystickVertical::JoystickVertical ( const JoystickVertical &j ) : BaseClass ( j ),
  _j ( j._j )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

JoystickVertical::~JoystickVertical()
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the vertical analog input.
//
///////////////////////////////////////////////////////////////////////////////

void JoystickVertical::operator()()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  _value = ( ( _j.valid() ) ? _j->joystickVertical() : _value );
}
