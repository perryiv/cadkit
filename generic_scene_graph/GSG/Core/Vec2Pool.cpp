
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  A pool of 2D vectors.
//
///////////////////////////////////////////////////////////////////////////////

#include "GSG/Core/Precompiled.h"
#include "GSG/Core/Vec2Pool.h"
#include "GSG/Core/Container.h"

using namespace GSG;

GSG_IMPLEMENT_CLONE ( Vec2Pool );


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

Vec2Pool::Vec2Pool() : Referenced(), 
  _s()
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Copy constructor.
//
/////////////////////////////////////////////////////////////////////////////

Vec2Pool::Vec2Pool ( const Vec2Pool &p ) : Referenced ( p ), 
  _s ( p._s )
{
  // Empty.
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

Vec2Pool::~Vec2Pool()
{
  // Empty.
}


///////////////////////////////////////////////////////////////////////////////
//
//  Access to the elements.
//
///////////////////////////////////////////////////////////////////////////////

const Vec2Pool::value_type &Vec2Pool::operator [] ( Vec2Pool::size_type i ) const
{
  Lock lock ( this );
  BoundsChecker ( _s.size(), i );
  return GSG::constReference ( _s, i );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Access to the elements.
//
///////////////////////////////////////////////////////////////////////////////

Vec2Pool::value_type &Vec2Pool::operator [] ( Vec2Pool::size_type i )
{
  Lock lock ( this );
  BoundsChecker ( _s.size(), i );
  return GSG::reference ( _s, i );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Resize the pool.
//
///////////////////////////////////////////////////////////////////////////////

void Vec2Pool::resize ( Vec2Pool::size_type s )
{
  Lock lock ( this );
  _s.resize ( s );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the size.
//
///////////////////////////////////////////////////////////////////////////////

Vec2Pool::size_type Vec2Pool::size() const
{
  Lock lock ( this );
  return _s.size();
}
