///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Adam Kubach
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Proxy between OsgTools::Render::Viewer and CadKit::Viewer::Glue::Viewer.
//
///////////////////////////////////////////////////////////////////////////////

#include "TimeoutSpin.h"

#include "Usul/Shared/Preferences.h"
#include "Usul/Registry/Constants.h"

using namespace CadKit::Viewer::Glue;

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( TimeoutSpin, TimeoutSpin::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

TimeoutSpin::TimeoutSpin() : BaseClass(), _timeout ( 0x0 )
{
  Usul::Shared::Preferences::instance().setBool ( Usul::Registry::Keys::ALLOW_SPIN, true );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

TimeoutSpin::~TimeoutSpin()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query the interfaces
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *TimeoutSpin::queryInterface ( unsigned long iid )
{
  switch ( iid )
  {
  case Usul::Interfaces::IUnknown::IID:
  case Usul::Interfaces::ITimeoutSpin::IID:
    return static_cast< Usul::Interfaces::ITimeoutSpin*> ( this );
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Stop the spin timeout.
//
///////////////////////////////////////////////////////////////////////////////

void TimeoutSpin::stopSpin()
{
  if ( 0x0 != _timeout )
    _timeout ( false, 0 );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Start the spin timeout.
//
///////////////////////////////////////////////////////////////////////////////

void TimeoutSpin::startSpin ( double span )
{
  if ( 0x0 != _timeout )
    _timeout ( true, span );
}
