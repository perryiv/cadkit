
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, John K. Grant and Perry L. Miller IV.
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Error-checking functions.
//
///////////////////////////////////////////////////////////////////////////////

#include "Errors.h"
#include "Item.h"

#include <sstream>
#include <stdexcept>

using namespace MenuKit;


///////////////////////////////////////////////////////////////////////////////
//
//  Check the pointer.
//
///////////////////////////////////////////////////////////////////////////////

void Errors::checkPointer ( unsigned int id, const void *ptr )
{
  if ( !ptr )
  {
    std::ostringstream out;
    out << "Error " << id << ", null pointer.";
    throw std::runtime_error ( out.str() );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Check the state.
//
///////////////////////////////////////////////////////////////////////////////

void Errors::checkState ( unsigned int id, bool state )
{
  if ( !state )
  {
    std::ostringstream out;
    out << "Error " << id << ", bad state.";
    throw std::runtime_error ( out.str() );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Make sure the parent is null.
//
///////////////////////////////////////////////////////////////////////////////

void Errors::ensureNullParent ( unsigned int id, const Item *item )
{
  if ( item->parent() )
  {
    std::ostringstream out;
    out << "Error " << id << ", item already has a parent."
      << "\n\tText: " << item->text();
    throw std::runtime_error ( out.str() );
  }
}
