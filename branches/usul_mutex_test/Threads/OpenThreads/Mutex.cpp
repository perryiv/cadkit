
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Mutex classes.
//
///////////////////////////////////////////////////////////////////////////////

#include "Threads/OpenThreads/Mutex.h"

#include "OpenThreads/Mutex"

#include "Usul/Threads/ThreadId.h"
#include "Usul/Trace/Trace.h"
#include "Usul/Exceptions/Thrower.h"

#include <stdexcept>

using namespace Threads::OT;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Mutex::Mutex() : BaseClass(),
  _mutex ( new OpenThreads::Mutex ), 
  _threadId ( 0 )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Mutex::~Mutex()
{
  USUL_TRACE_SCOPE;
  delete _mutex;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Check the state of the mutex,
//
///////////////////////////////////////////////////////////////////////////////

void Mutex::_check()
{
  USUL_TRACE_SCOPE;

  // See if this thread has the lock.
  if ( Usul::Threads::currentThreadId() == _threadId )
  {
    // Bad news.
    throw std::runtime_error ( "Error 3756599590, attempting to recursively lock a mutex" );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Lock the mutex.
//
///////////////////////////////////////////////////////////////////////////////

void Mutex::lock()
{
  USUL_TRACE_SCOPE;

  // See if we can lock.
  this->_check();

  // Lock the mutex.
  if ( 0 != _mutex->lock() )
  {
    // Bad news.
    throw std::runtime_error ( "Error 1939779417, failed to lock mutex" );
  }

  // Get thread id.
  _threadId = Usul::Threads::currentThreadId();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Unlock the mutex.
//
///////////////////////////////////////////////////////////////////////////////

void Mutex::unlock()
{
  USUL_TRACE_SCOPE;

  // Lock the mutex.
  if ( 0 != _mutex->unlock() )
  {
    // Bad news.
    throw std::runtime_error ( "Error 2622139462, failed to unlock mutex" );
  }

  // Reset the id
  _threadId = 0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Creation function.
//
///////////////////////////////////////////////////////////////////////////////

namespace Threads
{
  namespace OT
  {
    Usul::Threads::Mutex *newOpenThreadsMutex()
    {
      USUL_TRACE_SCOPE_STATIC;
      return new Mutex();
    }
  };
};
