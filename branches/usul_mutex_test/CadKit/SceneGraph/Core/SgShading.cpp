
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L. Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  SgShading.cpp: Shading class.
//
/////////////////////////////////////////////////////////////////////////////

#include "SgPrecompiled.h"
#include "SgShading.h"

#include "Standard/SlPrint.h"
#include "Standard/SlAssert.h"

using namespace CadKit;

SG_IMPLEMENT_DYNAMIC_NODE(SgShading,SgAttribute);


/////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
/////////////////////////////////////////////////////////////////////////////

SgShading::SgShading() : SgAttribute(), type ( SMOOTH )
{
  SL_PRINT2 ( "SgShading::SgShading(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
/////////////////////////////////////////////////////////////////////////////

SgShading::~SgShading()
{
  SL_PRINT2 ( "SgShading::~SgShading(), this = %X\n", this );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Does the given node have the same visible properties?
//
/////////////////////////////////////////////////////////////////////////////

bool SgShading::isEqualVisibleProperties ( const SgNode &node ) const
{
  SL_ASSERT ( this );

  // Make sure we have the right type.
  if ( false == node.isOfType ( SgShading::getClassType() ) )
    return false;

  // Typecast.
  SgShading &s = (SgShading &) node;

  // Are they the same?
  return ( type == s.type && SgAttribute::isEqualVisibleProperties ( node ) );
}
