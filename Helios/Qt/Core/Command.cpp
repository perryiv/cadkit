
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2002, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for all commands.
//
///////////////////////////////////////////////////////////////////////////////

#include "Helios/Qt/Core/Command.h"

#include "Usul/Trace/Trace.h"

using namespace CadKit::Helios::Core;

USUL_IMPLEMENT_TYPE_ID ( Command );

USUL_IMPLEMENT_IUNKNOWN_MEMBERS ( Command, Command::BaseClass );


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Command::Command ( MainWindow *mw ) : BaseClass(),
  _mainWindow ( mw )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Command::~Command()
{
  USUL_TRACE_SCOPE;
  _mainWindow = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Query for the interface.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *Command::queryInterface ( unsigned long iid )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );

  switch ( iid )
  {
  case Usul::Interfaces::ICommand::IID:
    return static_cast<Usul::Interfaces::ICommand*>(this);
  case Usul::Interfaces::IUnknown::IID:
    return static_cast<Usul::Interfaces::IUnknown*>(static_cast<Usul::Interfaces::ICommand*>(this));
  default:
    return 0x0;
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the main window.
//
///////////////////////////////////////////////////////////////////////////////

const MainWindow *Command::_getMainWindow() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _mainWindow;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the main window.
//
///////////////////////////////////////////////////////////////////////////////

MainWindow *Command::_getMainWindow()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _mainWindow;
}
