
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2007, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Perry L Miller IV
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Base class for the action.
//
///////////////////////////////////////////////////////////////////////////////

#include "Helios/Qt/Commands/BaseAction.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Threads/Named.h"
#include "Usul/Trace/Trace.h"

using namespace CadKit::Helios::Commands;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

BaseAction::BaseAction ( IUnknown *caller ) : BaseClass ( 0x0 ),
  _caller ( caller ),
  _mutex  ( Usul::Threads::Mutex::create() )
{
  USUL_TRACE_SCOPE;
  USUL_THREADS_ENSURE_GUI_THREAD ( throw std::runtime_error ( "Error 1938333577: Not GUI thread" ) );
  this->connect ( this, SIGNAL ( triggered() ), this, SLOT ( _slot() ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

BaseAction::~BaseAction()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &BaseAction::_destroy ), "3849726249" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy this instance.
//
///////////////////////////////////////////////////////////////////////////////

void BaseAction::_destroy()
{
  USUL_TRACE_SCOPE;
  USUL_THREADS_ENSURE_GUI_THREAD ( throw std::runtime_error ( "Error 3195871389: Not GUI thread" ) );
  _caller = static_cast < IUnknown * > ( 0x0 );
  delete _mutex; _mutex = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Called by the GUI system.
//
///////////////////////////////////////////////////////////////////////////////

void BaseAction::_slot()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &BaseAction::_execute ), "2485487655" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the caller.
//
///////////////////////////////////////////////////////////////////////////////

const Usul::Interfaces::IUnknown *BaseAction::caller() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _caller.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the caller.
//
///////////////////////////////////////////////////////////////////////////////

Usul::Interfaces::IUnknown *BaseAction::caller()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  return _caller.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the caller.
//
///////////////////////////////////////////////////////////////////////////////

void BaseAction::caller ( Usul::Interfaces::IUnknown *caller )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this->mutex() );
  _caller = caller;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the mutex.
//
///////////////////////////////////////////////////////////////////////////////

BaseAction::Mutex &BaseAction::mutex() const
{
  USUL_TRACE_SCOPE;
  return *_mutex;
}
