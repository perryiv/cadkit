
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Author: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Layers/Kml/Object.h"

#include "XmlTree/Node.h"

using namespace Minerva::Layers::Kml;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Object::Object() : 
  BaseClass(),
  _id(),
  _targetId(),
  _mutex()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Object::Object ( const XmlTree::Node& node ) : 
  BaseClass(),
  _id(),
  _targetId()
{
  typedef XmlTree::Node::Attributes Attributes;
  
  // Get the attributes.
  const Attributes& attributes ( node.attributes() );
  
  // Set the id.
  {
    Attributes::const_iterator iter ( attributes.find ( "id" ) );
    _id = ( iter != attributes.end() ? iter->second : "" );
  }
  
  // Set the target id.
  {
    Attributes::const_iterator iter ( attributes.find ( "targetId" ) );
    _targetId = ( iter != attributes.end() ? iter->second : "" );
  }
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Object::~Object()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the id.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Object::objectId() const
{
  Guard guard ( this->mutex() );
  return _id;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the id.
//
///////////////////////////////////////////////////////////////////////////////

void Object::objectId( const std::string& s )
{
  Guard guard ( this->mutex() );
  _id = s;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the target id.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Object::targetId() const
{
  Guard guard ( this->mutex() );
  return _targetId;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the target id.
//
///////////////////////////////////////////////////////////////////////////////

void Object::targetId( const std::string& s )
{
  Guard guard ( this->mutex() );
  _targetId = s;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the mutex.
//
///////////////////////////////////////////////////////////////////////////////

Object::Mutex& Object::mutex() const
{
  return _mutex;
}
