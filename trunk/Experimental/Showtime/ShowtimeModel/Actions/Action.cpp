
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Perry L Miller IV
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Action for showtime.
//
///////////////////////////////////////////////////////////////////////////////

#include "ShowtimeModel/Actions/Action.h"

#include "XmlTree/Node.h"

#include "Usul/Adaptors/MemberFunction.h"
#include "Usul/Convert/Vector2.h"
#include "Usul/Functions/SafeCall.h"
#include "Usul/Trace/Trace.h"

using namespace Showtime::Actions;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor
//
///////////////////////////////////////////////////////////////////////////////

Action::Action() : BaseClass(),
  _attributes(),
  _model(),
  _stepRange ( 0, 0 ),
  _document ( 0x0 )
{
  USUL_TRACE_SCOPE;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor
//
///////////////////////////////////////////////////////////////////////////////

Action::~Action()
{
  USUL_TRACE_SCOPE;
  Usul::Functions::safeCall ( Usul::Adaptors::memberFunction ( this, &Action::_destroy ), "2217103294" );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destroy
//
///////////////////////////////////////////////////////////////////////////////

void Action::_destroy()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );

  // Clear members.
  _attributes.clear();
  _model.clear();
  _document = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Initialize
//
///////////////////////////////////////////////////////////////////////////////

void Action::init ( ShowtimeDocument *document, const XmlTree::Node *node )
{
  USUL_TRACE_SCOPE;

  // Check input.
  if ( 0x0 == node )
    throw std::invalid_argument ( "Error 1876844060: null node passed when initializing action" );

  // Set members.
  _attributes = node->attributes();
  _model = node->attribute ( "model" );
  Usul::Convert::Type<std::string,StepRange>::convert ( node->attribute ( "steps" ), _stepRange );
  _document = document;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the attributes.
//
///////////////////////////////////////////////////////////////////////////////

std::string Action::attribute ( const std::string &name ) const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  Attributes::const_iterator i ( _attributes.find ( name ) );
  return ( ( i != _attributes.end() ) ? i->second : std::string() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the model.
//
///////////////////////////////////////////////////////////////////////////////

std::string Action::model() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _model;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the step-range.
//
///////////////////////////////////////////////////////////////////////////////

Action::StepRange Action::stepRange() const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _stepRange;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Execute the action.
//
///////////////////////////////////////////////////////////////////////////////

void Action::execute ( unsigned int step )
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Is the step in range.
//
///////////////////////////////////////////////////////////////////////////////

bool Action::isInRange ( unsigned int step ) const
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return ( ( step >= _stepRange[0] ) && ( step <= _stepRange[1] ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the document.
//
///////////////////////////////////////////////////////////////////////////////

ShowtimeDocument *Action::_getDocument()
{
  USUL_TRACE_SCOPE;
  Guard guard ( this );
  return _document;
}
