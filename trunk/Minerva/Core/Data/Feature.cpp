
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2008, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "Minerva/Core/Data/Feature.h"
#include "Minerva/Core/Data/TimeSpan.h"

using namespace Minerva::Core::Data;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

Feature::Feature() : 
  BaseClass(),
  _description(),
  _name(),
	_styleUrl(),
  _visibility ( true ),
  _lookAt ( 0x0 ),
  _timePrimitive ( 0x0 )
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

Feature::~Feature()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the name.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Feature::name() const
{
  Guard guard ( this->mutex() );
  return _name;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the name.
//
///////////////////////////////////////////////////////////////////////////////

void Feature::name ( const std::string& s )
{
  Guard guard ( this->mutex() );
  _name = s;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the visiblity.
//
///////////////////////////////////////////////////////////////////////////////

bool Feature::visibility() const
{
  Guard guard ( this->mutex() );
  return _visibility;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the visiblity.
//
///////////////////////////////////////////////////////////////////////////////

void Feature::visibility ( bool b )
{
  Guard guard ( this->mutex() );
  _visibility = b;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the style url.
//
///////////////////////////////////////////////////////////////////////////////

void Feature::styleUrl ( const std::string& url )
{
  Guard guard ( this->mutex() );
	_styleUrl = url;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the style url.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Feature::styleUrl() const
{
  Guard guard ( this->mutex() );
	return _styleUrl;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the time primitive.
//
///////////////////////////////////////////////////////////////////////////////

void Feature::timePrimitive ( TimePrimitive* timePrimitive )
{
  Guard guard ( this->mutex() );
  _timePrimitive = timePrimitive;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the time primitive.
//
///////////////////////////////////////////////////////////////////////////////

Minerva::Core::Data::TimePrimitive* Feature::timePrimitive() const
{
  Guard guard ( this->mutex() );
  return _timePrimitive.get();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the description.
//
///////////////////////////////////////////////////////////////////////////////

void Feature::description ( const std::string& s )
{
  Guard guard ( this->mutex() );
  _description = s;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the description.
//
///////////////////////////////////////////////////////////////////////////////

const std::string& Feature::description() const
{
  Guard guard ( this->mutex() );
  return _description;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the look at.
//
///////////////////////////////////////////////////////////////////////////////

void Feature::lookAt ( LookAt* lookAt )
{
  Guard guard ( this->mutex() );
  _lookAt = lookAt;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the look at.
//
///////////////////////////////////////////////////////////////////////////////

LookAt* Feature::lookAt() const
{
  Guard guard ( this->mutex() );
  return _lookAt.get();
}
