
///////////////////////////////////////////////////////////////////////////////
//
//  Copyright (c) 2006, Arizona State University
//  All rights reserved.
//  BSD License: http://www.opensource.org/licenses/bsd-license.html
//  Created by: Adam Kubach
//
///////////////////////////////////////////////////////////////////////////////

#include "GradientColorFunctor.h"

#include "Minerva/Core/Functors/GradientColorFunctor.h"

using namespace DT::Minerva::Glue;


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

GradientColorFunctor::GradientColorFunctor() : 
_functor ( new ::Minerva::Core::Functors::GradientColorFunctor )
{
  Usul::Pointers::reference ( _functor );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Constructor.
//
///////////////////////////////////////////////////////////////////////////////

GradientColorFunctor::GradientColorFunctor ( ::Minerva::Core::Functors::GradientColorFunctor* functor ) : _functor ( functor )
{
  Usul::Pointers::reference ( _functor );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Destructor.
//
///////////////////////////////////////////////////////////////////////////////

GradientColorFunctor::~GradientColorFunctor()
{
  Usul::Pointers::unreference ( _functor );
  _functor = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Finalizer.
//
///////////////////////////////////////////////////////////////////////////////

GradientColorFunctor::!GradientColorFunctor()
{
  Usul::Pointers::unreference ( _functor );
  _functor = 0x0;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Return the functor.
//
///////////////////////////////////////////////////////////////////////////////

Minerva::Core::Functors::BaseColorFunctor * GradientColorFunctor::colorFunctor()
{
  return _functor;
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the min color.
//
///////////////////////////////////////////////////////////////////////////////

System::Drawing::Color^ GradientColorFunctor::MinColor::get()
{
  return this->toManagedColor ( _functor->minColor() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the min color.
//
///////////////////////////////////////////////////////////////////////////////

void GradientColorFunctor::MinColor::set( System::Drawing::Color^ color )
{
  _functor->minColor ( this->toOsgColor ( color ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the max color.
//
///////////////////////////////////////////////////////////////////////////////

System::Drawing::Color^ GradientColorFunctor::MaxColor::get()
{
  return this->toManagedColor ( _functor->maxColor() );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the max color.
//
///////////////////////////////////////////////////////////////////////////////

void GradientColorFunctor::MaxColor::set( System::Drawing::Color^ color )
{
  return _functor->maxColor ( this->toOsgColor( color ) );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the min value.
//
///////////////////////////////////////////////////////////////////////////////

double GradientColorFunctor::MinValue::get()
{
  return _functor->minValue();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the min value.
//
///////////////////////////////////////////////////////////////////////////////

void GradientColorFunctor::MinValue::set ( double value )
{
  _functor->minValue ( value );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Get the max value.
//
///////////////////////////////////////////////////////////////////////////////

double GradientColorFunctor::MaxValue::get()
{
  return _functor->maxValue();
}


///////////////////////////////////////////////////////////////////////////////
//
//  Set the max value.
//
///////////////////////////////////////////////////////////////////////////////

void GradientColorFunctor::MaxValue::set ( double value )
{
  _functor->maxValue ( value );
}

